(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content "model_trace:" "name:" : short_short_integer }
 
 function short_short_integer__ref___projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content "model_trace:" "name:" : short_integer }
 
 function short_integer__ref___projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content "model_trace:" "name:" : integer }
 
 function integer__ref___projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content "model_trace:" "name:" : long_integer }
 
 function long_integer__ref___projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content "model_trace:" "name:" : long_long_integer }
 
 function long_long_integer__ref___projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural =
  < range 0 2147483647 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content "model_trace:" "name:" : natural }
 
 function natural__ref___projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive =
  < range 1 2147483647 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content "model_trace:" "name:" : positive }
 
 function positive__ref___projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content "model_trace:" "name:" : short_float }
 
 function short_float__ref___projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref =
  { mutable float__content "model_trace:" "name:" : float }
 
 function float__ref___projection 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content "model_trace:" "name:" : long_float }
 
 function long_float__ref___projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  255
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content "model_trace:" "name:" : character }
 
 function character__ref___projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content "model_trace:" "name:" : wide_character }
 
 function wide_character__ref___projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content "model_trace:" "name:" : wide_wide_character }
 
 function wide_wide_character__ref___projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character__rep
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string 
   (x : Main.__image) : string
 
 function from_string 
   (x : string) : Main.__image
 
 type string__ref =
  { mutable string__content "model_trace:" "name:" : string }
 
 function string__ref___projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character__rep
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref =
  { mutable wide_string__content "model_trace:" "name:" : wide_string }
 
 function wide_string__ref___projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content "model_trace:" "name:" : wide_wide_string }
 
 function wide_wide_string__ref___projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use import "_gnatprove_standard".Main
 use import "int".Int

 function num_small 
   : int =
  1
 
 function den_small 
   : int =
  1000000000
 
 clone export "ada__model".Fixed_Point_Rep with
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function num_small 
   : Main.__fixed =
  1
 
 function den_small 
   : Main.__fixed =
  1000000000
 
 function first 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content "model_trace:" "name:" : duration }
 
 function duration__ref___projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content "model_trace:" "name:" : universal_integer }
 
 function universal_integer__ref___projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "airlock" defined at coursework.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Coursework__airlock
 use import "_gnatprove_standard".Main
 use import "int".Int

 type airlock 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = airlock, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type airlock__ref =
  { mutable airlock__content "model_trace:" "name:" : airlock }
 
 function airlock__ref___projection 
   (a : airlock__ref) : airlock =
  a.airlock__content
 
 meta "model_projection" function airlock__ref___projection
 
 meta "inline : no" function airlock__ref___projection
 
 val airlock__havoc 
   (x : airlock__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "airlock" defined at coursework.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Coursework__airlock__rep
 use        Coursework__airlock
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Coursework__airlock.airlock, 
 predicate in_range = Coursework__airlock.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "oxegen" defined at coursework.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Coursework__oxegen
 use import "_gnatprove_standard".Main
 use import "int".Int

 type oxegen 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = oxegen, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type oxegen__ref =
  { mutable oxegen__content "model_trace:" "name:" : oxegen }
 
 function oxegen__ref___projection 
   (a : oxegen__ref) : oxegen =
  a.oxegen__content
 
 meta "model_projection" function oxegen__ref___projection
 
 meta "inline : no" function oxegen__ref___projection
 
 val oxegen__havoc 
   (x : oxegen__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "oxegen" defined at coursework.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Coursework__oxegen__rep
 use        Coursework__oxegen
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Coursework__oxegen.oxegen, 
 predicate in_range = Coursework__oxegen.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "status" defined at coursework.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Coursework__status
 use import "_gnatprove_standard".Main
 use import "int".Int

 type status 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = status, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type status__ref =
  { mutable status__content "model_trace:" "name:" : status }
 
 function status__ref___projection 
   (a : status__ref) : status =
  a.status__content
 
 meta "model_projection" function status__ref___projection
 
 meta "inline : no" function status__ref___projection
 
 val status__havoc 
   (x : status__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "status" defined at coursework.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Coursework__status__rep
 use        Coursework__status
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Coursework__status.status, 
 predicate in_range = Coursework__status.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "opertationallowed" defined at coursework.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Coursework__opertationallowed
 use import "_gnatprove_standard".Main
 use import "int".Int

 type opertationallowed 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = opertationallowed, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type opertationallowed__ref =
  { mutable opertationallowed__content "model_trace:" "name:" : opertationallowed }
 
 function opertationallowed__ref___projection 
   (a : opertationallowed__ref) : opertationallowed =
  a.opertationallowed__content
 
 meta "model_projection" function opertationallowed__ref___projection
 
 meta "inline : no" function opertationallowed__ref___projection
 
 val opertationallowed__havoc 
   (x : opertationallowed__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "opertationallowed" defined at coursework.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Coursework__opertationallowed__rep
 use        Coursework__opertationallowed
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Coursework__opertationallowed.opertationallowed, 
 predicate in_range = Coursework__opertationallowed.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "reactorheat" defined at coursework.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Coursework__reactorheat
 use import "_gnatprove_standard".Main
 use import "int".Int

 type reactorheat 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = reactorheat, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type reactorheat__ref =
  { mutable reactorheat__content "model_trace:" "name:" : reactorheat }
 
 function reactorheat__ref___projection 
   (a : reactorheat__ref) : reactorheat =
  a.reactorheat__content
 
 meta "model_projection" function reactorheat__ref___projection
 
 meta "inline : no" function reactorheat__ref___projection
 
 val reactorheat__havoc 
   (x : reactorheat__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "reactorheat" defined at coursework.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Coursework__reactorheat__rep
 use        Coursework__reactorheat
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Coursework__reactorheat.reactorheat, 
 predicate in_range = Coursework__reactorheat.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "TindexB" defined at coursework.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Coursework__TindexB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tindexB =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tindexB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tindexB__ref =
  { mutable tindexB__content "model_trace:" "name:" : tindexB }
 
 function tindexB__ref___projection 
   (a : tindexB__ref) : tindexB =
  a.tindexB__content
 
 meta "model_projection" function tindexB__ref___projection
 
 meta "inline : no" function tindexB__ref___projection
 
 val tindexB__havoc 
   (x : tindexB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TindexB" defined at coursework.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Coursework__TindexB__rep
 use        Coursework__TindexB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Coursework__TindexB.tindexB) : int =
  (Coursework__TindexB.tindexB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Coursework__TindexB.tindexB, 
 predicate in_range = Coursework__TindexB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "index" defined at coursework.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Coursework__index
 use import "_gnatprove_standard".Main
 use import "int".Int

 type index =
  < range 1 2 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = index, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type index__ref =
  { mutable index__content "model_trace:" "name:" : index }
 
 function index__ref___projection 
   (a : index__ref) : index =
  a.index__content
 
 meta "model_projection" function index__ref___projection
 
 meta "inline : no" function index__ref___projection
 
 val index__havoc 
   (x : index__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "index" defined at coursework.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Coursework__index__rep
 use        Coursework__index
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Coursework__index.index) : int =
  (Coursework__index.index'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Coursework__index.index, 
 predicate in_range = Coursework__index.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "TairarrayB" defined at coursework.ads:9, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Coursework__airlock
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__airlock
 use        Coursework__airlock__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Coursework__airlock.airlock
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_154   : int.
   (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
    ((Coursework__airlock__rep.to_rep (get a temp___idx_154)) = (Coursework__airlock__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_154   : int.
    (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
     ((Coursework__airlock__rep.to_rep (get a temp___idx_154)) = (Coursework__airlock__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "TairarrayB" defined at coursework.ads:9, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Coursework__airlock__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Coursework__airlock

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Coursework__airlock.component_type, 
 type map = Array__Int__Coursework__airlock.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Coursework__airlock.get

end

(* Module for axiomatizing comparison for the array theory associated to type "TairarrayB" defined at coursework.ads:9, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Coursework__airlock_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__airlock__rep
 use        Array__Int__Coursework__airlock

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Coursework__airlock.component_type, 
 function to_rep = Coursework__airlock__rep.to_rep, 
 type map = Array__Int__Coursework__airlock.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Coursework__airlock.get, 
 function bool_eq = Array__Int__Coursework__airlock.bool_eq

end

(* Module for axiomatizing type "TairarrayB" defined at coursework.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Coursework__TairarrayB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__airlock
 use        Coursework__TindexB
 use        Coursework__TindexB__rep
 use        Coursework__index
 use        Array__Int__Coursework__airlock

 type component_type =
  Coursework__airlock.airlock
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Coursework__airlock.map, 
 function array_bool_eq = Array__Int__Coursework__airlock.bool_eq, 
 type index_base_type = Coursework__TindexB.tindexB, 
 type index_rep_type = int, 
 function to_rep = Coursework__TindexB__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Coursework__TindexB.in_range, 
 predicate index_dynamic_property = Coursework__index.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tairarrayB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tairarrayB__ref =
  { mutable tairarrayB__content "model_trace:" "name:" : tairarrayB }
 
 function tairarrayB__ref___projection 
   (a : tairarrayB__ref) : tairarrayB =
  a.tairarrayB__content
 
 meta "model_projection" function tairarrayB__ref___projection
 
 meta "inline : no" function tairarrayB__ref___projection
 
 val tairarrayB__havoc 
   (x : tairarrayB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "airarray" defined at coursework.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Coursework__airarray
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__airlock
 use        Array__Int__Coursework__airlock

 type component_type =
  Coursework__airlock.airlock
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Coursework__airlock.map, 
 function array_bool_eq = Array__Int__Coursework__airlock.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "diving" defined at coursework.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Coursework__diving
 use import "_gnatprove_standard".Main
 use import "int".Int

 type diving 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = diving, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type diving__ref =
  { mutable diving__content "model_trace:" "name:" : diving }
 
 function diving__ref___projection 
   (a : diving__ref) : diving =
  a.diving__content
 
 meta "model_projection" function diving__ref___projection
 
 meta "inline : no" function diving__ref___projection
 
 val diving__havoc 
   (x : diving__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "diving" defined at coursework.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Coursework__diving__rep
 use        Coursework__diving
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Coursework__diving.diving, 
 predicate in_range = Coursework__diving.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "submarine" defined at coursework.ads:11, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Coursework__submarine__rep
 use import "_gnatprove_standard".Main
 use        Coursework__oxegen
 use        Coursework__oxegen__rep
 use        Coursework__status
 use        Coursework__status__rep
 use        Coursework__reactorheat
 use        Coursework__reactorheat__rep
 use        Coursework__airarray
 use        Coursework__diving
 use        Coursework__diving__rep
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock

 type __split_fields =
  { rec__coursework__submarine__air "model_trace:.2737" "name:air" : Array__Int__Coursework__airlock.map; rec__coursework__submarine__oxn "model_trace:.2747" "name:oxn" : Coursework__oxegen.oxegen; rec__coursework__submarine__stat "model_trace:.2757" "name:stat" : Coursework__status.status; rec__coursework__submarine__reac "model_trace:.2767" "name:reac" : Coursework__reactorheat.reactorheat; rec__coursework__submarine__dive "model_trace:.2777" "name:dive" : Coursework__diving.diving }
 
 function __split_fields_air__projection "model_trace:.2737" "name:air" 
   (a : __split_fields) : Array__Int__Coursework__airlock.map =
  a.rec__coursework__submarine__air
 
 meta "model_projection" function __split_fields_air__projection
 
 meta "inline : no" function __split_fields_air__projection
 
 function __split_fields_oxn__projection "model_trace:.2747" "name:oxn" 
   (a : __split_fields) : Coursework__oxegen.oxegen =
  a.rec__coursework__submarine__oxn
 
 meta "model_projection" function __split_fields_oxn__projection
 
 meta "inline : no" function __split_fields_oxn__projection
 
 function __split_fields_stat__projection "model_trace:.2757" "name:stat" 
   (a : __split_fields) : Coursework__status.status =
  a.rec__coursework__submarine__stat
 
 meta "model_projection" function __split_fields_stat__projection
 
 meta "inline : no" function __split_fields_stat__projection
 
 function __split_fields_reac__projection "model_trace:.2767" "name:reac" 
   (a : __split_fields) : Coursework__reactorheat.reactorheat =
  a.rec__coursework__submarine__reac
 
 meta "model_projection" function __split_fields_reac__projection
 
 meta "inline : no" function __split_fields_reac__projection
 
 function __split_fields_dive__projection "model_trace:.2777" "name:dive" 
   (a : __split_fields) : Coursework__diving.diving =
  a.rec__coursework__submarine__dive
 
 meta "model_projection" function __split_fields_dive__projection
 
 meta "inline : no" function __split_fields_dive__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content "model_trace:" "name:" : __split_fields }
 
 function __split_fields__ref___projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___projection
 
 meta "inline : no" function __split_fields__ref___projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields "model_trace:" "name:" : __split_fields }
 
 function __rep___projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___projection
 
 meta "inline : no" function __rep___projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a
 
 predicate coursework__submarine__air__pred 
   (a : __rep)  =
  true
 
 val rec__coursework__submarine__air_ 
   (a : __rep) : Array__Int__Coursework__airlock.map
  requires {  (coursework__submarine__air__pred a) }
  ensures {  (result = a.__split_fields.rec__coursework__submarine__air) }
 
 predicate coursework__submarine__oxn__pred 
   (a : __rep)  =
  true
 
 val rec__coursework__submarine__oxn_ 
   (a : __rep) : Coursework__oxegen.oxegen
  requires {  (coursework__submarine__oxn__pred a) }
  ensures {  (result = a.__split_fields.rec__coursework__submarine__oxn) }
 
 predicate coursework__submarine__stat__pred 
   (a : __rep)  =
  true
 
 val rec__coursework__submarine__stat_ 
   (a : __rep) : Coursework__status.status
  requires {  (coursework__submarine__stat__pred a) }
  ensures {  (result = a.__split_fields.rec__coursework__submarine__stat) }
 
 predicate coursework__submarine__reac__pred 
   (a : __rep)  =
  true
 
 val rec__coursework__submarine__reac_ 
   (a : __rep) : Coursework__reactorheat.reactorheat
  requires {  (coursework__submarine__reac__pred a) }
  ensures {  (result = a.__split_fields.rec__coursework__submarine__reac) }
 
 predicate coursework__submarine__dive__pred 
   (a : __rep)  =
  true
 
 val rec__coursework__submarine__dive_ 
   (a : __rep) : Coursework__diving.diving
  requires {  (coursework__submarine__dive__pred a) }
  ensures {  (result = a.__split_fields.rec__coursework__submarine__dive) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ( ( ( ((Coursework__airarray.bool_eq a.__split_fields.rec__coursework__submarine__air b.__split_fields.rec__coursework__submarine__air) = True) /\ ((Coursework__oxegen__rep.to_rep a.__split_fields.rec__coursework__submarine__oxn) = (Coursework__oxegen__rep.to_rep b.__split_fields.rec__coursework__submarine__oxn)) ) /\ ((Coursework__status__rep.to_rep a.__split_fields.rec__coursework__submarine__stat) = (Coursework__status__rep.to_rep b.__split_fields.rec__coursework__submarine__stat)) ) /\ ((Coursework__reactorheat__rep.to_rep a.__split_fields.rec__coursework__submarine__reac) = (Coursework__reactorheat__rep.to_rep b.__split_fields.rec__coursework__submarine__reac)) ) /\ ((Coursework__diving__rep.to_rep a.__split_fields.rec__coursework__submarine__dive) = (Coursework__diving__rep.to_rep b.__split_fields.rec__coursework__submarine__dive)) )) then (
   True) else (
   False))

end

(* Module for axiomatizing type "submarine" defined at coursework.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Coursework__submarine
 use export Coursework__submarine__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type submarine =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   (a : submarine) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : submarine) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : submarine.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : submarine.
   ((object__alignment a) >= 0))
 
 function coursework__submarine__air__first__bit 
   : int
 
 function coursework__submarine__air__last__bit 
   : int
 
 function coursework__submarine__air__position 
   : int
 
 axiom coursework__submarine__air__first__bit_axiom :
  ((coursework__submarine__air__first__bit ) >= 0)
 
 axiom coursework__submarine__air__last__bit_axiom :
  ((coursework__submarine__air__last__bit ) > (coursework__submarine__air__first__bit ))
 
 axiom coursework__submarine__air__position_axiom :
  ((coursework__submarine__air__position ) >= 0)
 
 function coursework__submarine__oxn__first__bit 
   : int
 
 function coursework__submarine__oxn__last__bit 
   : int
 
 function coursework__submarine__oxn__position 
   : int
 
 axiom coursework__submarine__oxn__first__bit_axiom :
  ((coursework__submarine__oxn__first__bit ) >= 0)
 
 axiom coursework__submarine__oxn__last__bit_axiom :
  ((coursework__submarine__oxn__last__bit ) > (coursework__submarine__oxn__first__bit ))
 
 axiom coursework__submarine__oxn__position_axiom :
  ((coursework__submarine__oxn__position ) >= 0)
 
 function coursework__submarine__stat__first__bit 
   : int
 
 function coursework__submarine__stat__last__bit 
   : int
 
 function coursework__submarine__stat__position 
   : int
 
 axiom coursework__submarine__stat__first__bit_axiom :
  ((coursework__submarine__stat__first__bit ) >= 0)
 
 axiom coursework__submarine__stat__last__bit_axiom :
  ((coursework__submarine__stat__last__bit ) > (coursework__submarine__stat__first__bit ))
 
 axiom coursework__submarine__stat__position_axiom :
  ((coursework__submarine__stat__position ) >= 0)
 
 function coursework__submarine__reac__first__bit 
   : int
 
 function coursework__submarine__reac__last__bit 
   : int
 
 function coursework__submarine__reac__position 
   : int
 
 axiom coursework__submarine__reac__first__bit_axiom :
  ((coursework__submarine__reac__first__bit ) >= 0)
 
 axiom coursework__submarine__reac__last__bit_axiom :
  ((coursework__submarine__reac__last__bit ) > (coursework__submarine__reac__first__bit ))
 
 axiom coursework__submarine__reac__position_axiom :
  ((coursework__submarine__reac__position ) >= 0)
 
 function coursework__submarine__dive__first__bit 
   : int
 
 function coursework__submarine__dive__last__bit 
   : int
 
 function coursework__submarine__dive__position 
   : int
 
 axiom coursework__submarine__dive__first__bit_axiom :
  ((coursework__submarine__dive__first__bit ) >= 0)
 
 axiom coursework__submarine__dive__last__bit_axiom :
  ((coursework__submarine__dive__last__bit ) > (coursework__submarine__dive__first__bit ))
 
 axiom coursework__submarine__dive__position_axiom :
  ((coursework__submarine__dive__position ) >= 0)
 
 function user_eq 
   (a : submarine) (b : submarine) : bool
 
 function dummy 
   : submarine
 
 type submarine__ref =
  { mutable submarine__content "model_trace:" "name:" : submarine }
 
 function submarine__ref___projection 
   (a : submarine__ref) : submarine =
  a.submarine__content
 
 meta "model_projection" function submarine__ref___projection
 
 meta "inline : no" function submarine__ref___projection
 
 val submarine__havoc 
   (x : submarine__ref) : unit
  writes {x}

end

(* Module for axiomatizing the record theory associated to type "acionpermitted" defined at coursework.ads:19, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Coursework__acionpermitted__rep
 use import "_gnatprove_standard".Main
 use        Coursework__opertationallowed
 use        Coursework__opertationallowed__rep
 use        Coursework__airarray
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock

 type __split_fields =
  { rec__coursework__acionpermitted__airlocksa "model_trace:.2799" "name:airlocksA" : Array__Int__Coursework__airlock.map; rec__coursework__acionpermitted__allowed "model_trace:.2809" "name:allowed" : Coursework__opertationallowed.opertationallowed }
 
 function __split_fields_airlocksA__projection "model_trace:.2799" "name:airlocksA" 
   (a : __split_fields) : Array__Int__Coursework__airlock.map =
  a.rec__coursework__acionpermitted__airlocksa
 
 meta "model_projection" function __split_fields_airlocksA__projection
 
 meta "inline : no" function __split_fields_airlocksA__projection
 
 function __split_fields_allowed__projection "model_trace:.2809" "name:allowed" 
   (a : __split_fields) : Coursework__opertationallowed.opertationallowed =
  a.rec__coursework__acionpermitted__allowed
 
 meta "model_projection" function __split_fields_allowed__projection
 
 meta "inline : no" function __split_fields_allowed__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content "model_trace:" "name:" : __split_fields }
 
 function __split_fields__ref___2__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___2__projection
 
 meta "inline : no" function __split_fields__ref___2__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields "model_trace:" "name:" : __split_fields }
 
 function __rep___2__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___2__projection
 
 meta "inline : no" function __rep___2__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a
 
 predicate coursework__acionpermitted__airlocksa__pred 
   (a : __rep)  =
  true
 
 val rec__coursework__acionpermitted__airlocksa_ 
   (a : __rep) : Array__Int__Coursework__airlock.map
  requires {  (coursework__acionpermitted__airlocksa__pred a) }
  ensures {  (result = a.__split_fields.rec__coursework__acionpermitted__airlocksa) }
 
 predicate coursework__acionpermitted__allowed__pred 
   (a : __rep)  =
  true
 
 val rec__coursework__acionpermitted__allowed_ 
   (a : __rep) : Coursework__opertationallowed.opertationallowed
  requires {  (coursework__acionpermitted__allowed__pred a) }
  ensures {  (result = a.__split_fields.rec__coursework__acionpermitted__allowed) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Coursework__airarray.bool_eq a.__split_fields.rec__coursework__acionpermitted__airlocksa b.__split_fields.rec__coursework__acionpermitted__airlocksa) = True) /\ ((Coursework__opertationallowed__rep.to_rep a.__split_fields.rec__coursework__acionpermitted__allowed) = (Coursework__opertationallowed__rep.to_rep b.__split_fields.rec__coursework__acionpermitted__allowed)) )) then (
   True) else (
   False))

end

(* Module for axiomatizing type "acionpermitted" defined at coursework.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Coursework__acionpermitted
 use export Coursework__acionpermitted__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type acionpermitted =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   (a : acionpermitted) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : acionpermitted) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : acionpermitted.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : acionpermitted.
   ((object__alignment a) >= 0))
 
 function coursework__acionpermitted__airlocksa__first__bit 
   : int
 
 function coursework__acionpermitted__airlocksa__last__bit 
   : int
 
 function coursework__acionpermitted__airlocksa__position 
   : int
 
 axiom coursework__acionpermitted__airlocksa__first__bit_axiom :
  ((coursework__acionpermitted__airlocksa__first__bit ) >= 0)
 
 axiom coursework__acionpermitted__airlocksa__last__bit_axiom :
  ((coursework__acionpermitted__airlocksa__last__bit ) > (coursework__acionpermitted__airlocksa__first__bit ))
 
 axiom coursework__acionpermitted__airlocksa__position_axiom :
  ((coursework__acionpermitted__airlocksa__position ) >= 0)
 
 function coursework__acionpermitted__allowed__first__bit 
   : int
 
 function coursework__acionpermitted__allowed__last__bit 
   : int
 
 function coursework__acionpermitted__allowed__position 
   : int
 
 axiom coursework__acionpermitted__allowed__first__bit_axiom :
  ((coursework__acionpermitted__allowed__first__bit ) >= 0)
 
 axiom coursework__acionpermitted__allowed__last__bit_axiom :
  ((coursework__acionpermitted__allowed__last__bit ) > (coursework__acionpermitted__allowed__first__bit ))
 
 axiom coursework__acionpermitted__allowed__position_axiom :
  ((coursework__acionpermitted__allowed__position ) >= 0)
 
 function user_eq 
   (a : acionpermitted) (b : acionpermitted) : bool
 
 function dummy 
   : acionpermitted
 
 type acionpermitted__ref =
  { mutable acionpermitted__content "model_trace:" "name:" : acionpermitted }
 
 function acionpermitted__ref___projection 
   (a : acionpermitted__ref) : acionpermitted =
  a.acionpermitted__content
 
 meta "model_projection" function acionpermitted__ref___projection
 
 meta "inline : no" function acionpermitted__ref___projection
 
 val acionpermitted__havoc 
   (x : acionpermitted__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T3s" defined at coursework.ads:24, created in Gnat2Why.Types.Translate_Type *)
module Coursework__T3s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t3s =
  < range 1 2 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t3s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t3s__ref =
  { mutable t3s__content "model_trace:" "name:" : t3s }
 
 function t3s__ref___projection 
   (a : t3s__ref) : t3s =
  a.t3s__content
 
 meta "model_projection" function t3s__ref___projection
 
 meta "inline : no" function t3s__ref___projection
 
 val t3s__havoc 
   (x : t3s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T3s" defined at coursework.ads:24, created in Gnat2Why.Types.Translate_Type *)
module Coursework__T3s__rep
 use        Coursework__T3s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Coursework__T3s.t3s) : int =
  (Coursework__T3s.t3s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Coursework__T3s.t3s, 
 predicate in_range = Coursework__T3s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T4s" defined at coursework.ads:24, created in Gnat2Why.Types.Translate_Type *)
module Coursework__T4s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__airlock
 use        Array__Int__Coursework__airlock

 type component_type =
  Coursework__airlock.airlock
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Coursework__airlock.map, 
 function array_bool_eq = Array__Int__Coursework__airlock.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end
(* Module for defining a ref holding the value of variable "airlocks" defined at coursework.ads:24, created in Gnat2Why.Decls.Translate_Variable *)
module Coursework__airlocks
 use import "_gnatprove_standard".Main
 use        Coursework__acionpermitted

 val airlocks__split_fields #"coursework.ads" 24 0 0#"model_projected" "model_trace:2821" "name:airlocks"  : Coursework__acionpermitted.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "airlocks" defined at coursework.ads:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Coursework__airlocks___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "sub" defined at coursework.ads:26, created in Gnat2Why.Decls.Translate_Variable *)
module Coursework__sub
 use import "_gnatprove_standard".Main
 use        Coursework__submarine

 val sub__split_fields #"coursework.ads" 26 0 0#"model_projected" "model_trace:2839" "name:sub"  : Coursework__submarine.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "sub" defined at coursework.ads:26, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Coursework__sub___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool)  =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool)  =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool)  =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool)  =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant "inline" 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool)  =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool)  =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant "inline" 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool)  =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant "inline" 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool)  =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant "inline" 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool)  =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool)  =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool)  =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool)  =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool)  =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool)  =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool)  =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant "inline" 
   (temp___expr_116 : Standard__duration.duration) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_117 : Standard__duration.duration) (temp___skip_top_level_118 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool)  =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool)  =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool)  =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool)  =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool)  =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool)  =
  true

end

(* Module for possibly declaring a logic function for "submergesub" defined at coursework.ads:30, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Coursework__submergesub
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "openairlock" defined at coursework.ads:35, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Coursework__openairlock
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "surfacesub" defined at coursework.ads:40, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Coursework__surfacesub
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "checkoxg" defined at coursework.ads:45, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Coursework__checkoxg
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "checkreactor" defined at coursework.ads:49, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Coursework__checkreactor
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "divesub" defined at coursework.ads:54, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Coursework__divesub
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "closeairlock" defined at coursework.ads:59, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Coursework__closeairlock
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "airlock" defined at coursework.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__airlock___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__airlock

 predicate dynamic_invariant "inline" 
   (temp___expr_159 : int) (temp___is_init_155 : bool) (temp___skip_constant_156 : bool) (temp___do_toplevel_157 : bool) (temp___do_typ_inv_158 : bool)  =
  (if (( temp___is_init_155 \/ (Coursework__airlock.first <= Coursework__airlock.last) )) then (
   (Coursework__airlock.dynamic_property Coursework__airlock.first Coursework__airlock.last temp___expr_159)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_160 : int) (temp___skip_top_level_161 : bool)  =
  true

end

(* Module giving axioms for type "oxegen" defined at coursework.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__oxegen___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__oxegen

 predicate dynamic_invariant "inline" 
   (temp___expr_166 : int) (temp___is_init_162 : bool) (temp___skip_constant_163 : bool) (temp___do_toplevel_164 : bool) (temp___do_typ_inv_165 : bool)  =
  (if (( temp___is_init_162 \/ (Coursework__oxegen.first <= Coursework__oxegen.last) )) then (
   (Coursework__oxegen.dynamic_property Coursework__oxegen.first Coursework__oxegen.last temp___expr_166)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_167 : int) (temp___skip_top_level_168 : bool)  =
  true

end

(* Module giving axioms for type "status" defined at coursework.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__status___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__status

 predicate dynamic_invariant "inline" 
   (temp___expr_173 : int) (temp___is_init_169 : bool) (temp___skip_constant_170 : bool) (temp___do_toplevel_171 : bool) (temp___do_typ_inv_172 : bool)  =
  (if (( temp___is_init_169 \/ (Coursework__status.first <= Coursework__status.last) )) then (
   (Coursework__status.dynamic_property Coursework__status.first Coursework__status.last temp___expr_173)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_174 : int) (temp___skip_top_level_175 : bool)  =
  true

end

(* Module giving axioms for type "opertationallowed" defined at coursework.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__opertationallowed___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__opertationallowed

 predicate dynamic_invariant "inline" 
   (temp___expr_180 : int) (temp___is_init_176 : bool) (temp___skip_constant_177 : bool) (temp___do_toplevel_178 : bool) (temp___do_typ_inv_179 : bool)  =
  (if (( temp___is_init_176 \/ (Coursework__opertationallowed.first <= Coursework__opertationallowed.last) )) then (
   (Coursework__opertationallowed.dynamic_property Coursework__opertationallowed.first Coursework__opertationallowed.last temp___expr_180)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_181 : int) (temp___skip_top_level_182 : bool)  =
  true

end

(* Module giving axioms for type "reactorheat" defined at coursework.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__reactorheat___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__reactorheat

 predicate dynamic_invariant "inline" 
   (temp___expr_187 : int) (temp___is_init_183 : bool) (temp___skip_constant_184 : bool) (temp___do_toplevel_185 : bool) (temp___do_typ_inv_186 : bool)  =
  (if (( temp___is_init_183 \/ (Coursework__reactorheat.first <= Coursework__reactorheat.last) )) then (
   (Coursework__reactorheat.dynamic_property Coursework__reactorheat.first Coursework__reactorheat.last temp___expr_187)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_188 : int) (temp___skip_top_level_189 : bool)  =
  true

end

(* Module giving axioms for type "TindexB" defined at coursework.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__TindexB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "index" defined at coursework.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__index___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__index

 predicate dynamic_invariant "inline" 
   (temp___expr_194 : int) (temp___is_init_190 : bool) (temp___skip_constant_191 : bool) (temp___do_toplevel_192 : bool) (temp___do_typ_inv_193 : bool)  =
  (if (( temp___is_init_190 \/ (Coursework__index.first <= Coursework__index.last) )) then (
   (Coursework__index.dynamic_property Coursework__index.first Coursework__index.last temp___expr_194)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_195 : int) (temp___skip_top_level_196 : bool)  =
  true

end

(* Module giving axioms for type "TairarrayB" defined at coursework.ads:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__TairarrayB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "airarray" defined at coursework.ads:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__airarray___axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock

 predicate dynamic_invariant "inline" 
   (temp___expr_201 : Array__Int__Coursework__airlock.map) (temp___is_init_197 : bool) (temp___skip_constant_198 : bool) (temp___do_toplevel_199 : bool) (temp___do_typ_inv_200 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_203 : Array__Int__Coursework__airlock.map) (temp___skip_top_level_204 : bool)  =
  true

end

(* Module giving axioms for type "diving" defined at coursework.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__diving___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__diving

 predicate dynamic_invariant "inline" 
   (temp___expr_211 : int) (temp___is_init_207 : bool) (temp___skip_constant_208 : bool) (temp___do_toplevel_209 : bool) (temp___do_typ_inv_210 : bool)  =
  (if (( temp___is_init_207 \/ (Coursework__diving.first <= Coursework__diving.last) )) then (
   (Coursework__diving.dynamic_property Coursework__diving.first Coursework__diving.last temp___expr_211)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_212 : int) (temp___skip_top_level_213 : bool)  =
  true

end

(* Module giving axioms for type "submarine" defined at coursework.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__submarine___axiom
 use import "_gnatprove_standard".Main
 use        Coursework__submarine

 predicate dynamic_invariant "inline" 
   (temp___expr_218 : Coursework__submarine.submarine) (temp___is_init_214 : bool) (temp___skip_constant_215 : bool) (temp___do_toplevel_216 : bool) (temp___do_typ_inv_217 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_220 : Coursework__submarine.submarine) (temp___skip_top_level_221 : bool)  =
  true

end

(* Module giving axioms for type "acionpermitted" defined at coursework.ads:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__acionpermitted___axiom
 use import "_gnatprove_standard".Main
 use        Coursework__acionpermitted

 predicate dynamic_invariant "inline" 
   (temp___expr_233 : Coursework__acionpermitted.acionpermitted) (temp___is_init_229 : bool) (temp___skip_constant_230 : bool) (temp___do_toplevel_231 : bool) (temp___do_typ_inv_232 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_235 : Coursework__acionpermitted.acionpermitted) (temp___skip_top_level_236 : bool)  =
  true

end

(* Module giving axioms for type "T3s" defined at coursework.ads:24, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__T3s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T4s" defined at coursework.ads:24, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__T4s___axiom
 use import "_gnatprove_standard".Main


end

(* Module for declaring an abstract function for the aggregate at coursework.ads:24, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_275
 use import "_gnatprove_standard".Main
 use        Array__Int__Coursework__airlock

 function temp_____aggregate_def_275 
   (temp___277 : int) (temp___278 : int) : Array__Int__Coursework__airlock.map

end
(* Module for declaring a program function (and possibly an axiom) for "submergesub" defined at coursework.ads:30, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Coursework__submergesub___axiom
 use        Coursework__airlocks
 use        Coursework__sub
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__oxegen
 use        Coursework__oxegen__rep
 use        Coursework__opertationallowed
 use        Coursework__opertationallowed__rep
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__acionpermitted
 use        Coursework__airlocks
 use        Coursework__sub

 val submergesub 
   (__void_param : unit) : unit
  requires {  ( ((Coursework__opertationallowed__rep.to_rep (Coursework__acionpermitted.rec__coursework__acionpermitted__allowed (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content }))) = 0) /\ ((Coursework__oxegen__rep.to_rep (Coursework__submarine.rec__coursework__submarine__oxn (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) ) }
  ensures {  ( ((Coursework__oxegen__rep.to_rep (Coursework__submarine.rec__coursework__submarine__oxn (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) /\ (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True True True True) ) }
  reads {Coursework__airlocks.airlocks__split_fields, Coursework__sub.sub__split_fields}
  writes {Coursework__sub.sub__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "openairlock" defined at coursework.ads:35, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Coursework__openairlock___axiom
 use        Coursework__airlocks
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Array__Int__Coursework__airlock
 use        Coursework__acionpermitted
 use        Coursework__acionpermitted___axiom
 use        Coursework__airlocks
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock

 val openairlock 
   (__void_param : unit) : unit
  requires {  ( ((Coursework__airlock__rep.to_rep (let temp___245 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___245 1)))
  ) = 1) /\ ((Coursework__airlock__rep.to_rep (let temp___244 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___244 2)))
  ) = 1) ) }
  ensures {  ( ( ((Coursework__airlock__rep.to_rep (let temp___246 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___246 1)))
  ) = 1) \/ ((Coursework__airlock__rep.to_rep (let temp___247 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___247 2)))
  ) = 1) ) /\ (Coursework__acionpermitted___axiom.dynamic_invariant { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content } True True True True) ) }
  reads {Coursework__airlocks.airlocks__split_fields}
  writes {Coursework__airlocks.airlocks__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "surfacesub" defined at coursework.ads:40, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Coursework__surfacesub___axiom
 use        Coursework__airlocks
 use        Coursework__sub
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Coursework__status
 use        Coursework__status__rep
 use        Array__Int__Coursework__airlock
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__acionpermitted
 use        Coursework__airlocks
 use        Coursework__sub
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock

 val surfacesub 
   (__void_param : unit) : unit
  requires {  ( ((Coursework__status__rep.to_rep (Coursework__submarine.rec__coursework__submarine__stat (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) /\ ( ((Coursework__airlock__rep.to_rep (let temp___251 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___251 1)))
  ) = 1) /\ ((Coursework__airlock__rep.to_rep (let temp___250 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___250 2)))
  ) = 1) ) ) }
  ensures {  ( ( ((Coursework__status__rep.to_rep (Coursework__submarine.rec__coursework__submarine__stat (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 1) /\ ( ((Coursework__airlock__rep.to_rep (let temp___253 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___253 1)))
  ) = 1) /\ ((Coursework__airlock__rep.to_rep (let temp___252 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___252 2)))
  ) = 1) ) ) /\ (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True True True True) ) }
  reads {Coursework__airlocks.airlocks__split_fields, Coursework__sub.sub__split_fields}
  writes {Coursework__sub.sub__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "checkoxg" defined at coursework.ads:45, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Coursework__checkoxg___axiom
 use        Coursework__airlocks
 use        Coursework__sub
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Array__Int__Coursework__airlock
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__acionpermitted
 use        Coursework__airlocks
 use        Coursework__sub
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock

 val checkoxg 
   (__void_param : unit) : unit
  requires {  ( ((Coursework__airlock__rep.to_rep (let temp___258 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___258 1)))
  ) = 1) /\ ((Coursework__airlock__rep.to_rep (let temp___257 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___257 2)))
  ) = 1) ) }
  ensures {  (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True True True True) }
  reads {Coursework__airlocks.airlocks__split_fields, Coursework__sub.sub__split_fields}
  writes {Coursework__sub.sub__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "checkreactor" defined at coursework.ads:49, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Coursework__checkreactor___axiom
 use        Coursework__airlocks
 use        Coursework__sub
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Coursework__status
 use        Coursework__status__rep
 use        Array__Int__Coursework__airlock
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__acionpermitted
 use        Coursework__airlocks
 use        Coursework__sub
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock

 val checkreactor 
   (__void_param : unit) : unit
  requires {  ( ((Coursework__status__rep.to_rep (Coursework__submarine.rec__coursework__submarine__stat (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) /\ ( ((Coursework__airlock__rep.to_rep (let temp___263 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___263 1)))
  ) = 1) /\ ((Coursework__airlock__rep.to_rep (let temp___262 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___262 2)))
  ) = 1) ) ) }
  ensures {  (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True True True True) }
  reads {Coursework__airlocks.airlocks__split_fields, Coursework__sub.sub__split_fields}
  writes {Coursework__sub.sub__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "divesub" defined at coursework.ads:54, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Coursework__divesub___axiom
 use        Coursework__airlocks
 use        Coursework__sub
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__oxegen
 use        Coursework__oxegen__rep
 use        Coursework__status
 use        Coursework__status__rep
 use        Coursework__opertationallowed
 use        Coursework__opertationallowed__rep
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__acionpermitted
 use        Coursework__airlocks
 use        Coursework__sub

 val divesub 
   (__void_param : unit) : unit
  requires {  ( ((Coursework__status__rep.to_rep (Coursework__submarine.rec__coursework__submarine__stat (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) /\ ( ((Coursework__oxegen__rep.to_rep (Coursework__submarine.rec__coursework__submarine__oxn (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) /\ ((Coursework__opertationallowed__rep.to_rep (Coursework__acionpermitted.rec__coursework__acionpermitted__allowed (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content }))) = 0) ) ) }
  ensures {  ( ((Coursework__status__rep.to_rep (Coursework__submarine.rec__coursework__submarine__stat (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) /\ (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True True True True) ) }
  reads {Coursework__airlocks.airlocks__split_fields, Coursework__sub.sub__split_fields}
  writes {Coursework__sub.sub__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "closeairlock" defined at coursework.ads:59, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Coursework__closeairlock___axiom
 use        Coursework__airlocks
 use        Coursework__sub
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__status
 use        Coursework__status__rep
 use        Coursework__submarine
 use        Coursework__acionpermitted
 use        Coursework__acionpermitted___axiom
 use        Coursework__airlocks
 use        Coursework__sub

 val closeairlock 
   (__void_param : unit) : unit
  requires {  ((Coursework__status__rep.to_rep (Coursework__submarine.rec__coursework__submarine__stat (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) }
  ensures {  (Coursework__acionpermitted___axiom.dynamic_invariant { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content } True True True True) }
  reads {Coursework__airlocks.airlocks__split_fields, Coursework__sub.sub__split_fields}
  writes {Coursework__airlocks.airlocks__split_fields}

end

(* Module for defining the value of the aggregate at coursework.ads:24, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_275___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__airlock
 use        Coursework__airlock___axiom
 use        Coursework__airlock__rep
 use        Array__Int__Coursework__airlock
 use        Temp_____aggregate_def_275
 use        Array__Int__Coursework__airlock

 axiom def_axiom :
  (forall temp___277   temp___278   : int.
   (let temp___276 = (Temp_____aggregate_def_275.temp_____aggregate_def_275 temp___277 temp___278) in (
    (if (( (Coursework__airlock___axiom.dynamic_invariant temp___277 True True True True) /\ (Coursework__airlock___axiom.dynamic_invariant temp___278 True True True True) )) then (
     ( ((Coursework__airlock__rep.to_rep (Array__Int__Coursework__airlock.get temp___276 1)) = temp___277) /\ ((Coursework__airlock__rep.to_rep (Array__Int__Coursework__airlock.get temp___276 2)) = temp___278) )) else true)))
  )

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "coursework" defined at coursework.ads:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Coursework__package_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__oxegen
 use        Coursework__oxegen__rep
 use        Coursework__status
 use        Coursework__status__rep
 use        Coursework__opertationallowed
 use        Coursework__opertationallowed__rep
 use        Coursework__reactorheat
 use        Coursework__reactorheat__rep
 use        Coursework__diving
 use        Coursework__diving__rep
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__acionpermitted
 use        Coursework__acionpermitted___axiom
 use        Coursework__airlocks
 use        Coursework__sub
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Temp_____aggregate_def_275
 use        Array__Int__Coursework__airlock
 use        Coursework__airlock___axiom
 use        Coursework__oxegen___axiom
 use        Coursework__status___axiom
 use        Coursework__opertationallowed___axiom
 use        Coursework__reactorheat___axiom
 use        Coursework__airarray___axiom
 use        Coursework__diving___axiom
 use        Coursework__submarine___axiom
 use        Coursework__acionpermitted___axiom
 use        Coursework__airlocks___axiom
 use        Coursework__sub___axiom
 use        Temp_____aggregate_def_275___axiom

 let def #"coursework.ads" 1 0 0#"GP_Subp:coursework.ads:1" "W:diverges:N" 
   (__void_param : unit)
  requires { #"coursework.ads" 1 0 0# true }
  ensures { #"coursework.ads" 1 0 0# true }
   =
  ( (#"coursework.ads" 1 0 0# ());
  (#"coursework.ads" 3 0 0# ());
  (#"coursework.ads" 4 0 0# ());
  (#"coursework.ads" 5 0 0# ());
  (#"coursework.ads" 6 0 0# ());
  (#"coursework.ads" 7 0 0# ());
  (#"coursework.ads" 8 0 0# ());
  (#"coursework.ads" 9 0 0# ());
  (#"coursework.ads" 10 0 0# ());
  (#"coursework.ads" 11 0 0# ());
  (#"coursework.ads" 19 0 0# ());
  (#"coursework.ads" 24 0 0# ());
  (#"coursework.ads" 24 0 0# ());
  (#"coursework.ads" 24 0 0# ());
  (#"coursework.ads" 24 0 0# ());
  (#"coursework.ads" 24 0 0# ());
  (#"coursework.ads" 24 0 0# ());
  (#"coursework.ads" 24 0 0# ());
  (#"coursework.ads" 24 0 0# ( (let coursework__airlocks__assume = { Coursework__acionpermitted.__split_fields = { Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa = (Temp_____aggregate_def_275.temp_____aggregate_def_275(1) (1)); Coursework__acionpermitted.rec__coursework__acionpermitted__allowed = (Coursework__opertationallowed__rep.of_rep(1)) } } in (
   #"coursework.ads" 24 0 0# Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content <- ( (Coursework__acionpermitted.__split_fields(coursework__airlocks__assume)) )))
  ;
  #"coursework.ads" 24 0 0# assume { #"coursework.ads" 24 0 0# (Coursework__acionpermitted___axiom.dynamic_invariant { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content } True False True True) } ));
  (#"coursework.ads" 26 0 0# ());
  (#"coursework.ads" 26 0 0# ());
  (#"coursework.ads" 26 0 0# ());
  (#"coursework.ads" 26 0 0# ());
  (#"coursework.ads" 26 0 0# ());
  (#"coursework.ads" 26 0 0# ());
  (#"coursework.ads" 26 0 0# ( (let coursework__sub__assume = { Coursework__submarine.__split_fields = { Coursework__submarine.rec__coursework__submarine__air = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa((Coursework__acionpermitted.__split_fields({ Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })))); Coursework__submarine.rec__coursework__submarine__oxn = (Coursework__oxegen__rep.of_rep(0)); Coursework__submarine.rec__coursework__submarine__stat = (Coursework__status__rep.of_rep(1)); Coursework__submarine.rec__coursework__submarine__reac = (Coursework__reactorheat__rep.of_rep(0)); Coursework__submarine.rec__coursework__submarine__dive = (Coursework__diving__rep.of_rep(1)) } } in (
   #"coursework.ads" 26 0 0# Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content <- ( (Coursework__submarine.__split_fields(coursework__sub__assume)) )))
  ;
  #"coursework.ads" 26 0 0# assume { #"coursework.ads" 26 0 0# (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True False True True) } ));
  (#"coursework.ads" 30 0 0# ());
  (#"coursework.ads" 33 0 0# ());
  (#"coursework.ads" 32 0 0# ());
  (#"coursework.ads" 31 0 0# ());
  (#"coursework.ads" 35 0 0# ());
  (#"coursework.ads" 38 0 0# ());
  (#"coursework.ads" 37 0 0# ());
  (#"coursework.ads" 37 0 0# ());
  (#"coursework.ads" 36 0 0# ());
  (#"coursework.ads" 40 0 0# ());
  (#"coursework.ads" 43 0 0# ());
  (#"coursework.ads" 43 0 0# ());
  (#"coursework.ads" 43 0 0# ());
  (#"coursework.ads" 42 0 0# ());
  (#"coursework.ads" 42 0 0# ());
  (#"coursework.ads" 42 0 0# ());
  (#"coursework.ads" 41 0 0# ());
  (#"coursework.ads" 45 0 0# ());
  (#"coursework.ads" 47 0 0# ());
  (#"coursework.ads" 47 0 0# ());
  (#"coursework.ads" 46 0 0# ());
  (#"coursework.ads" 49 0 0# ());
  (#"coursework.ads" 51 0 0# ());
  (#"coursework.ads" 51 0 0# ());
  (#"coursework.ads" 51 0 0# ());
  (#"coursework.ads" 50 0 0# ());
  (#"coursework.ads" 54 0 0# ());
  (#"coursework.ads" 57 0 0# ());
  (#"coursework.ads" 56 0 0# ());
  (#"coursework.ads" 56 0 0# ());
  (#"coursework.ads" 56 0 0# ());
  (#"coursework.ads" 55 0 0# ());
  (#"coursework.ads" 59 0 0# ());
  (#"coursework.ads" 61 0 0# ());
  (#"coursework.ads" 60 0 0# ());
  (#"coursework.adb" 1 0 0# ());
  (#"coursework.adb" 3 0 0# ());
  (#"coursework.adb" 12 0 0# ());
  (#"coursework.adb" 20 0 0# ());
  (#"coursework.adb" 28 0 0# ());
  (#"coursework.adb" 37 0 0# ());
  (#"coursework.adb" 45 0 0# ());
  (#"coursework.adb" 54 0 0# ());
  ( "GP_Sloc:coursework.adb:61:1" (#"coursework.adb" 61 0 0# ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "submergesub" defined at coursework.ads:30, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Coursework__submergesub__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Coursework__oxegen
 use        Coursework__oxegen__rep
 use        Coursework__status
 use        Coursework__status__rep
 use        Coursework__opertationallowed
 use        Coursework__opertationallowed__rep
 use        Coursework__reactorheat
 use        Coursework__reactorheat__rep
 use        Array__Int__Coursework__airlock
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__acionpermitted
 use        Coursework__acionpermitted___axiom
 use        Coursework__airlocks
 use        Coursework__sub
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Coursework__airlock___axiom
 use        Coursework__oxegen___axiom
 use        Coursework__status___axiom
 use        Coursework__opertationallowed___axiom
 use        Coursework__reactorheat___axiom
 use        Coursework__airarray___axiom
 use        Coursework__diving___axiom
 use        Coursework__submarine___axiom
 use        Coursework__acionpermitted___axiom
 use        Coursework__airlocks___axiom
 use        Coursework__sub___axiom

 let def #"coursework.ads" 30 0 0#"W:diverges:N" "GP_Subp:coursework.ads:30" 
   (__void_param : unit)
  requires { #"coursework.ads" 30 0 0# true }
  ensures { #"coursework.ads" 30 0 0# (#"coursework.ads" 33 0 0# ( "model_vc_post" "keep_on_simp" "GP_Sloc:coursework.ads:33:15" "GP_Reason:VC_POSTCONDITION" "GP_Id:0" "comment:     Post =>  sub.oxn = Present;
              ^ coursework.ads:33:15:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" ( "GP_Pretty_Ada:3334" "GP_Sloc:coursework.ads:33:15" ((Coursework__oxegen__rep.to_rep (Coursework__submarine.rec__coursework__submarine__oxn (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram coursework.ads:30 *)
  ;
   assume {  (Coursework__acionpermitted___axiom.dynamic_invariant { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content } True False True True) };
   assume {  (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram coursework.ads:30 *)
  ;
  () (* Check for RTE in the Pre of the subprogram coursework.ads:30 *)
  ;
   abstract ensures {true}(let _ = (Boolean.andb(((Coursework__opertationallowed__rep.to_rep((Coursework__acionpermitted.rec__coursework__acionpermitted__allowed((Coursework__acionpermitted.__split_fields({ Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })))))) = 0)) (((Coursework__oxegen__rep.to_rep((Coursework__submarine.rec__coursework__submarine__oxn((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram coursework.ads:30 *)
  ;
   assume {  ( ((Coursework__opertationallowed__rep.to_rep (Coursework__acionpermitted.rec__coursework__acionpermitted__allowed (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content }))) = 0) /\ ((Coursework__oxegen__rep.to_rep (Coursework__submarine.rec__coursework__submarine__oxn (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) ) };
   try
   ( ( "GP_Sloc:coursework.adb:6:10" (#"coursework.adb" 6 0 0# ()) );
   ( "GP_Sloc:coursework.adb:6:7" (#"coursework.adb" 6 0 0# (if (( ( ( ((Coursework__airlock__rep.to_rep((let temp___282 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa((Coursework__acionpermitted.__split_fields({ Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })))) in (
    (Array__Int__Coursework__airlock.get(temp___282) (1))))
   )) = 1) && ((Coursework__airlock__rep.to_rep((let temp___283 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa((Coursework__acionpermitted.__split_fields({ Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })))) in (
    (Array__Int__Coursework__airlock.get(temp___283) (2))))
   )) = 1) ) && ((Coursework__oxegen__rep.to_rep((Coursework__submarine.rec__coursework__submarine__oxn((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) ) && ((Coursework__reactorheat__rep.to_rep((Coursework__submarine.rec__coursework__submarine__reac((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) )) then (
    ( ( "GP_Sloc:coursework.adb:7:10" (#"coursework.adb" 7 0 0# ()) );
    ( "GP_Sloc:coursework.adb:7:19" (#"coursework.adb" 7 0 0# (let temp___281 = (let temp___280 = { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } in (
     ( #"coursework.adb" 7 0 0# abstract ensures {true}(let _ = (Coursework__submarine.rec__coursework__submarine__stat((Coursework__submarine.__split_fields(temp___280)))) in (
      ()))
      end ;
     { ( temp___280 ) with Coursework__submarine.__split_fields = { ( (Coursework__submarine.__split_fields(temp___280)) ) with Coursework__submarine.rec__coursework__submarine__stat = (Coursework__status__rep.of_rep(0)) } } )))
     in (
     #"coursework.adb" 7 0 0# Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content <- ( (Coursework__submarine.__split_fields(temp___281)) )))
    ) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ((Coursework__oxegen__rep.to_rep((Coursework__submarine.rec__coursework__submarine__oxn((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "openairlock" defined at coursework.ads:35, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Coursework__openairlock__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Array__Int__Coursework__airlock
 use        Coursework__acionpermitted
 use        Coursework__acionpermitted___axiom
 use        Coursework__airlocks
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Coursework__airlock___axiom
 use        Coursework__opertationallowed___axiom
 use        Coursework__airarray___axiom
 use        Coursework__acionpermitted___axiom
 use        Coursework__airlocks___axiom

 let def #"coursework.ads" 35 0 0#"W:diverges:N" "GP_Subp:coursework.ads:35" 
   (__void_param : unit)
  requires { #"coursework.ads" 35 0 0# true }
  ensures { #"coursework.ads" 35 0 0# (#"coursework.ads" 38 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:coursework.ads:38:15" "GP_Id:1" "comment:     Post =>  airlocks.airlocksA(1) = Closed or airlocks.airlocksA(2) = Closed;
              ^ coursework.ads:38:15:VC_POSTCONDITION" "GP_Shape:pragargs__or" ( "GP_Pretty_Ada:3420" "GP_Sloc:coursework.ads:38:15" ( ((Coursework__airlock__rep.to_rep (let temp___300 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___300 1)))
  ) = 1) \/ ((Coursework__airlock__rep.to_rep (let temp___301 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___301 2)))
  ) = 1) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram coursework.ads:35 *)
  ;
   assume {  (Coursework__acionpermitted___axiom.dynamic_invariant { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram coursework.ads:35 *)
  ;
  () (* Check for RTE in the Pre of the subprogram coursework.ads:35 *)
  ;
   abstract ensures {true}(let _ = ( ((Coursework__airlock__rep.to_rep((let temp___297 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa((Coursework__acionpermitted.__split_fields({ Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___297) (1))))
  )) = 1) && ((Coursework__airlock__rep.to_rep((let temp___296 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa((Coursework__acionpermitted.__split_fields({ Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___296) (2))))
  )) = 1) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram coursework.ads:35 *)
  ;
   assume {  ( ((Coursework__airlock__rep.to_rep (let temp___299 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___299 1)))
  ) = 1) /\ ((Coursework__airlock__rep.to_rep (let temp___298 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___298 2)))
  ) = 1) ) };
   try
   ( ( "GP_Sloc:coursework.adb:15:10" (#"coursework.adb" 15 0 0# ()) );
   ( "GP_Sloc:coursework.adb:15:7" (#"coursework.adb" 15 0 0# (if (( ((Coursework__airlock__rep.to_rep((let temp___290 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa((Coursework__acionpermitted.__split_fields({ Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })))) in (
    (Array__Int__Coursework__airlock.get(temp___290) (1))))
   )) = 1) && ((Coursework__airlock__rep.to_rep((let temp___291 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa((Coursework__acionpermitted.__split_fields({ Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })))) in (
    (Array__Int__Coursework__airlock.get(temp___291) (2))))
   )) = 1) )) then (
    ( ( "GP_Sloc:coursework.adb:16:10" (#"coursework.adb" 16 0 0# ()) );
    ( "GP_Sloc:coursework.adb:16:32" (#"coursework.adb" 16 0 0# (let temp___289 = (let temp___288 = { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content } in (
     ( #"coursework.adb" 16 0 0# abstract ensures {true}(let _ = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa((Coursework__acionpermitted.__split_fields(temp___288)))) in (
      ()))
      end ;
     { ( temp___288 ) with Coursework__acionpermitted.__split_fields = { ( (Coursework__acionpermitted.__split_fields(temp___288)) ) with Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa = (let temp___287 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })) in (
      (Array__Int__Coursework__airlock.set((Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content }))) (1) ((Coursework__airlock__rep.of_rep(0))))))
      } } )))
     in (
     #"coursework.adb" 16 0 0# Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content <- ( (Coursework__acionpermitted.__split_fields(temp___289)) )))
    ) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Boolean.orb(((Coursework__airlock__rep.to_rep((let temp___293 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa((Coursework__acionpermitted.__split_fields({ Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___293) (1))))
  )) = 1)) (((Coursework__airlock__rep.to_rep((let temp___294 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa((Coursework__acionpermitted.__split_fields({ Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___294) (2))))
  )) = 1))) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "surfacesub" defined at coursework.ads:40, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Coursework__surfacesub__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Coursework__status
 use        Coursework__status__rep
 use        Array__Int__Coursework__airlock
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__acionpermitted
 use        Coursework__acionpermitted___axiom
 use        Coursework__airlocks
 use        Coursework__sub
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Coursework__airlock___axiom
 use        Coursework__oxegen___axiom
 use        Coursework__status___axiom
 use        Coursework__opertationallowed___axiom
 use        Coursework__reactorheat___axiom
 use        Coursework__airarray___axiom
 use        Coursework__diving___axiom
 use        Coursework__submarine___axiom
 use        Coursework__acionpermitted___axiom
 use        Coursework__airlocks___axiom
 use        Coursework__sub___axiom

 let def #"coursework.ads" 40 0 0#"W:diverges:N" "GP_Subp:coursework.ads:40" 
   (__void_param : unit)
  requires { #"coursework.ads" 40 0 0# true }
  ensures { #"coursework.ads" 40 0 0# (#"coursework.ads" 43 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:coursework.ads:43:14" "GP_Id:2" "comment:     Post => sub.stat = Surfaced and then airlocks.airlocksA(1) = Closed and then airlocks.airlocksA(2) = Closed;
             ^ coursework.ads:43:14:VC_POSTCONDITION" ( ( "GP_Pretty_Ada:3590" "GP_Sloc:coursework.ads:43:14" ((Coursework__status__rep.to_rep (Coursework__submarine.rec__coursework__submarine__stat (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 1) ) /\ ( ( "GP_Pretty_Ada:3017" "GP_Sloc:coursework.ads:43:65" ((Coursework__airlock__rep.to_rep (let temp___316 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___316 1)))
  ) = 1) ) /\ ( "GP_Pretty_Ada:3025" "GP_Sloc:coursework.ads:43:105" ((Coursework__airlock__rep.to_rep (let temp___315 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___315 2)))
  ) = 1) ) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram coursework.ads:40 *)
  ;
   assume {  (Coursework__acionpermitted___axiom.dynamic_invariant { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content } True False True True) };
   assume {  (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram coursework.ads:40 *)
  ;
  () (* Check for RTE in the Pre of the subprogram coursework.ads:40 *)
  ;
   abstract ensures {true}(let _ = ( ((Coursework__status__rep.to_rep((Coursework__submarine.rec__coursework__submarine__stat((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) && ( ((Coursework__airlock__rep.to_rep((let temp___312 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa((Coursework__acionpermitted.__split_fields({ Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___312) (1))))
  )) = 1) && ((Coursework__airlock__rep.to_rep((let temp___311 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa((Coursework__acionpermitted.__split_fields({ Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___311) (2))))
  )) = 1) ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram coursework.ads:40 *)
  ;
   assume {  ( ((Coursework__status__rep.to_rep (Coursework__submarine.rec__coursework__submarine__stat (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) /\ ( ((Coursework__airlock__rep.to_rep (let temp___314 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___314 1)))
  ) = 1) /\ ((Coursework__airlock__rep.to_rep (let temp___313 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___313 2)))
  ) = 1) ) ) };
   try
   ( ( "GP_Sloc:coursework.adb:23:10" (#"coursework.adb" 23 0 0# ()) );
   ( "GP_Sloc:coursework.adb:23:7" (#"coursework.adb" 23 0 0# (if (( ( ((Coursework__status__rep.to_rep((Coursework__submarine.rec__coursework__submarine__stat((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) && ((Coursework__airlock__rep.to_rep((let temp___304 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa((Coursework__acionpermitted.__split_fields({ Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })))) in (
    (Array__Int__Coursework__airlock.get(temp___304) (1))))
   )) = 1) ) && ((Coursework__airlock__rep.to_rep((let temp___305 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa((Coursework__acionpermitted.__split_fields({ Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })))) in (
    (Array__Int__Coursework__airlock.get(temp___305) (2))))
   )) = 1) )) then (
    ( ( "GP_Sloc:coursework.adb:24:10" (#"coursework.adb" 24 0 0# ()) );
    ( "GP_Sloc:coursework.adb:24:19" (#"coursework.adb" 24 0 0# (let temp___303 = (let temp___302 = { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } in (
     ( #"coursework.adb" 24 0 0# abstract ensures {true}(let _ = (Coursework__submarine.rec__coursework__submarine__stat((Coursework__submarine.__split_fields(temp___302)))) in (
      ()))
      end ;
     { ( temp___302 ) with Coursework__submarine.__split_fields = { ( (Coursework__submarine.__split_fields(temp___302)) ) with Coursework__submarine.rec__coursework__submarine__stat = (Coursework__status__rep.of_rep(1)) } } )))
     in (
     #"coursework.adb" 24 0 0# Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content <- ( (Coursework__submarine.__split_fields(temp___303)) )))
    ) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( ((Coursework__status__rep.to_rep((Coursework__submarine.rec__coursework__submarine__stat((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 1) && ( ((Coursework__airlock__rep.to_rep((let temp___308 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa((Coursework__acionpermitted.__split_fields({ Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___308) (1))))
  )) = 1) && ((Coursework__airlock__rep.to_rep((let temp___307 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa((Coursework__acionpermitted.__split_fields({ Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___307) (2))))
  )) = 1) ) ) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "checkoxg" defined at coursework.ads:45, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Coursework__checkoxg__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__surfacesub___axiom
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Coursework__oxegen
 use        Coursework__oxegen__rep
 use        Coursework__status
 use        Coursework__status__rep
 use        Array__Int__Coursework__airlock
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__acionpermitted
 use        Coursework__acionpermitted___axiom
 use        Coursework__airlocks
 use        Coursework__sub
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Coursework__airlock___axiom
 use        Coursework__oxegen___axiom
 use        Coursework__status___axiom
 use        Coursework__opertationallowed___axiom
 use        Coursework__reactorheat___axiom
 use        Coursework__airarray___axiom
 use        Coursework__diving___axiom
 use        Coursework__submarine___axiom
 use        Coursework__acionpermitted___axiom
 use        Coursework__airlocks___axiom
 use        Coursework__sub___axiom
 use        Coursework__surfacesub___axiom

 let def #"coursework.ads" 45 0 0#"W:diverges:N" "GP_Subp:coursework.ads:45" 
   (__void_param : unit)
  requires { #"coursework.ads" 45 0 0# true }
  ensures { #"coursework.ads" 45 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram coursework.ads:45 *)
  ;
  #"coursework.ads" 45 0 0# assume { #"coursework.ads" 45 0 0# (Coursework__acionpermitted___axiom.dynamic_invariant { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content } True False True True) };
  #"coursework.ads" 45 0 0# assume { #"coursework.ads" 45 0 0# (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True False True True) };
  #"coursework.ads" 45 0 0# assume { #"coursework.ads" 45 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram coursework.ads:45 *)
  ;
  () (* Check for RTE in the Pre of the subprogram coursework.ads:45 *)
  ;
  #"coursework.ads" 45 0 0# abstract ensures {true}(let _ = ( ((Coursework__airlock__rep.to_rep((let temp___321 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa((Coursework__acionpermitted.__split_fields({ Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___321) (1))))
  )) = 1) && ((Coursework__airlock__rep.to_rep((let temp___320 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa((Coursework__acionpermitted.__split_fields({ Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___320) (2))))
  )) = 1) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram coursework.ads:45 *)
  ;
  #"coursework.ads" 45 0 0# assume { #"coursework.ads" 45 0 0# ( ((Coursework__airlock__rep.to_rep (let temp___323 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___323 1)))
  ) = 1) /\ ((Coursework__airlock__rep.to_rep (let temp___322 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___322 2)))
  ) = 1) ) };
  #"coursework.ads" 45 0 0# try
   ( ( "GP_Sloc:coursework.adb:32:10" (#"coursework.adb" 32 0 0# ()) );
   ( "GP_Sloc:coursework.adb:32:7" (#"coursework.adb" 32 0 0# (if (( ((Coursework__oxegen__rep.to_rep((Coursework__submarine.rec__coursework__submarine__oxn((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 2) && ((Coursework__status__rep.to_rep((Coursework__submarine.rec__coursework__submarine__stat((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) )) then (
    ( ( "GP_Sloc:coursework.adb:33:10" (#"coursework.adb" 33 0 0# ()) );
    ( "GP_Sloc:coursework.adb:33:10" (#"coursework.adb" 33 0 0# ( (#"coursework.adb" 33 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:coursework.adb:33:10" "GP_Reason:VC_PRECONDITION" "GP_Id:3" "comment:         surfaceSub;
         ^ coursework.adb:33:10:VC_PRECONDITION" "GP_Shape:if__call_surfacesub" (Coursework__surfacesub___axiom.surfacesub(())) )) )) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "checkreactor" defined at coursework.ads:49, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Coursework__checkreactor__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__surfacesub___axiom
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Coursework__status
 use        Coursework__status__rep
 use        Coursework__reactorheat
 use        Coursework__reactorheat__rep
 use        Array__Int__Coursework__airlock
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__acionpermitted
 use        Coursework__acionpermitted___axiom
 use        Coursework__airlocks
 use        Coursework__sub
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Coursework__airlock___axiom
 use        Coursework__oxegen___axiom
 use        Coursework__status___axiom
 use        Coursework__opertationallowed___axiom
 use        Coursework__reactorheat___axiom
 use        Coursework__airarray___axiom
 use        Coursework__diving___axiom
 use        Coursework__submarine___axiom
 use        Coursework__acionpermitted___axiom
 use        Coursework__airlocks___axiom
 use        Coursework__sub___axiom
 use        Coursework__surfacesub___axiom

 let def #"coursework.ads" 49 0 0#"W:diverges:N" "GP_Subp:coursework.ads:49" 
   (__void_param : unit)
  requires { #"coursework.ads" 49 0 0# true }
  ensures { #"coursework.ads" 49 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram coursework.ads:49 *)
  ;
  #"coursework.ads" 49 0 0# assume { #"coursework.ads" 49 0 0# (Coursework__acionpermitted___axiom.dynamic_invariant { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content } True False True True) };
  #"coursework.ads" 49 0 0# assume { #"coursework.ads" 49 0 0# (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True False True True) };
  #"coursework.ads" 49 0 0# assume { #"coursework.ads" 49 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram coursework.ads:49 *)
  ;
  () (* Check for RTE in the Pre of the subprogram coursework.ads:49 *)
  ;
  #"coursework.ads" 49 0 0# abstract ensures {true}(let _ = ( ((Coursework__status__rep.to_rep((Coursework__submarine.rec__coursework__submarine__stat((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) && ( ((Coursework__airlock__rep.to_rep((let temp___328 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa((Coursework__acionpermitted.__split_fields({ Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___328) (1))))
  )) = 1) && ((Coursework__airlock__rep.to_rep((let temp___327 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa((Coursework__acionpermitted.__split_fields({ Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___327) (2))))
  )) = 1) ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram coursework.ads:49 *)
  ;
  #"coursework.ads" 49 0 0# assume { #"coursework.ads" 49 0 0# ( ((Coursework__status__rep.to_rep (Coursework__submarine.rec__coursework__submarine__stat (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) /\ ( ((Coursework__airlock__rep.to_rep (let temp___330 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___330 1)))
  ) = 1) /\ ((Coursework__airlock__rep.to_rep (let temp___329 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___329 2)))
  ) = 1) ) ) };
  #"coursework.ads" 49 0 0# try
   ( ( "GP_Sloc:coursework.adb:40:10" (#"coursework.adb" 40 0 0# ()) );
   ( "GP_Sloc:coursework.adb:40:7" (#"coursework.adb" 40 0 0# (if (( ((Coursework__reactorheat__rep.to_rep((Coursework__submarine.rec__coursework__submarine__reac((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 1) && ((Coursework__status__rep.to_rep((Coursework__submarine.rec__coursework__submarine__stat((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) )) then (
    ( ( "GP_Sloc:coursework.adb:41:10" (#"coursework.adb" 41 0 0# ()) );
    ( "GP_Sloc:coursework.adb:41:10" (#"coursework.adb" 41 0 0# ( (#"coursework.adb" 41 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Shape:if__call_surfacesub" "GP_Sloc:coursework.adb:41:10" "GP_Id:4" "comment:         surfaceSub;
         ^ coursework.adb:41:10:VC_PRECONDITION" (Coursework__surfacesub___axiom.surfacesub(())) )) )) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "divesub" defined at coursework.ads:54, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Coursework__divesub__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__oxegen
 use        Coursework__oxegen__rep
 use        Coursework__status
 use        Coursework__status__rep
 use        Coursework__opertationallowed
 use        Coursework__opertationallowed__rep
 use        Coursework__diving
 use        Coursework__diving__rep
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__acionpermitted
 use        Coursework__acionpermitted___axiom
 use        Coursework__airlocks
 use        Coursework__sub
 use        Coursework__airlock___axiom
 use        Coursework__oxegen___axiom
 use        Coursework__status___axiom
 use        Coursework__opertationallowed___axiom
 use        Coursework__reactorheat___axiom
 use        Coursework__airarray___axiom
 use        Coursework__diving___axiom
 use        Coursework__submarine___axiom
 use        Coursework__acionpermitted___axiom
 use        Coursework__airlocks___axiom
 use        Coursework__sub___axiom

 let def #"coursework.ads" 54 0 0#"W:diverges:N" "GP_Subp:coursework.ads:54" 
   (__void_param : unit)
  requires { #"coursework.ads" 54 0 0# true }
  ensures { #"coursework.ads" 54 0 0# (#"coursework.ads" 57 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:coursework.ads:57:14" "GP_Id:5" "comment:     Post => sub.stat = Submerged;
             ^ coursework.ads:57:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:3888" "GP_Sloc:coursework.ads:57:14" ((Coursework__status__rep.to_rep (Coursework__submarine.rec__coursework__submarine__stat (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram coursework.ads:54 *)
  ;
   assume {  (Coursework__acionpermitted___axiom.dynamic_invariant { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content } True False True True) };
   assume {  (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram coursework.ads:54 *)
  ;
  () (* Check for RTE in the Pre of the subprogram coursework.ads:54 *)
  ;
   abstract ensures {true}(let _ = ( ((Coursework__status__rep.to_rep((Coursework__submarine.rec__coursework__submarine__stat((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) && ( ((Coursework__oxegen__rep.to_rep((Coursework__submarine.rec__coursework__submarine__oxn((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) && ((Coursework__opertationallowed__rep.to_rep((Coursework__acionpermitted.rec__coursework__acionpermitted__allowed((Coursework__acionpermitted.__split_fields({ Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })))))) = 0) ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram coursework.ads:54 *)
  ;
   assume {  ( ((Coursework__status__rep.to_rep (Coursework__submarine.rec__coursework__submarine__stat (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) /\ ( ((Coursework__oxegen__rep.to_rep (Coursework__submarine.rec__coursework__submarine__oxn (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) /\ ((Coursework__opertationallowed__rep.to_rep (Coursework__acionpermitted.rec__coursework__acionpermitted__allowed (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content }))) = 0) ) ) };
   try
   ( ( "GP_Sloc:coursework.adb:48:10" (#"coursework.adb" 48 0 0# ()) );
   ( "GP_Sloc:coursework.adb:48:7" (#"coursework.adb" 48 0 0# (if (( ( ((Coursework__status__rep.to_rep((Coursework__submarine.rec__coursework__submarine__stat((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) && ((Coursework__oxegen__rep.to_rep((Coursework__submarine.rec__coursework__submarine__oxn((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) ) && ((Coursework__opertationallowed__rep.to_rep((Coursework__acionpermitted.rec__coursework__acionpermitted__allowed((Coursework__acionpermitted.__split_fields({ Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })))))) = 0) )) then (
    ( ( "GP_Sloc:coursework.adb:49:10" (#"coursework.adb" 49 0 0# ()) );
    ( "GP_Sloc:coursework.adb:49:19" (#"coursework.adb" 49 0 0# (let temp___332 = (let temp___331 = { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } in (
     ( #"coursework.adb" 49 0 0# abstract ensures {true}(let _ = (Coursework__submarine.rec__coursework__submarine__dive((Coursework__submarine.__split_fields(temp___331)))) in (
      ()))
      end ;
     { ( temp___331 ) with Coursework__submarine.__split_fields = { ( (Coursework__submarine.__split_fields(temp___331)) ) with Coursework__submarine.rec__coursework__submarine__dive = (Coursework__diving__rep.of_rep(0)) } } )))
     in (
     #"coursework.adb" 49 0 0# Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content <- ( (Coursework__submarine.__split_fields(temp___332)) )))
    ) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ((Coursework__status__rep.to_rep((Coursework__submarine.rec__coursework__submarine__stat((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "closeairlock" defined at coursework.ads:59, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Coursework__closeairlock__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Coursework__status
 use        Coursework__status__rep
 use        Array__Int__Coursework__airlock
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__acionpermitted
 use        Coursework__acionpermitted___axiom
 use        Coursework__airlocks
 use        Coursework__sub
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Coursework__airlock___axiom
 use        Coursework__oxegen___axiom
 use        Coursework__status___axiom
 use        Coursework__opertationallowed___axiom
 use        Coursework__reactorheat___axiom
 use        Coursework__airarray___axiom
 use        Coursework__diving___axiom
 use        Coursework__submarine___axiom
 use        Coursework__acionpermitted___axiom
 use        Coursework__airlocks___axiom
 use        Coursework__sub___axiom

 let def #"coursework.ads" 59 0 0#"W:diverges:N" "GP_Subp:coursework.ads:59" 
   (__void_param : unit)
  requires { #"coursework.ads" 59 0 0# true }
  ensures { #"coursework.ads" 59 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram coursework.ads:59 *)
  ;
  #"coursework.ads" 59 0 0# assume { #"coursework.ads" 59 0 0# (Coursework__acionpermitted___axiom.dynamic_invariant { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content } True False True True) };
  #"coursework.ads" 59 0 0# assume { #"coursework.ads" 59 0 0# (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True False True True) };
  #"coursework.ads" 59 0 0# assume { #"coursework.ads" 59 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram coursework.ads:59 *)
  ;
  () (* Check for RTE in the Pre of the subprogram coursework.ads:59 *)
  ;
  #"coursework.ads" 59 0 0# abstract ensures {true}(let _ = ((Coursework__status__rep.to_rep((Coursework__submarine.rec__coursework__submarine__stat((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram coursework.ads:59 *)
  ;
  #"coursework.ads" 59 0 0# assume { #"coursework.ads" 59 0 0# ((Coursework__status__rep.to_rep (Coursework__submarine.rec__coursework__submarine__stat (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) };
  #"coursework.ads" 59 0 0# try
   ( ( "GP_Sloc:coursework.adb:56:10" (#"coursework.adb" 56 0 0# ()) );
   ( "GP_Sloc:coursework.adb:56:7" (#"coursework.adb" 56 0 0# (if (((Coursework__airlock__rep.to_rep((let temp___339 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa((Coursework__acionpermitted.__split_fields({ Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })))) in (
    (Array__Int__Coursework__airlock.get(temp___339) (1))))
   )) = 0)) then (
    ( ( "GP_Sloc:coursework.adb:57:10" (#"coursework.adb" 57 0 0# ()) );
    ( "GP_Sloc:coursework.adb:57:32" (#"coursework.adb" 57 0 0# (let temp___338 = (let temp___337 = { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content } in (
     ( #"coursework.adb" 57 0 0# abstract ensures {true}(let _ = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa((Coursework__acionpermitted.__split_fields(temp___337)))) in (
      ()))
      end ;
     { ( temp___337 ) with Coursework__acionpermitted.__split_fields = { ( (Coursework__acionpermitted.__split_fields(temp___337)) ) with Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa = (let temp___336 = (Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content })) in (
      (Array__Int__Coursework__airlock.set((Coursework__acionpermitted.rec__coursework__acionpermitted__airlocksa (Coursework__acionpermitted.__split_fields { Coursework__acionpermitted.__split_fields = Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content }))) (1) ((Coursework__airlock__rep.of_rep(1))))))
      } } )))
     in (
     #"coursework.adb" 57 0 0# Coursework__airlocks.airlocks__split_fields.Coursework__acionpermitted.__split_fields__content <- ( (Coursework__acionpermitted.__split_fields(temp___338)) )))
    ) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end  )
end
