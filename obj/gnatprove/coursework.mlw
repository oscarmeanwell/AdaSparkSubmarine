(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content "model_trace:" "name:" : short_short_integer }
 
 function short_short_integer__ref___projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content "model_trace:" "name:" : short_integer }
 
 function short_integer__ref___projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content "model_trace:" "name:" : integer }
 
 function integer__ref___projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content "model_trace:" "name:" : long_integer }
 
 function long_integer__ref___projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content "model_trace:" "name:" : long_long_integer }
 
 function long_long_integer__ref___projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural =
  < range 0 2147483647 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content "model_trace:" "name:" : natural }
 
 function natural__ref___projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive =
  < range 1 2147483647 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content "model_trace:" "name:" : positive }
 
 function positive__ref___projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content "model_trace:" "name:" : short_float }
 
 function short_float__ref___projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref =
  { mutable float__content "model_trace:" "name:" : float }
 
 function float__ref___projection 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content "model_trace:" "name:" : long_float }
 
 function long_float__ref___projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  255
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content "model_trace:" "name:" : character }
 
 function character__ref___projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content "model_trace:" "name:" : wide_character }
 
 function wide_character__ref___projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content "model_trace:" "name:" : wide_wide_character }
 
 function wide_wide_character__ref___projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character__rep
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string 
   (x : Main.__image) : string
 
 function from_string 
   (x : string) : Main.__image
 
 type string__ref =
  { mutable string__content "model_trace:" "name:" : string }
 
 function string__ref___projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character__rep
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref =
  { mutable wide_string__content "model_trace:" "name:" : wide_string }
 
 function wide_string__ref___projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content "model_trace:" "name:" : wide_wide_string }
 
 function wide_wide_string__ref___projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use import "_gnatprove_standard".Main
 use import "int".Int

 function num_small 
   : int =
  1
 
 function den_small 
   : int =
  1000000000
 
 clone export "ada__model".Fixed_Point_Rep with
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function num_small 
   : Main.__fixed =
  1
 
 function den_small 
   : Main.__fixed =
  1000000000
 
 function first 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content "model_trace:" "name:" : duration }
 
 function duration__ref___projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content "model_trace:" "name:" : universal_integer }
 
 function universal_integer__ref___projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "airlock" defined at coursework.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Coursework__airlock
 use import "_gnatprove_standard".Main
 use import "int".Int

 type airlock 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = airlock, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type airlock__ref =
  { mutable airlock__content "model_trace:" "name:" : airlock }
 
 function airlock__ref___projection 
   (a : airlock__ref) : airlock =
  a.airlock__content
 
 meta "model_projection" function airlock__ref___projection
 
 meta "inline : no" function airlock__ref___projection
 
 val airlock__havoc 
   (x : airlock__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "airlock" defined at coursework.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Coursework__airlock__rep
 use        Coursework__airlock
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Coursework__airlock.airlock, 
 predicate in_range = Coursework__airlock.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "oxegen" defined at coursework.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Coursework__oxegen
 use import "_gnatprove_standard".Main
 use import "int".Int

 type oxegen 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = oxegen, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type oxegen__ref =
  { mutable oxegen__content "model_trace:" "name:" : oxegen }
 
 function oxegen__ref___projection 
   (a : oxegen__ref) : oxegen =
  a.oxegen__content
 
 meta "model_projection" function oxegen__ref___projection
 
 meta "inline : no" function oxegen__ref___projection
 
 val oxegen__havoc 
   (x : oxegen__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "oxegen" defined at coursework.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Coursework__oxegen__rep
 use        Coursework__oxegen
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Coursework__oxegen.oxegen, 
 predicate in_range = Coursework__oxegen.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "status" defined at coursework.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Coursework__status
 use import "_gnatprove_standard".Main
 use import "int".Int

 type status 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = status, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type status__ref =
  { mutable status__content "model_trace:" "name:" : status }
 
 function status__ref___projection 
   (a : status__ref) : status =
  a.status__content
 
 meta "model_projection" function status__ref___projection
 
 meta "inline : no" function status__ref___projection
 
 val status__havoc 
   (x : status__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "status" defined at coursework.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Coursework__status__rep
 use        Coursework__status
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Coursework__status.status, 
 predicate in_range = Coursework__status.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "reactorheat" defined at coursework.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Coursework__reactorheat
 use import "_gnatprove_standard".Main
 use import "int".Int

 type reactorheat 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = reactorheat, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type reactorheat__ref =
  { mutable reactorheat__content "model_trace:" "name:" : reactorheat }
 
 function reactorheat__ref___projection 
   (a : reactorheat__ref) : reactorheat =
  a.reactorheat__content
 
 meta "model_projection" function reactorheat__ref___projection
 
 meta "inline : no" function reactorheat__ref___projection
 
 val reactorheat__havoc 
   (x : reactorheat__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "reactorheat" defined at coursework.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Coursework__reactorheat__rep
 use        Coursework__reactorheat
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Coursework__reactorheat.reactorheat, 
 predicate in_range = Coursework__reactorheat.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "TairarrayD1" defined at coursework.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Coursework__TairarrayD1
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tairarrayD1 =
  < range 1 2 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tairarrayD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tairarrayD1__ref =
  { mutable tairarrayD1__content "model_trace:" "name:" : tairarrayD1 }
 
 function tairarrayD1__ref___projection 
   (a : tairarrayD1__ref) : tairarrayD1 =
  a.tairarrayD1__content
 
 meta "model_projection" function tairarrayD1__ref___projection
 
 meta "inline : no" function tairarrayD1__ref___projection
 
 val tairarrayD1__havoc 
   (x : tairarrayD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TairarrayD1" defined at coursework.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Coursework__TairarrayD1__rep
 use        Coursework__TairarrayD1
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Coursework__TairarrayD1.tairarrayD1) : int =
  (Coursework__TairarrayD1.tairarrayD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Coursework__TairarrayD1.tairarrayD1, 
 predicate in_range = Coursework__TairarrayD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "TairarrayB" defined at coursework.ads:7, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Coursework__airlock
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__airlock
 use        Coursework__airlock__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Coursework__airlock.airlock
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_154   : int.
   (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
    ((Coursework__airlock__rep.to_rep (get a temp___idx_154)) = (Coursework__airlock__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_154   : int.
    (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
     ((Coursework__airlock__rep.to_rep (get a temp___idx_154)) = (Coursework__airlock__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "TairarrayB" defined at coursework.ads:7, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Coursework__airlock__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Coursework__airlock

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Coursework__airlock.component_type, 
 type map = Array__Int__Coursework__airlock.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Coursework__airlock.get

end

(* Module for axiomatizing comparison for the array theory associated to type "TairarrayB" defined at coursework.ads:7, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Coursework__airlock_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__airlock__rep
 use        Array__Int__Coursework__airlock

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Coursework__airlock.component_type, 
 function to_rep = Coursework__airlock__rep.to_rep, 
 type map = Array__Int__Coursework__airlock.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Coursework__airlock.get, 
 function bool_eq = Array__Int__Coursework__airlock.bool_eq

end

(* Module for axiomatizing type "TairarrayB" defined at coursework.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Coursework__TairarrayB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep
 use        Coursework__airlock
 use        Coursework__TairarrayD1
 use        Array__Int__Coursework__airlock

 type component_type =
  Coursework__airlock.airlock
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Coursework__airlock.map, 
 function array_bool_eq = Array__Int__Coursework__airlock.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Coursework__TairarrayD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tairarrayB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tairarrayB__ref =
  { mutable tairarrayB__content "model_trace:" "name:" : tairarrayB }
 
 function tairarrayB__ref___projection 
   (a : tairarrayB__ref) : tairarrayB =
  a.tairarrayB__content
 
 meta "model_projection" function tairarrayB__ref___projection
 
 meta "inline : no" function tairarrayB__ref___projection
 
 val tairarrayB__havoc 
   (x : tairarrayB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "airarray" defined at coursework.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Coursework__airarray
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__airlock
 use        Array__Int__Coursework__airlock

 type component_type =
  Coursework__airlock.airlock
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Coursework__airlock.map, 
 function array_bool_eq = Array__Int__Coursework__airlock.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "diving" defined at coursework.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Coursework__diving
 use import "_gnatprove_standard".Main
 use import "int".Int

 type diving 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = diving, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type diving__ref =
  { mutable diving__content "model_trace:" "name:" : diving }
 
 function diving__ref___projection 
   (a : diving__ref) : diving =
  a.diving__content
 
 meta "model_projection" function diving__ref___projection
 
 meta "inline : no" function diving__ref___projection
 
 val diving__havoc 
   (x : diving__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "diving" defined at coursework.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Coursework__diving__rep
 use        Coursework__diving
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Coursework__diving.diving, 
 predicate in_range = Coursework__diving.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "doorlocked" defined at coursework.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Coursework__doorlocked
 use import "_gnatprove_standard".Main
 use import "int".Int

 type doorlocked 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = doorlocked, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type doorlocked__ref =
  { mutable doorlocked__content "model_trace:" "name:" : doorlocked }
 
 function doorlocked__ref___projection 
   (a : doorlocked__ref) : doorlocked =
  a.doorlocked__content
 
 meta "model_projection" function doorlocked__ref___projection
 
 meta "inline : no" function doorlocked__ref___projection
 
 val doorlocked__havoc 
   (x : doorlocked__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "doorlocked" defined at coursework.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Coursework__doorlocked__rep
 use        Coursework__doorlocked
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Coursework__doorlocked.doorlocked, 
 predicate in_range = Coursework__doorlocked.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "isloaded" defined at coursework.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Coursework__isloaded
 use import "_gnatprove_standard".Main
 use import "int".Int

 type isloaded 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = isloaded, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type isloaded__ref =
  { mutable isloaded__content "model_trace:" "name:" : isloaded }
 
 function isloaded__ref___projection 
   (a : isloaded__ref) : isloaded =
  a.isloaded__content
 
 meta "model_projection" function isloaded__ref___projection
 
 meta "inline : no" function isloaded__ref___projection
 
 val isloaded__havoc 
   (x : isloaded__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "isloaded" defined at coursework.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Coursework__isloaded__rep
 use        Coursework__isloaded
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Coursework__isloaded.isloaded, 
 predicate in_range = Coursework__isloaded.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "TtorarrayD1" defined at coursework.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Coursework__TtorarrayD1
 use import "_gnatprove_standard".Main
 use import "int".Int

 type ttorarrayD1 =
  < range 1 4 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  4
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = ttorarrayD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type ttorarrayD1__ref =
  { mutable ttorarrayD1__content "model_trace:" "name:" : ttorarrayD1 }
 
 function ttorarrayD1__ref___projection 
   (a : ttorarrayD1__ref) : ttorarrayD1 =
  a.ttorarrayD1__content
 
 meta "model_projection" function ttorarrayD1__ref___projection
 
 meta "inline : no" function ttorarrayD1__ref___projection
 
 val ttorarrayD1__havoc 
   (x : ttorarrayD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TtorarrayD1" defined at coursework.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Coursework__TtorarrayD1__rep
 use        Coursework__TtorarrayD1
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Coursework__TtorarrayD1.ttorarrayD1) : int =
  (Coursework__TtorarrayD1.ttorarrayD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Coursework__TtorarrayD1.ttorarrayD1, 
 predicate in_range = Coursework__TtorarrayD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "TtorarrayB" defined at coursework.ads:11, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Coursework__isloaded
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__isloaded
 use        Coursework__isloaded__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Coursework__isloaded.isloaded
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_155   : int.
   (if (( (a__first <= temp___idx_155) /\ (temp___idx_155 <= a__last) )) then (
    ((Coursework__isloaded__rep.to_rep (get a temp___idx_155)) = (Coursework__isloaded__rep.to_rep (get b ((b__first - a__first) + temp___idx_155))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_155   : int.
    (if (( (a__first <= temp___idx_155) /\ (temp___idx_155 <= a__last) )) then (
     ((Coursework__isloaded__rep.to_rep (get a temp___idx_155)) = (Coursework__isloaded__rep.to_rep (get b ((b__first - a__first) + temp___idx_155))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "TtorarrayB" defined at coursework.ads:11, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Coursework__isloaded__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Coursework__isloaded

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Coursework__isloaded.component_type, 
 type map = Array__Int__Coursework__isloaded.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Coursework__isloaded.get

end

(* Module for axiomatizing comparison for the array theory associated to type "TtorarrayB" defined at coursework.ads:11, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Coursework__isloaded_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__isloaded__rep
 use        Array__Int__Coursework__isloaded

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Coursework__isloaded.component_type, 
 function to_rep = Coursework__isloaded__rep.to_rep, 
 type map = Array__Int__Coursework__isloaded.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Coursework__isloaded.get, 
 function bool_eq = Array__Int__Coursework__isloaded.bool_eq

end

(* Module for axiomatizing type "TtorarrayB" defined at coursework.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Coursework__TtorarrayB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep
 use        Coursework__isloaded
 use        Coursework__TtorarrayD1
 use        Array__Int__Coursework__isloaded

 type component_type =
  Coursework__isloaded.isloaded
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Coursework__isloaded.map, 
 function array_bool_eq = Array__Int__Coursework__isloaded.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Coursework__TtorarrayD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type ttorarrayB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type ttorarrayB__ref =
  { mutable ttorarrayB__content "model_trace:" "name:" : ttorarrayB }
 
 function ttorarrayB__ref___projection 
   (a : ttorarrayB__ref) : ttorarrayB =
  a.ttorarrayB__content
 
 meta "model_projection" function ttorarrayB__ref___projection
 
 meta "inline : no" function ttorarrayB__ref___projection
 
 val ttorarrayB__havoc 
   (x : ttorarrayB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "torarray" defined at coursework.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Coursework__torarray
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__isloaded
 use        Array__Int__Coursework__isloaded

 type component_type =
  Coursework__isloaded.isloaded
 
 function first 
   : int =
  1
 
 function last 
   : int =
  4
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Coursework__isloaded.map, 
 function array_bool_eq = Array__Int__Coursework__isloaded.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "diverecord" defined at coursework.ads:15, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Coursework__diverecord__rep
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__integer__rep
 use        Coursework__diving
 use        Coursework__diving__rep

 type __split_fields =
  { rec__coursework__diverecord__isdiving "model_trace:.3148" "name:isDiving" : Coursework__diving.diving; rec__coursework__diverecord__maxdepth "model_trace:.3158" "name:maxDepth" : Standard__integer.integer; rec__coursework__diverecord__currentdepth "model_trace:.3168" "name:currentDepth" : Standard__integer.integer; rec__coursework__diverecord__safedivedepth "model_trace:.3178" "name:safeDiveDepth" : Standard__integer.integer }
 
 function __split_fields_isDiving__projection "model_trace:.3148" "name:isDiving" 
   (a : __split_fields) : Coursework__diving.diving =
  a.rec__coursework__diverecord__isdiving
 
 meta "model_projection" function __split_fields_isDiving__projection
 
 meta "inline : no" function __split_fields_isDiving__projection
 
 function __split_fields_maxDepth__projection "model_trace:.3158" "name:maxDepth" 
   (a : __split_fields) : Standard__integer.integer =
  a.rec__coursework__diverecord__maxdepth
 
 meta "model_projection" function __split_fields_maxDepth__projection
 
 meta "inline : no" function __split_fields_maxDepth__projection
 
 function __split_fields_currentDepth__projection "model_trace:.3168" "name:currentDepth" 
   (a : __split_fields) : Standard__integer.integer =
  a.rec__coursework__diverecord__currentdepth
 
 meta "model_projection" function __split_fields_currentDepth__projection
 
 meta "inline : no" function __split_fields_currentDepth__projection
 
 function __split_fields_safeDiveDepth__projection "model_trace:.3178" "name:safeDiveDepth" 
   (a : __split_fields) : Standard__integer.integer =
  a.rec__coursework__diverecord__safedivedepth
 
 meta "model_projection" function __split_fields_safeDiveDepth__projection
 
 meta "inline : no" function __split_fields_safeDiveDepth__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content "model_trace:" "name:" : __split_fields }
 
 function __split_fields__ref___projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___projection
 
 meta "inline : no" function __split_fields__ref___projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields "model_trace:" "name:" : __split_fields }
 
 function __rep___projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___projection
 
 meta "inline : no" function __rep___projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a
 
 predicate coursework__diverecord__isdiving__pred 
   (a : __rep)  =
  true
 
 val rec__coursework__diverecord__isdiving_ 
   (a : __rep) : Coursework__diving.diving
  requires {  (coursework__diverecord__isdiving__pred a) }
  ensures {  (result = a.__split_fields.rec__coursework__diverecord__isdiving) }
 
 predicate coursework__diverecord__maxdepth__pred 
   (a : __rep)  =
  true
 
 val rec__coursework__diverecord__maxdepth_ 
   (a : __rep) : Standard__integer.integer
  requires {  (coursework__diverecord__maxdepth__pred a) }
  ensures {  (result = a.__split_fields.rec__coursework__diverecord__maxdepth) }
 
 predicate coursework__diverecord__currentdepth__pred 
   (a : __rep)  =
  true
 
 val rec__coursework__diverecord__currentdepth_ 
   (a : __rep) : Standard__integer.integer
  requires {  (coursework__diverecord__currentdepth__pred a) }
  ensures {  (result = a.__split_fields.rec__coursework__diverecord__currentdepth) }
 
 predicate coursework__diverecord__safedivedepth__pred 
   (a : __rep)  =
  true
 
 val rec__coursework__diverecord__safedivedepth_ 
   (a : __rep) : Standard__integer.integer
  requires {  (coursework__diverecord__safedivedepth__pred a) }
  ensures {  (result = a.__split_fields.rec__coursework__diverecord__safedivedepth) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ( ( ((Coursework__diving__rep.to_rep a.__split_fields.rec__coursework__diverecord__isdiving) = (Coursework__diving__rep.to_rep b.__split_fields.rec__coursework__diverecord__isdiving)) /\ ((Standard__integer__rep.to_rep a.__split_fields.rec__coursework__diverecord__maxdepth) = (Standard__integer__rep.to_rep b.__split_fields.rec__coursework__diverecord__maxdepth)) ) /\ ((Standard__integer__rep.to_rep a.__split_fields.rec__coursework__diverecord__currentdepth) = (Standard__integer__rep.to_rep b.__split_fields.rec__coursework__diverecord__currentdepth)) ) /\ ((Standard__integer__rep.to_rep a.__split_fields.rec__coursework__diverecord__safedivedepth) = (Standard__integer__rep.to_rep b.__split_fields.rec__coursework__diverecord__safedivedepth)) )) then (
   True) else (
   False))

end

(* Module for axiomatizing type "diverecord" defined at coursework.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Coursework__diverecord
 use export Coursework__diverecord__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type diverecord =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   (a : diverecord) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : diverecord) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : diverecord.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : diverecord.
   ((object__alignment a) >= 0))
 
 function coursework__diverecord__isdiving__first__bit 
   : int
 
 function coursework__diverecord__isdiving__last__bit 
   : int
 
 function coursework__diverecord__isdiving__position 
   : int
 
 axiom coursework__diverecord__isdiving__first__bit_axiom :
  ((coursework__diverecord__isdiving__first__bit ) >= 0)
 
 axiom coursework__diverecord__isdiving__last__bit_axiom :
  ((coursework__diverecord__isdiving__last__bit ) > (coursework__diverecord__isdiving__first__bit ))
 
 axiom coursework__diverecord__isdiving__position_axiom :
  ((coursework__diverecord__isdiving__position ) >= 0)
 
 function coursework__diverecord__maxdepth__first__bit 
   : int
 
 function coursework__diverecord__maxdepth__last__bit 
   : int
 
 function coursework__diverecord__maxdepth__position 
   : int
 
 axiom coursework__diverecord__maxdepth__first__bit_axiom :
  ((coursework__diverecord__maxdepth__first__bit ) >= 0)
 
 axiom coursework__diverecord__maxdepth__last__bit_axiom :
  ((coursework__diverecord__maxdepth__last__bit ) > (coursework__diverecord__maxdepth__first__bit ))
 
 axiom coursework__diverecord__maxdepth__position_axiom :
  ((coursework__diverecord__maxdepth__position ) >= 0)
 
 function coursework__diverecord__currentdepth__first__bit 
   : int
 
 function coursework__diverecord__currentdepth__last__bit 
   : int
 
 function coursework__diverecord__currentdepth__position 
   : int
 
 axiom coursework__diverecord__currentdepth__first__bit_axiom :
  ((coursework__diverecord__currentdepth__first__bit ) >= 0)
 
 axiom coursework__diverecord__currentdepth__last__bit_axiom :
  ((coursework__diverecord__currentdepth__last__bit ) > (coursework__diverecord__currentdepth__first__bit ))
 
 axiom coursework__diverecord__currentdepth__position_axiom :
  ((coursework__diverecord__currentdepth__position ) >= 0)
 
 function coursework__diverecord__safedivedepth__first__bit 
   : int
 
 function coursework__diverecord__safedivedepth__last__bit 
   : int
 
 function coursework__diverecord__safedivedepth__position 
   : int
 
 axiom coursework__diverecord__safedivedepth__first__bit_axiom :
  ((coursework__diverecord__safedivedepth__first__bit ) >= 0)
 
 axiom coursework__diverecord__safedivedepth__last__bit_axiom :
  ((coursework__diverecord__safedivedepth__last__bit ) > (coursework__diverecord__safedivedepth__first__bit ))
 
 axiom coursework__diverecord__safedivedepth__position_axiom :
  ((coursework__diverecord__safedivedepth__position ) >= 0)
 
 function user_eq 
   (a : diverecord) (b : diverecord) : bool
 
 function dummy 
   : diverecord
 
 type diverecord__ref =
  { mutable diverecord__content "model_trace:" "name:" : diverecord }
 
 function diverecord__ref___projection 
   (a : diverecord__ref) : diverecord =
  a.diverecord__content
 
 meta "model_projection" function diverecord__ref___projection
 
 meta "inline : no" function diverecord__ref___projection
 
 val diverecord__havoc 
   (x : diverecord__ref) : unit
  writes {x}

end

(* Module for axiomatizing the record theory associated to type "torepedorecord" defined at coursework.ads:22, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Coursework__torepedorecord__rep
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__integer__rep
 use        Coursework__torarray
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded

 type __split_fields =
  { rec__coursework__torepedorecord__numberoftorepedos "model_trace:.3200" "name:numberOfTorepedos" : Standard__integer.integer; rec__coursework__torepedorecord__slots "model_trace:.3210" "name:slots" : Array__Int__Coursework__isloaded.map }
 
 function __split_fields_numberOfTorepedos__projection "model_trace:.3200" "name:numberOfTorepedos" 
   (a : __split_fields) : Standard__integer.integer =
  a.rec__coursework__torepedorecord__numberoftorepedos
 
 meta "model_projection" function __split_fields_numberOfTorepedos__projection
 
 meta "inline : no" function __split_fields_numberOfTorepedos__projection
 
 function __split_fields_slots__projection "model_trace:.3210" "name:slots" 
   (a : __split_fields) : Array__Int__Coursework__isloaded.map =
  a.rec__coursework__torepedorecord__slots
 
 meta "model_projection" function __split_fields_slots__projection
 
 meta "inline : no" function __split_fields_slots__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content "model_trace:" "name:" : __split_fields }
 
 function __split_fields__ref___2__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___2__projection
 
 meta "inline : no" function __split_fields__ref___2__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields "model_trace:" "name:" : __split_fields }
 
 function __rep___2__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___2__projection
 
 meta "inline : no" function __rep___2__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a
 
 predicate coursework__torepedorecord__numberoftorepedos__pred 
   (a : __rep)  =
  true
 
 val rec__coursework__torepedorecord__numberoftorepedos_ 
   (a : __rep) : Standard__integer.integer
  requires {  (coursework__torepedorecord__numberoftorepedos__pred a) }
  ensures {  (result = a.__split_fields.rec__coursework__torepedorecord__numberoftorepedos) }
 
 predicate coursework__torepedorecord__slots__pred 
   (a : __rep)  =
  true
 
 val rec__coursework__torepedorecord__slots_ 
   (a : __rep) : Array__Int__Coursework__isloaded.map
  requires {  (coursework__torepedorecord__slots__pred a) }
  ensures {  (result = a.__split_fields.rec__coursework__torepedorecord__slots) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Standard__integer__rep.to_rep a.__split_fields.rec__coursework__torepedorecord__numberoftorepedos) = (Standard__integer__rep.to_rep b.__split_fields.rec__coursework__torepedorecord__numberoftorepedos)) /\ ((Coursework__torarray.bool_eq a.__split_fields.rec__coursework__torepedorecord__slots b.__split_fields.rec__coursework__torepedorecord__slots) = True) )) then (
   True) else (
   False))

end

(* Module for axiomatizing type "torepedorecord" defined at coursework.ads:22, created in Gnat2Why.Types.Translate_Type *)
module Coursework__torepedorecord
 use export Coursework__torepedorecord__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type torepedorecord =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   (a : torepedorecord) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : torepedorecord) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : torepedorecord.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : torepedorecord.
   ((object__alignment a) >= 0))
 
 function coursework__torepedorecord__numberoftorepedos__first__bit 
   : int
 
 function coursework__torepedorecord__numberoftorepedos__last__bit 
   : int
 
 function coursework__torepedorecord__numberoftorepedos__position 
   : int
 
 axiom coursework__torepedorecord__numberoftorepedos__first__bit_axiom :
  ((coursework__torepedorecord__numberoftorepedos__first__bit ) >= 0)
 
 axiom coursework__torepedorecord__numberoftorepedos__last__bit_axiom :
  ((coursework__torepedorecord__numberoftorepedos__last__bit ) > (coursework__torepedorecord__numberoftorepedos__first__bit ))
 
 axiom coursework__torepedorecord__numberoftorepedos__position_axiom :
  ((coursework__torepedorecord__numberoftorepedos__position ) >= 0)
 
 function coursework__torepedorecord__slots__first__bit 
   : int
 
 function coursework__torepedorecord__slots__last__bit 
   : int
 
 function coursework__torepedorecord__slots__position 
   : int
 
 axiom coursework__torepedorecord__slots__first__bit_axiom :
  ((coursework__torepedorecord__slots__first__bit ) >= 0)
 
 axiom coursework__torepedorecord__slots__last__bit_axiom :
  ((coursework__torepedorecord__slots__last__bit ) > (coursework__torepedorecord__slots__first__bit ))
 
 axiom coursework__torepedorecord__slots__position_axiom :
  ((coursework__torepedorecord__slots__position ) >= 0)
 
 function user_eq 
   (a : torepedorecord) (b : torepedorecord) : bool
 
 function dummy 
   : torepedorecord
 
 type torepedorecord__ref =
  { mutable torepedorecord__content "model_trace:" "name:" : torepedorecord }
 
 function torepedorecord__ref___projection 
   (a : torepedorecord__ref) : torepedorecord =
  a.torepedorecord__content
 
 meta "model_projection" function torepedorecord__ref___projection
 
 meta "inline : no" function torepedorecord__ref___projection
 
 val torepedorecord__havoc 
   (x : torepedorecord__ref) : unit
  writes {x}

end

(* Module for axiomatizing the record theory associated to type "submarine" defined at coursework.ads:27, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Coursework__submarine__rep
 use import "_gnatprove_standard".Main
 use        Coursework__oxegen
 use        Coursework__oxegen__rep
 use        Coursework__status
 use        Coursework__status__rep
 use        Coursework__reactorheat
 use        Coursework__reactorheat__rep
 use        Coursework__airarray
 use        Coursework__diverecord
 use        Coursework__torepedorecord
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock

 type __split_fields =
  { rec__coursework__submarine__air "model_trace:.3232" "name:air" : Array__Int__Coursework__airlock.map; rec__coursework__submarine__oxn "model_trace:.3242" "name:oxn" : Coursework__oxegen.oxegen; rec__coursework__submarine__stat "model_trace:.3252" "name:stat" : Coursework__status.status; rec__coursework__submarine__reac "model_trace:.3262" "name:reac" : Coursework__reactorheat.reactorheat; rec__coursework__submarine__dive "model_trace:.3272" "name:dive" : Coursework__diverecord.diverecord; rec__coursework__submarine__tor "model_trace:.3282" "name:tor" : Coursework__torepedorecord.torepedorecord }
 
 function __split_fields_air__projection "model_trace:.3232" "name:air" 
   (a : __split_fields) : Array__Int__Coursework__airlock.map =
  a.rec__coursework__submarine__air
 
 meta "model_projection" function __split_fields_air__projection
 
 meta "inline : no" function __split_fields_air__projection
 
 function __split_fields_oxn__projection "model_trace:.3242" "name:oxn" 
   (a : __split_fields) : Coursework__oxegen.oxegen =
  a.rec__coursework__submarine__oxn
 
 meta "model_projection" function __split_fields_oxn__projection
 
 meta "inline : no" function __split_fields_oxn__projection
 
 function __split_fields_stat__projection "model_trace:.3252" "name:stat" 
   (a : __split_fields) : Coursework__status.status =
  a.rec__coursework__submarine__stat
 
 meta "model_projection" function __split_fields_stat__projection
 
 meta "inline : no" function __split_fields_stat__projection
 
 function __split_fields_reac__projection "model_trace:.3262" "name:reac" 
   (a : __split_fields) : Coursework__reactorheat.reactorheat =
  a.rec__coursework__submarine__reac
 
 meta "model_projection" function __split_fields_reac__projection
 
 meta "inline : no" function __split_fields_reac__projection
 
 function __split_fields_dive__projection "model_trace:.3272" "name:dive" 
   (a : __split_fields) : Coursework__diverecord.diverecord =
  a.rec__coursework__submarine__dive
 
 meta "model_projection" function __split_fields_dive__projection
 
 meta "inline : no" function __split_fields_dive__projection
 
 function __split_fields_tor__projection "model_trace:.3282" "name:tor" 
   (a : __split_fields) : Coursework__torepedorecord.torepedorecord =
  a.rec__coursework__submarine__tor
 
 meta "model_projection" function __split_fields_tor__projection
 
 meta "inline : no" function __split_fields_tor__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content "model_trace:" "name:" : __split_fields }
 
 function __split_fields__ref___3__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___3__projection
 
 meta "inline : no" function __split_fields__ref___3__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields "model_trace:" "name:" : __split_fields }
 
 function __rep___3__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___3__projection
 
 meta "inline : no" function __rep___3__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a
 
 predicate coursework__submarine__air__pred 
   (a : __rep)  =
  true
 
 val rec__coursework__submarine__air_ 
   (a : __rep) : Array__Int__Coursework__airlock.map
  requires {  (coursework__submarine__air__pred a) }
  ensures {  (result = a.__split_fields.rec__coursework__submarine__air) }
 
 predicate coursework__submarine__oxn__pred 
   (a : __rep)  =
  true
 
 val rec__coursework__submarine__oxn_ 
   (a : __rep) : Coursework__oxegen.oxegen
  requires {  (coursework__submarine__oxn__pred a) }
  ensures {  (result = a.__split_fields.rec__coursework__submarine__oxn) }
 
 predicate coursework__submarine__stat__pred 
   (a : __rep)  =
  true
 
 val rec__coursework__submarine__stat_ 
   (a : __rep) : Coursework__status.status
  requires {  (coursework__submarine__stat__pred a) }
  ensures {  (result = a.__split_fields.rec__coursework__submarine__stat) }
 
 predicate coursework__submarine__reac__pred 
   (a : __rep)  =
  true
 
 val rec__coursework__submarine__reac_ 
   (a : __rep) : Coursework__reactorheat.reactorheat
  requires {  (coursework__submarine__reac__pred a) }
  ensures {  (result = a.__split_fields.rec__coursework__submarine__reac) }
 
 predicate coursework__submarine__dive__pred 
   (a : __rep)  =
  true
 
 val rec__coursework__submarine__dive_ 
   (a : __rep) : Coursework__diverecord.diverecord
  requires {  (coursework__submarine__dive__pred a) }
  ensures {  (result = a.__split_fields.rec__coursework__submarine__dive) }
 
 predicate coursework__submarine__tor__pred 
   (a : __rep)  =
  true
 
 val rec__coursework__submarine__tor_ 
   (a : __rep) : Coursework__torepedorecord.torepedorecord
  requires {  (coursework__submarine__tor__pred a) }
  ensures {  (result = a.__split_fields.rec__coursework__submarine__tor) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ( ( ( ( ((Coursework__airarray.bool_eq a.__split_fields.rec__coursework__submarine__air b.__split_fields.rec__coursework__submarine__air) = True) /\ ((Coursework__oxegen__rep.to_rep a.__split_fields.rec__coursework__submarine__oxn) = (Coursework__oxegen__rep.to_rep b.__split_fields.rec__coursework__submarine__oxn)) ) /\ ((Coursework__status__rep.to_rep a.__split_fields.rec__coursework__submarine__stat) = (Coursework__status__rep.to_rep b.__split_fields.rec__coursework__submarine__stat)) ) /\ ((Coursework__reactorheat__rep.to_rep a.__split_fields.rec__coursework__submarine__reac) = (Coursework__reactorheat__rep.to_rep b.__split_fields.rec__coursework__submarine__reac)) ) /\ ((Coursework__diverecord.bool_eq a.__split_fields.rec__coursework__submarine__dive b.__split_fields.rec__coursework__submarine__dive) = True) ) /\ ((Coursework__torepedorecord.bool_eq a.__split_fields.rec__coursework__submarine__tor b.__split_fields.rec__coursework__submarine__tor) = True) )) then (
   True) else (
   False))

end

(* Module for axiomatizing type "submarine" defined at coursework.ads:27, created in Gnat2Why.Types.Translate_Type *)
module Coursework__submarine
 use export Coursework__submarine__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type submarine =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   (a : submarine) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : submarine) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : submarine.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : submarine.
   ((object__alignment a) >= 0))
 
 function coursework__submarine__air__first__bit 
   : int
 
 function coursework__submarine__air__last__bit 
   : int
 
 function coursework__submarine__air__position 
   : int
 
 axiom coursework__submarine__air__first__bit_axiom :
  ((coursework__submarine__air__first__bit ) >= 0)
 
 axiom coursework__submarine__air__last__bit_axiom :
  ((coursework__submarine__air__last__bit ) > (coursework__submarine__air__first__bit ))
 
 axiom coursework__submarine__air__position_axiom :
  ((coursework__submarine__air__position ) >= 0)
 
 function coursework__submarine__oxn__first__bit 
   : int
 
 function coursework__submarine__oxn__last__bit 
   : int
 
 function coursework__submarine__oxn__position 
   : int
 
 axiom coursework__submarine__oxn__first__bit_axiom :
  ((coursework__submarine__oxn__first__bit ) >= 0)
 
 axiom coursework__submarine__oxn__last__bit_axiom :
  ((coursework__submarine__oxn__last__bit ) > (coursework__submarine__oxn__first__bit ))
 
 axiom coursework__submarine__oxn__position_axiom :
  ((coursework__submarine__oxn__position ) >= 0)
 
 function coursework__submarine__stat__first__bit 
   : int
 
 function coursework__submarine__stat__last__bit 
   : int
 
 function coursework__submarine__stat__position 
   : int
 
 axiom coursework__submarine__stat__first__bit_axiom :
  ((coursework__submarine__stat__first__bit ) >= 0)
 
 axiom coursework__submarine__stat__last__bit_axiom :
  ((coursework__submarine__stat__last__bit ) > (coursework__submarine__stat__first__bit ))
 
 axiom coursework__submarine__stat__position_axiom :
  ((coursework__submarine__stat__position ) >= 0)
 
 function coursework__submarine__reac__first__bit 
   : int
 
 function coursework__submarine__reac__last__bit 
   : int
 
 function coursework__submarine__reac__position 
   : int
 
 axiom coursework__submarine__reac__first__bit_axiom :
  ((coursework__submarine__reac__first__bit ) >= 0)
 
 axiom coursework__submarine__reac__last__bit_axiom :
  ((coursework__submarine__reac__last__bit ) > (coursework__submarine__reac__first__bit ))
 
 axiom coursework__submarine__reac__position_axiom :
  ((coursework__submarine__reac__position ) >= 0)
 
 function coursework__submarine__dive__first__bit 
   : int
 
 function coursework__submarine__dive__last__bit 
   : int
 
 function coursework__submarine__dive__position 
   : int
 
 axiom coursework__submarine__dive__first__bit_axiom :
  ((coursework__submarine__dive__first__bit ) >= 0)
 
 axiom coursework__submarine__dive__last__bit_axiom :
  ((coursework__submarine__dive__last__bit ) > (coursework__submarine__dive__first__bit ))
 
 axiom coursework__submarine__dive__position_axiom :
  ((coursework__submarine__dive__position ) >= 0)
 
 function coursework__submarine__tor__first__bit 
   : int
 
 function coursework__submarine__tor__last__bit 
   : int
 
 function coursework__submarine__tor__position 
   : int
 
 axiom coursework__submarine__tor__first__bit_axiom :
  ((coursework__submarine__tor__first__bit ) >= 0)
 
 axiom coursework__submarine__tor__last__bit_axiom :
  ((coursework__submarine__tor__last__bit ) > (coursework__submarine__tor__first__bit ))
 
 axiom coursework__submarine__tor__position_axiom :
  ((coursework__submarine__tor__position ) >= 0)
 
 function user_eq 
   (a : submarine) (b : submarine) : bool
 
 function dummy 
   : submarine
 
 type submarine__ref =
  { mutable submarine__content "model_trace:" "name:" : submarine }
 
 function submarine__ref___projection 
   (a : submarine__ref) : submarine =
  a.submarine__content
 
 meta "model_projection" function submarine__ref___projection
 
 meta "inline : no" function submarine__ref___projection
 
 val submarine__havoc 
   (x : submarine__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T5s" defined at coursework.ads:38, created in Gnat2Why.Types.Translate_Type *)
module Coursework__T5s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t5s =
  < range 1 4 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  4
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t5s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t5s__ref =
  { mutable t5s__content "model_trace:" "name:" : t5s }
 
 function t5s__ref___projection 
   (a : t5s__ref) : t5s =
  a.t5s__content
 
 meta "model_projection" function t5s__ref___projection
 
 meta "inline : no" function t5s__ref___projection
 
 val t5s__havoc 
   (x : t5s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T5s" defined at coursework.ads:38, created in Gnat2Why.Types.Translate_Type *)
module Coursework__T5s__rep
 use        Coursework__T5s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Coursework__T5s.t5s) : int =
  (Coursework__T5s.t5s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Coursework__T5s.t5s, 
 predicate in_range = Coursework__T5s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T6s" defined at coursework.ads:38, created in Gnat2Why.Types.Translate_Type *)
module Coursework__T6s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__isloaded
 use        Array__Int__Coursework__isloaded

 type component_type =
  Coursework__isloaded.isloaded
 
 function first 
   : int =
  1
 
 function last 
   : int =
  4
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Coursework__isloaded.map, 
 function array_bool_eq = Array__Int__Coursework__isloaded.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T7s" defined at coursework.ads:40, created in Gnat2Why.Types.Translate_Type *)
module Coursework__T7s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t7s =
  < range 1 2 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t7s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t7s__ref =
  { mutable t7s__content "model_trace:" "name:" : t7s }
 
 function t7s__ref___projection 
   (a : t7s__ref) : t7s =
  a.t7s__content
 
 meta "model_projection" function t7s__ref___projection
 
 meta "inline : no" function t7s__ref___projection
 
 val t7s__havoc 
   (x : t7s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T7s" defined at coursework.ads:40, created in Gnat2Why.Types.Translate_Type *)
module Coursework__T7s__rep
 use        Coursework__T7s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Coursework__T7s.t7s) : int =
  (Coursework__T7s.t7s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Coursework__T7s.t7s, 
 predicate in_range = Coursework__T7s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T8s" defined at coursework.ads:40, created in Gnat2Why.Types.Translate_Type *)
module Coursework__T8s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__airlock
 use        Array__Int__Coursework__airlock

 type component_type =
  Coursework__airlock.airlock
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Coursework__airlock.map, 
 function array_bool_eq = Array__Int__Coursework__airlock.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "d" defined at coursework.ads:54, created in Gnat2Why.Decls.Translate_Constant *)
module Coursework__overideoxegen__d
 use import "_gnatprove_standard".Main
 use        Standard__string

 function d #"coursework.ads" 54 0 0#"model_projected" "model_trace:3515" "name:d" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "d" defined at coursework.ads:54, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Coursework__overideoxegen__d___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "n" defined at coursework.ads:71, created in Gnat2Why.Decls.Translate_Constant *)
module Coursework__closeairlock__n
 use import "_gnatprove_standard".Main

 function n #"coursework.ads" 71 0 0#"model" "model_trace:3716" "name:n" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at coursework.ads:71, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Coursework__closeairlock__n___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T70s" defined at coursework.ads:74, created in Gnat2Why.Types.Translate_Type *)
module Coursework__closeairlock__L69s__T70s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t70s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t70s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t70s__ref =
  { mutable t70s__content "model_trace:" "name:" : t70s }
 
 function t70s__ref___projection 
   (a : t70s__ref) : t70s =
  a.t70s__content
 
 meta "model_projection" function t70s__ref___projection
 
 meta "inline : no" function t70s__ref___projection
 
 val t70s__havoc 
   (x : t70s__ref) : unit
  writes {x}

end

(* Module for defining the constant "n" defined at coursework.ads:76, created in Gnat2Why.Decls.Translate_Constant *)
module Coursework__openairlock__n
 use import "_gnatprove_standard".Main

 function n #"coursework.ads" 76 0 0#"model" "name:n" "model_trace:3800" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at coursework.ads:76, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Coursework__openairlock__n___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T72s" defined at coursework.ads:80, created in Gnat2Why.Types.Translate_Type *)
module Coursework__openairlock__L71s__T72s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t72s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t72s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t72s__ref =
  { mutable t72s__content "model_trace:" "name:" : t72s }
 
 function t72s__ref___projection 
   (a : t72s__ref) : t72s =
  a.t72s__content
 
 meta "model_projection" function t72s__ref___projection
 
 meta "inline : no" function t72s__ref___projection
 
 val t72s__havoc 
   (x : t72s__ref) : unit
  writes {x}

end

(* Module for defining the constant "n" defined at coursework.ads:82, created in Gnat2Why.Decls.Translate_Constant *)
module Coursework__lockdoor__n
 use import "_gnatprove_standard".Main

 function n #"coursework.ads" 82 0 0#"model" "name:n" "model_trace:3908" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at coursework.ads:82, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Coursework__lockdoor__n___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T74s" defined at coursework.ads:86, created in Gnat2Why.Types.Translate_Type *)
module Coursework__lockdoor__L73s__T74s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t74s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t74s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t74s__ref =
  { mutable t74s__content "model_trace:" "name:" : t74s }
 
 function t74s__ref___projection 
   (a : t74s__ref) : t74s =
  a.t74s__content
 
 meta "model_projection" function t74s__ref___projection
 
 meta "inline : no" function t74s__ref___projection
 
 val t74s__havoc 
   (x : t74s__ref) : unit
  writes {x}

end

(* Module for defining the constant "n" defined at coursework.ads:88, created in Gnat2Why.Decls.Translate_Constant *)
module Coursework__loadtorpedeo__n
 use import "_gnatprove_standard".Main

 function n #"coursework.ads" 88 0 0#"model" "name:n" "model_trace:3992" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at coursework.ads:88, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Coursework__loadtorpedeo__n___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T76s" defined at coursework.ads:94, created in Gnat2Why.Types.Translate_Type *)
module Coursework__loadtorpedeo__L75s__T76s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t76s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t76s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t76s__ref =
  { mutable t76s__content "model_trace:" "name:" : t76s }
 
 function t76s__ref___projection 
   (a : t76s__ref) : t76s =
  a.t76s__content
 
 meta "model_projection" function t76s__ref___projection
 
 meta "inline : no" function t76s__ref___projection
 
 val t76s__havoc 
   (x : t76s__ref) : unit
  writes {x}

end

(* Module for defining the constant "n" defined at coursework.ads:97, created in Gnat2Why.Decls.Translate_Constant *)
module Coursework__firetorpedeo__n
 use import "_gnatprove_standard".Main

 function n #"coursework.ads" 97 0 0#"model" "name:n" "model_trace:4142" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at coursework.ads:97, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Coursework__firetorpedeo__n___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T78s" defined at coursework.ads:101, created in Gnat2Why.Types.Translate_Type *)
module Coursework__firetorpedeo__L77s__T78s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t78s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t78s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t78s__ref =
  { mutable t78s__content "model_trace:" "name:" : t78s }
 
 function t78s__ref___projection 
   (a : t78s__ref) : t78s =
  a.t78s__content
 
 meta "model_projection" function t78s__ref___projection
 
 meta "inline : no" function t78s__ref___projection
 
 val t78s__havoc 
   (x : t78s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS1bP1" defined at coursework.adb:31, created in Gnat2Why.Types.Translate_Type *)
module Coursework__overideoxegen__TS1bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS1bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS1bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS1bP1__ref =
  { mutable tS1bP1__content "model_trace:" "name:" : tS1bP1 }
 
 function tS1bP1__ref___projection 
   (a : tS1bP1__ref) : tS1bP1 =
  a.tS1bP1__content
 
 meta "model_projection" function tS1bP1__ref___projection
 
 meta "inline : no" function tS1bP1__ref___projection
 
 val tS1bP1__havoc 
   (x : tS1bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S1b" defined at coursework.adb:31, created in Gnat2Why.Types.Translate_Type *)
module Coursework__overideoxegen__S1b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Coursework__overideoxegen__TS1bP1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Coursework__overideoxegen__TS1bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s1b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s1b__ref =
  { mutable s1b__content "model_trace:" "name:" : s1b }
 
 function s1b__ref___projection 
   (a : s1b__ref) : s1b =
  a.s1b__content
 
 meta "model_projection" function s1b__ref___projection
 
 meta "inline : no" function s1b__ref___projection
 
 val s1b__havoc 
   (x : s1b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T2b" defined at coursework.adb:35, created in Gnat2Why.Types.Translate_Type *)
module Coursework__overideoxegen__T2b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 function first 
   : int =
  1
 
 function last 
   : int =
  3
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T3b" defined at coursework.adb:38, created in Gnat2Why.Types.Translate_Type *)
module Coursework__overideoxegen__T3b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 function first 
   : int =
  1
 
 function last 
   : int =
  7
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T4b" defined at coursework.adb:41, created in Gnat2Why.Types.Translate_Type *)
module Coursework__overideoxegen__T4b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 function first 
   : int =
  1
 
 function last 
   : int =
  6
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end
(* Module for defining a ref holding the value of variable "diver" defined at coursework.ads:36, created in Gnat2Why.Decls.Translate_Variable *)
module Coursework__diver
 use import "_gnatprove_standard".Main
 use        Coursework__diverecord

 val diver__split_fields #"coursework.ads" 36 0 0#"model_projected" "model_trace:3294" "name:diveR"  : Coursework__diverecord.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "diver" defined at coursework.ads:36, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Coursework__diver___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "torr" defined at coursework.ads:38, created in Gnat2Why.Decls.Translate_Variable *)
module Coursework__torr
 use import "_gnatprove_standard".Main
 use        Coursework__torepedorecord

 val torr__split_fields #"coursework.ads" 38 0 0#"model_projected" "model_trace:3318" "name:torR"  : Coursework__torepedorecord.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "torr" defined at coursework.ads:38, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Coursework__torr___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "sub" defined at coursework.ads:40, created in Gnat2Why.Decls.Translate_Variable *)
module Coursework__sub
 use import "_gnatprove_standard".Main
 use        Coursework__submarine

 val sub__split_fields #"coursework.ads" 40 0 0#"model_projected" "model_trace:3338" "name:sub"  : Coursework__submarine.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "sub" defined at coursework.ads:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Coursework__sub___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool)  =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool)  =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool)  =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool)  =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant "inline" 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool)  =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool)  =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant "inline" 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool)  =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant "inline" 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool)  =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant "inline" 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool)  =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool)  =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool)  =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool)  =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool)  =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool)  =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool)  =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant "inline" 
   (temp___expr_116 : Standard__duration.duration) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_117 : Standard__duration.duration) (temp___skip_top_level_118 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool)  =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool)  =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool)  =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool)  =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool)  =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool)  =
  true

end

(* Module for possibly declaring a logic function for "submergesub" defined at coursework.ads:43, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Coursework__submergesub
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "surfacesub" defined at coursework.ads:49, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Coursework__surfacesub
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "overideoxegen" defined at coursework.ads:54, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Coursework__overideoxegen
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "overidereactor" defined at coursework.ads:58, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Coursework__overidereactor
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "divesub" defined at coursework.ads:63, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Coursework__divesub
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "closeairlock" defined at coursework.ads:71, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Coursework__closeairlock
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "openairlock" defined at coursework.ads:76, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Coursework__openairlock
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "lockdoor" defined at coursework.ads:82, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Coursework__lockdoor
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "loadtorpedeo" defined at coursework.ads:88, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Coursework__loadtorpedeo
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "firetorpedeo" defined at coursework.ads:97, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Coursework__firetorpedeo
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "airlock" defined at coursework.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__airlock___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__airlock

 predicate dynamic_invariant "inline" 
   (temp___expr_160 : int) (temp___is_init_156 : bool) (temp___skip_constant_157 : bool) (temp___do_toplevel_158 : bool) (temp___do_typ_inv_159 : bool)  =
  (if (( temp___is_init_156 \/ (Coursework__airlock.first <= Coursework__airlock.last) )) then (
   (Coursework__airlock.dynamic_property Coursework__airlock.first Coursework__airlock.last temp___expr_160)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_161 : int) (temp___skip_top_level_162 : bool)  =
  true

end

(* Module giving axioms for type "oxegen" defined at coursework.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__oxegen___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__oxegen

 predicate dynamic_invariant "inline" 
   (temp___expr_167 : int) (temp___is_init_163 : bool) (temp___skip_constant_164 : bool) (temp___do_toplevel_165 : bool) (temp___do_typ_inv_166 : bool)  =
  (if (( temp___is_init_163 \/ (Coursework__oxegen.first <= Coursework__oxegen.last) )) then (
   (Coursework__oxegen.dynamic_property Coursework__oxegen.first Coursework__oxegen.last temp___expr_167)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_168 : int) (temp___skip_top_level_169 : bool)  =
  true

end

(* Module giving axioms for type "status" defined at coursework.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__status___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__status

 predicate dynamic_invariant "inline" 
   (temp___expr_174 : int) (temp___is_init_170 : bool) (temp___skip_constant_171 : bool) (temp___do_toplevel_172 : bool) (temp___do_typ_inv_173 : bool)  =
  (if (( temp___is_init_170 \/ (Coursework__status.first <= Coursework__status.last) )) then (
   (Coursework__status.dynamic_property Coursework__status.first Coursework__status.last temp___expr_174)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_175 : int) (temp___skip_top_level_176 : bool)  =
  true

end

(* Module giving axioms for type "reactorheat" defined at coursework.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__reactorheat___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__reactorheat

 predicate dynamic_invariant "inline" 
   (temp___expr_181 : int) (temp___is_init_177 : bool) (temp___skip_constant_178 : bool) (temp___do_toplevel_179 : bool) (temp___do_typ_inv_180 : bool)  =
  (if (( temp___is_init_177 \/ (Coursework__reactorheat.first <= Coursework__reactorheat.last) )) then (
   (Coursework__reactorheat.dynamic_property Coursework__reactorheat.first Coursework__reactorheat.last temp___expr_181)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_182 : int) (temp___skip_top_level_183 : bool)  =
  true

end

(* Module giving axioms for type "TairarrayD1" defined at coursework.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__TairarrayD1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TairarrayB" defined at coursework.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__TairarrayB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "airarray" defined at coursework.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__airarray___axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock

 predicate dynamic_invariant "inline" 
   (temp___expr_188 : Array__Int__Coursework__airlock.map) (temp___is_init_184 : bool) (temp___skip_constant_185 : bool) (temp___do_toplevel_186 : bool) (temp___do_typ_inv_187 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_190 : Array__Int__Coursework__airlock.map) (temp___skip_top_level_191 : bool)  =
  true

end

(* Module giving axioms for type "diving" defined at coursework.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__diving___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__diving

 predicate dynamic_invariant "inline" 
   (temp___expr_198 : int) (temp___is_init_194 : bool) (temp___skip_constant_195 : bool) (temp___do_toplevel_196 : bool) (temp___do_typ_inv_197 : bool)  =
  (if (( temp___is_init_194 \/ (Coursework__diving.first <= Coursework__diving.last) )) then (
   (Coursework__diving.dynamic_property Coursework__diving.first Coursework__diving.last temp___expr_198)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_199 : int) (temp___skip_top_level_200 : bool)  =
  true

end

(* Module giving axioms for type "doorlocked" defined at coursework.ads:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__doorlocked___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__doorlocked

 predicate dynamic_invariant "inline" 
   (temp___expr_205 : int) (temp___is_init_201 : bool) (temp___skip_constant_202 : bool) (temp___do_toplevel_203 : bool) (temp___do_typ_inv_204 : bool)  =
  (if (( temp___is_init_201 \/ (Coursework__doorlocked.first <= Coursework__doorlocked.last) )) then (
   (Coursework__doorlocked.dynamic_property Coursework__doorlocked.first Coursework__doorlocked.last temp___expr_205)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_206 : int) (temp___skip_top_level_207 : bool)  =
  true

end

(* Module giving axioms for type "isloaded" defined at coursework.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__isloaded___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__isloaded

 predicate dynamic_invariant "inline" 
   (temp___expr_212 : int) (temp___is_init_208 : bool) (temp___skip_constant_209 : bool) (temp___do_toplevel_210 : bool) (temp___do_typ_inv_211 : bool)  =
  (if (( temp___is_init_208 \/ (Coursework__isloaded.first <= Coursework__isloaded.last) )) then (
   (Coursework__isloaded.dynamic_property Coursework__isloaded.first Coursework__isloaded.last temp___expr_212)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_213 : int) (temp___skip_top_level_214 : bool)  =
  true

end

(* Module giving axioms for type "TtorarrayD1" defined at coursework.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__TtorarrayD1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TtorarrayB" defined at coursework.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__TtorarrayB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "torarray" defined at coursework.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__torarray___axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded

 predicate dynamic_invariant "inline" 
   (temp___expr_219 : Array__Int__Coursework__isloaded.map) (temp___is_init_215 : bool) (temp___skip_constant_216 : bool) (temp___do_toplevel_217 : bool) (temp___do_typ_inv_218 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_221 : Array__Int__Coursework__isloaded.map) (temp___skip_top_level_222 : bool)  =
  true

end

(* Module giving axioms for type "diverecord" defined at coursework.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__diverecord___axiom
 use import "_gnatprove_standard".Main
 use        Coursework__diverecord

 predicate dynamic_invariant "inline" 
   (temp___expr_229 : Coursework__diverecord.diverecord) (temp___is_init_225 : bool) (temp___skip_constant_226 : bool) (temp___do_toplevel_227 : bool) (temp___do_typ_inv_228 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_230 : Coursework__diverecord.diverecord) (temp___skip_top_level_231 : bool)  =
  true

end

(* Module giving axioms for type "torepedorecord" defined at coursework.ads:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__torepedorecord___axiom
 use import "_gnatprove_standard".Main
 use        Coursework__torepedorecord

 predicate dynamic_invariant "inline" 
   (temp___expr_240 : Coursework__torepedorecord.torepedorecord) (temp___is_init_236 : bool) (temp___skip_constant_237 : bool) (temp___do_toplevel_238 : bool) (temp___do_typ_inv_239 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_242 : Coursework__torepedorecord.torepedorecord) (temp___skip_top_level_243 : bool)  =
  true

end

(* Module giving axioms for type "submarine" defined at coursework.ads:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__submarine___axiom
 use import "_gnatprove_standard".Main
 use        Coursework__submarine

 predicate dynamic_invariant "inline" 
   (temp___expr_252 : Coursework__submarine.submarine) (temp___is_init_248 : bool) (temp___skip_constant_249 : bool) (temp___do_toplevel_250 : bool) (temp___do_typ_inv_251 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_255 : Coursework__submarine.submarine) (temp___skip_top_level_256 : bool)  =
  true

end

(* Module giving axioms for type "T5s" defined at coursework.ads:38, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__T5s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T6s" defined at coursework.ads:38, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__T6s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T7s" defined at coursework.ads:40, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__T7s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T8s" defined at coursework.ads:40, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__T8s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T70s" defined at coursework.ads:74, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__closeairlock__L69s__T70s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T72s" defined at coursework.ads:80, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__openairlock__L71s__T72s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T74s" defined at coursework.ads:86, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__lockdoor__L73s__T74s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T76s" defined at coursework.ads:94, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__loadtorpedeo__L75s__T76s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T78s" defined at coursework.ads:101, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__firetorpedeo__L77s__T78s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TS1bP1" defined at coursework.adb:31, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__overideoxegen__TS1bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S1b" defined at coursework.adb:31, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__overideoxegen__S1b___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Coursework__overideoxegen__d
 use        Coursework__overideoxegen__S1b

 predicate dynamic_invariant "inline" 
   (temp___expr_361 : Coursework__overideoxegen__S1b.s1b) (temp___is_init_357 : bool) (temp___skip_constant_358 : bool) (temp___do_toplevel_359 : bool) (temp___do_typ_inv_360 : bool)  =
  (if (temp___skip_constant_358) then (
   true) else (
   ( (Coursework__overideoxegen__S1b.dynamic_property (Standard__string.first Coursework__overideoxegen__d.d) (Standard__string.last Coursework__overideoxegen__d.d) (Coursework__overideoxegen__S1b.first temp___expr_361) (Coursework__overideoxegen__S1b.last temp___expr_361)) /\ ( ((Coursework__overideoxegen__S1b.first temp___expr_361) = (Standard__string.first Coursework__overideoxegen__d.d)) /\ ((Coursework__overideoxegen__S1b.last temp___expr_361) = (Standard__string.last Coursework__overideoxegen__d.d)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_363 : Coursework__overideoxegen__S1b.s1b) (temp___skip_top_level_364 : bool)  =
  true

end

(* Module giving axioms for type "T2b" defined at coursework.adb:35, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__overideoxegen__T2b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T3b" defined at coursework.adb:38, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__overideoxegen__T3b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T4b" defined at coursework.adb:41, created in Gnat2Why.Types.Generate_Type_Completion *)
module Coursework__overideoxegen__T4b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for declaring an abstract function for the aggregate at coursework.ads:40, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_370
 use import "_gnatprove_standard".Main
 use        Array__Int__Coursework__airlock

 function temp_____aggregate_def_370 
   (temp___372 : int) (temp___373 : int) : Array__Int__Coursework__airlock.map

end

(* Module for declaring an abstract function for the aggregate at coursework.ads:38, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_375
 use import "_gnatprove_standard".Main
 use        Array__Int__Coursework__isloaded

 function temp_____aggregate_def_375 
   (temp___377 : int) (temp___378 : int) (temp___379 : int) (temp___380 : int) : Array__Int__Coursework__isloaded.map

end

(* Module for defining a value for string literal  defined at coursework.adb:35, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_422
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 function temp___String_Literal_422 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_422__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_422 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_422 __void_param) 1)) = 76) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_422 __void_param) 2)) = 111) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_422 __void_param) 3)) = 119) ))

end

(* Module for defining a value for string literal  defined at coursework.adb:38, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_426
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 function temp___String_Literal_426 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_426__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_426 __void_param)].
   ( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_426 __void_param) 1)) = 80) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_426 __void_param) 2)) = 114) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_426 __void_param) 3)) = 101) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_426 __void_param) 4)) = 115) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_426 __void_param) 5)) = 101) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_426 __void_param) 6)) = 110) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_426 __void_param) 7)) = 116) ))

end

(* Module for defining a value for string literal  defined at coursework.adb:41, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_430
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 function temp___String_Literal_430 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_430__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_430 __void_param)].
   ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_430 __void_param) 1)) = 65) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_430 __void_param) 2)) = 98) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_430 __void_param) 3)) = 115) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_430 __void_param) 4)) = 101) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_430 __void_param) 5)) = 110) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_430 __void_param) 6)) = 116) ))

end
(* Module for declaring a program function (and possibly an axiom) for "submergesub" defined at coursework.ads:43, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Coursework__submergesub___axiom
 use        Coursework__sub
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Coursework__oxegen
 use        Coursework__oxegen__rep
 use        Coursework__status
 use        Coursework__status__rep
 use        Coursework__reactorheat
 use        Coursework__reactorheat__rep
 use        Array__Int__Coursework__airlock
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__sub
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock

 val submergesub 
   (__void_param : unit) : unit
  requires {  ( ((Coursework__status__rep.to_rep (Coursework__submarine.rec__coursework__submarine__stat (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 1) /\ ( ((Coursework__airlock__rep.to_rep (let temp___274 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___274 1)))
  ) = 2) /\ ( ((Coursework__airlock__rep.to_rep (let temp___273 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___273 2)))
  ) = 2) /\ ( ((Coursework__oxegen__rep.to_rep (Coursework__submarine.rec__coursework__submarine__oxn (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) <> 1) /\ ((Coursework__reactorheat__rep.to_rep (Coursework__submarine.rec__coursework__submarine__reac (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) ) ) ) ) }
  ensures {  ( ( ((Coursework__status__rep.to_rep (Coursework__submarine.rec__coursework__submarine__stat (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) /\ ( ((Coursework__airlock__rep.to_rep (let temp___276 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___276 1)))
  ) = 2) /\ ((Coursework__airlock__rep.to_rep (let temp___275 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___275 2)))
  ) = 2) ) ) /\ (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True True True True) ) }
  reads {Coursework__sub.sub__split_fields}
  writes {Coursework__sub.sub__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "surfacesub" defined at coursework.ads:49, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Coursework__surfacesub___axiom
 use        Coursework__sub
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Coursework__status
 use        Coursework__status__rep
 use        Array__Int__Coursework__airlock
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__sub
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock

 val surfacesub 
   (__void_param : unit) : unit
  requires {  ( ((Coursework__status__rep.to_rep (Coursework__submarine.rec__coursework__submarine__stat (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) /\ ( ((Coursework__airlock__rep.to_rep (let temp___282 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___282 1)))
  ) = 2) /\ ((Coursework__airlock__rep.to_rep (let temp___281 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___281 2)))
  ) = 2) ) ) }
  ensures {  ( ( ((Coursework__status__rep.to_rep (Coursework__submarine.rec__coursework__submarine__stat (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 1) /\ ( ((Coursework__airlock__rep.to_rep (let temp___284 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___284 1)))
  ) = 2) /\ ((Coursework__airlock__rep.to_rep (let temp___283 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___283 2)))
  ) = 2) ) ) /\ (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True True True True) ) }
  reads {Coursework__sub.sub__split_fields}
  writes {Coursework__sub.sub__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "overideoxegen" defined at coursework.ads:54, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Coursework__overideoxegen___axiom
 use        Coursework__sub
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Array__Int__Coursework__airlock
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__sub
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock

 val overideoxegen 
   (d : Standard__string.string) : unit
  requires {  ( ((Coursework__airlock__rep.to_rep (let temp___290 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___290 1)))
  ) = 2) /\ ((Coursework__airlock__rep.to_rep (let temp___289 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___289 2)))
  ) = 2) ) }
  ensures {  (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True True True True) }
  reads {Coursework__sub.sub__split_fields}
  writes {Coursework__sub.sub__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "overidereactor" defined at coursework.ads:58, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Coursework__overidereactor___axiom
 use        Coursework__sub
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Coursework__status
 use        Coursework__status__rep
 use        Array__Int__Coursework__airlock
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__sub
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock

 val overidereactor 
   (__void_param : unit) : unit
  requires {  ( ((Coursework__status__rep.to_rep (Coursework__submarine.rec__coursework__submarine__stat (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) /\ ( ((Coursework__airlock__rep.to_rep (let temp___297 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___297 1)))
  ) = 2) /\ ((Coursework__airlock__rep.to_rep (let temp___296 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___296 2)))
  ) = 2) ) ) }
  ensures {  (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True True True True) }
  reads {Coursework__sub.sub__split_fields}
  writes {Coursework__sub.sub__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "divesub" defined at coursework.ads:63, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Coursework__divesub___axiom
 use        Coursework__sub
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Coursework__oxegen
 use        Coursework__oxegen__rep
 use        Coursework__status
 use        Coursework__status__rep
 use        Coursework__reactorheat
 use        Coursework__reactorheat__rep
 use        Array__Int__Coursework__airlock
 use        Coursework__diverecord
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__sub
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock

 val divesub 
   (__void_param : unit) : unit
  requires {  ( ((Coursework__status__rep.to_rep (Coursework__submarine.rec__coursework__submarine__stat (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) /\ ( ((Coursework__oxegen__rep.to_rep (Coursework__submarine.rec__coursework__submarine__oxn (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) /\ ( ((Coursework__airlock__rep.to_rep (let temp___303 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___303 1)))
  ) = 2) /\ ( ((Coursework__airlock__rep.to_rep (let temp___302 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___302 2)))
  ) = 2) /\ ( ((Standard__integer__rep.to_rep (Coursework__diverecord.rec__coursework__diverecord__currentdepth (Coursework__diverecord.__split_fields (Coursework__submarine.rec__coursework__submarine__dive (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))))) < (Standard__integer__rep.to_rep (Coursework__diverecord.rec__coursework__diverecord__safedivedepth (Coursework__diverecord.__split_fields (Coursework__submarine.rec__coursework__submarine__dive (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) /\ ( ((Coursework__reactorheat__rep.to_rep (Coursework__submarine.rec__coursework__submarine__reac (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) /\ ( ((Standard__integer__rep.to_rep (Coursework__diverecord.rec__coursework__diverecord__currentdepth (Coursework__diverecord.__split_fields (Coursework__submarine.rec__coursework__submarine__dive (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))))) < 2147483547) /\ (((Standard__integer__rep.to_rep (Coursework__diverecord.rec__coursework__diverecord__currentdepth (Coursework__diverecord.__split_fields (Coursework__submarine.rec__coursework__submarine__dive (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))))) + 100) <= (Standard__integer__rep.to_rep (Coursework__diverecord.rec__coursework__diverecord__maxdepth (Coursework__diverecord.__split_fields (Coursework__submarine.rec__coursework__submarine__dive (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) ) ) ) ) ) ) ) }
  ensures {  ( ( ((Standard__integer__rep.to_rep (Coursework__diverecord.rec__coursework__diverecord__currentdepth (Coursework__diverecord.__split_fields (Coursework__submarine.rec__coursework__submarine__dive (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))))) > (Standard__integer__rep.to_rep (old (Coursework__diverecord.rec__coursework__diverecord__currentdepth (Coursework__diverecord.__split_fields (Coursework__submarine.rec__coursework__submarine__dive (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) ))) /\ ((Standard__integer__rep.to_rep (Coursework__diverecord.rec__coursework__diverecord__currentdepth (Coursework__diverecord.__split_fields (Coursework__submarine.rec__coursework__submarine__dive (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))))) <= (Standard__integer__rep.to_rep (Coursework__diverecord.rec__coursework__diverecord__maxdepth (Coursework__diverecord.__split_fields (Coursework__submarine.rec__coursework__submarine__dive (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) ) /\ (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True True True True) ) }
  reads {Coursework__sub.sub__split_fields}
  writes {Coursework__sub.sub__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "closeairlock" defined at coursework.ads:71, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Coursework__closeairlock___axiom
 use        Coursework__sub
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Array__Int__Coursework__airlock
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__sub
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock

 val closeairlock 
   (n : int) : unit
  requires {  ( ( (n = 1) \/ (n = 2) ) /\ ((Coursework__airlock__rep.to_rep (let temp___308 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___308 n)))
  ) = 0) ) }
  ensures {  ( ( ((Coursework__airlock__rep.to_rep (let temp___311 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___311 n)))
  ) = 1) /\ (forall i   "model" "model_trace:3764" "name:I"  : int.
   ( ( (1 <= i) /\ (i <= 2) ) -> (if ((i <> n)) then (
    ((Coursework__airlock__rep.to_rep (let temp___309 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
     (Array__Int__Coursework__airlock.get temp___309 i)))
    ) = (Coursework__airlock__rep.to_rep (let temp___310 = (old (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) ) in (
     (Array__Int__Coursework__airlock.get temp___310 i)))
    ))) else (
    true)) )) ) /\ (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True True True True) ) }
  reads {Coursework__sub.sub__split_fields}
  writes {Coursework__sub.sub__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "openairlock" defined at coursework.ads:76, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Coursework__openairlock___axiom
 use        Coursework__sub
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Array__Int__Coursework__airlock
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__sub
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock

 val openairlock 
   (n : int) : unit
  requires {  ( ( (n = 1) \/ (n = 2) ) /\ ( ( ((Coursework__airlock__rep.to_rep (let temp___318 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___318 1)))
  ) = 1) \/ ((Coursework__airlock__rep.to_rep (let temp___319 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___319 1)))
  ) = 2) ) /\ ( ((Coursework__airlock__rep.to_rep (let temp___316 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___316 2)))
  ) = 1) \/ ((Coursework__airlock__rep.to_rep (let temp___317 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___317 2)))
  ) = 2) ) ) ) }
  ensures {  ( ( ((Coursework__airlock__rep.to_rep (let temp___322 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___322 n)))
  ) = 0) /\ (forall i   "model" "name:I" "model_trace:3872"  : int.
   ( ( (1 <= i) /\ (i <= 2) ) -> (if ((i <> n)) then (
    ((Coursework__airlock__rep.to_rep (let temp___320 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
     (Array__Int__Coursework__airlock.get temp___320 i)))
    ) = (Coursework__airlock__rep.to_rep (let temp___321 = (old (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) ) in (
     (Array__Int__Coursework__airlock.get temp___321 i)))
    ))) else (
    true)) )) ) /\ (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True True True True) ) }
  reads {Coursework__sub.sub__split_fields}
  writes {Coursework__sub.sub__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "lockdoor" defined at coursework.ads:82, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Coursework__lockdoor___axiom
 use        Coursework__sub
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Array__Int__Coursework__airlock
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__sub
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock

 val lockdoor 
   (n : int) : unit
  requires {  ( ( (n = 1) \/ (n = 2) ) /\ ((Coursework__airlock__rep.to_rep (let temp___327 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___327 n)))
  ) = 1) ) }
  ensures {  ( ( ((Coursework__airlock__rep.to_rep (let temp___330 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___330 n)))
  ) = 2) /\ (forall i   "model" "name:I" "model_trace:3956"  : int.
   ( ( (1 <= i) /\ (i <= 2) ) -> (if ((i <> n)) then (
    ((Coursework__airlock__rep.to_rep (let temp___328 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
     (Array__Int__Coursework__airlock.get temp___328 i)))
    ) = (Coursework__airlock__rep.to_rep (let temp___329 = (old (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) ) in (
     (Array__Int__Coursework__airlock.get temp___329 i)))
    ))) else (
    true)) )) ) /\ (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True True True True) ) }
  reads {Coursework__sub.sub__split_fields}
  writes {Coursework__sub.sub__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "loadtorpedeo" defined at coursework.ads:88, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Coursework__loadtorpedeo___axiom
 use        Coursework__sub
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Array__Int__Coursework__airlock
 use        Coursework__isloaded
 use        Coursework__isloaded__rep
 use        Array__Int__Coursework__isloaded
 use        Coursework__torepedorecord
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__sub
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded

 val loadtorpedeo 
   (n : int) : unit
  requires {  ( (n >= 1) /\ ( (n <= 4) /\ ( ((Coursework__airlock__rep.to_rep (let temp___337 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___337 1)))
  ) = 2) /\ ( ((Coursework__airlock__rep.to_rep (let temp___336 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___336 2)))
  ) = 2) /\ ( ((Coursework__isloaded__rep.to_rep (let temp___335 = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__isloaded.get temp___335 n)))
  ) = 0) /\ ((Standard__integer__rep.to_rep (Coursework__torepedorecord.rec__coursework__torepedorecord__numberoftorepedos (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))))) > 0) ) ) ) ) ) }
  ensures {  ( ( ((Coursework__isloaded__rep.to_rep (let temp___342 = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__isloaded.get temp___342 n)))
  ) = 1) /\ ( ((Standard__integer__rep.to_rep (Coursework__torepedorecord.rec__coursework__torepedorecord__numberoftorepedos (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))))) < (Standard__integer__rep.to_rep (old (Coursework__torepedorecord.rec__coursework__torepedorecord__numberoftorepedos (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) ))) /\ ( (forall i   "model" "name:I" "model_trace:4082"  : int.
   ( ( (1 <= i) /\ (i <= 4) ) -> (if ((i <> n)) then (
    ((Coursework__isloaded__rep.to_rep (let temp___340 = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
     (Array__Int__Coursework__isloaded.get temp___340 i)))
    ) = (Coursework__isloaded__rep.to_rep (let temp___341 = (old (Coursework__torepedorecord.rec__coursework__torepedorecord__slots (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) ) in (
     (Array__Int__Coursework__isloaded.get temp___341 i)))
    ))) else (
    true)) )) /\ ((Coursework__isloaded__rep.to_rep (let temp___338 = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__isloaded.get temp___338 n)))
  ) <> (Coursework__isloaded__rep.to_rep (let temp___339 = (old (Coursework__torepedorecord.rec__coursework__torepedorecord__slots (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) ) in (
   (Array__Int__Coursework__isloaded.get temp___339 n)))
  )) ) ) ) /\ (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True True True True) ) }
  reads {Coursework__sub.sub__split_fields}
  writes {Coursework__sub.sub__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "firetorpedeo" defined at coursework.ads:97, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Coursework__firetorpedeo___axiom
 use        Coursework__sub
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Coursework__status
 use        Coursework__status__rep
 use        Array__Int__Coursework__airlock
 use        Coursework__isloaded
 use        Coursework__isloaded__rep
 use        Array__Int__Coursework__isloaded
 use        Coursework__torepedorecord
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__sub
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded

 val firetorpedeo 
   (n : int) : unit
  requires {  ( (n >= 1) /\ ( (n <= 4) /\ ( ((Coursework__airlock__rep.to_rep (let temp___349 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___349 1)))
  ) = 2) /\ ( ((Coursework__airlock__rep.to_rep (let temp___348 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___348 2)))
  ) = 2) /\ ( ((Coursework__isloaded__rep.to_rep (let temp___347 = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__isloaded.get temp___347 n)))
  ) = 1) /\ ((Coursework__status__rep.to_rep (Coursework__submarine.rec__coursework__submarine__stat (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) ) ) ) ) ) }
  ensures {  ( ( ((Coursework__isloaded__rep.to_rep (let temp___352 = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__isloaded.get temp___352 n)))
  ) = 0) /\ (forall i   "model" "name:I" "model_trace:4216"  : int.
   ( ( (1 <= i) /\ (i <= 4) ) -> (if ((i <> n)) then (
    ((Coursework__isloaded__rep.to_rep (let temp___350 = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
     (Array__Int__Coursework__isloaded.get temp___350 i)))
    ) = (Coursework__isloaded__rep.to_rep (let temp___351 = (old (Coursework__torepedorecord.rec__coursework__torepedorecord__slots (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) ) in (
     (Array__Int__Coursework__isloaded.get temp___351 i)))
    ))) else (
    true)) )) ) /\ (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True True True True) ) }
  reads {Coursework__sub.sub__split_fields}
  writes {Coursework__sub.sub__split_fields}

end

(* Module for defining the value of the aggregate at coursework.ads:40, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_370___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__airlock
 use        Coursework__airlock___axiom
 use        Coursework__airlock__rep
 use        Array__Int__Coursework__airlock
 use        Temp_____aggregate_def_370
 use        Array__Int__Coursework__airlock

 axiom def_axiom :
  (forall temp___372   temp___373   : int.
   (let temp___371 = (Temp_____aggregate_def_370.temp_____aggregate_def_370 temp___372 temp___373) in (
    (if (( (Coursework__airlock___axiom.dynamic_invariant temp___372 True True True True) /\ (Coursework__airlock___axiom.dynamic_invariant temp___373 True True True True) )) then (
     ( ((Coursework__airlock__rep.to_rep (Array__Int__Coursework__airlock.get temp___371 1)) = temp___372) /\ ((Coursework__airlock__rep.to_rep (Array__Int__Coursework__airlock.get temp___371 2)) = temp___373) )) else true)))
  )

end

(* Module for defining the value of the aggregate at coursework.ads:38, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_375___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__isloaded
 use        Coursework__isloaded___axiom
 use        Coursework__isloaded__rep
 use        Array__Int__Coursework__isloaded
 use        Temp_____aggregate_def_375
 use        Array__Int__Coursework__isloaded

 axiom def_axiom :
  (forall temp___377   temp___378   temp___379   temp___380   : int.
   (let temp___376 = (Temp_____aggregate_def_375.temp_____aggregate_def_375 temp___377 temp___378 temp___379 temp___380) in (
    (if (( ( ( (Coursework__isloaded___axiom.dynamic_invariant temp___377 True True True True) /\ (Coursework__isloaded___axiom.dynamic_invariant temp___378 True True True True) ) /\ (Coursework__isloaded___axiom.dynamic_invariant temp___379 True True True True) ) /\ (Coursework__isloaded___axiom.dynamic_invariant temp___380 True True True True) )) then (
     ( ( ( ((Coursework__isloaded__rep.to_rep (Array__Int__Coursework__isloaded.get temp___376 1)) = temp___377) /\ ((Coursework__isloaded__rep.to_rep (Array__Int__Coursework__isloaded.get temp___376 2)) = temp___378) ) /\ ((Coursework__isloaded__rep.to_rep (Array__Int__Coursework__isloaded.get temp___376 3)) = temp___379) ) /\ ((Coursework__isloaded__rep.to_rep (Array__Int__Coursework__isloaded.get temp___376 4)) = temp___380) )) else true)))
  )

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "coursework" defined at coursework.ads:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Coursework__package_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Coursework__oxegen
 use        Coursework__oxegen__rep
 use        Coursework__status
 use        Coursework__status__rep
 use        Coursework__reactorheat
 use        Coursework__reactorheat__rep
 use        Coursework__diving
 use        Coursework__diving__rep
 use        Coursework__diverecord
 use        Coursework__diverecord___axiom
 use        Coursework__torepedorecord
 use        Coursework__torepedorecord___axiom
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__diver
 use        Coursework__torr
 use        Coursework__sub
 use        Array__Int__Coursework__airlock
 use        Temp_____aggregate_def_370
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__isloaded
 use        Temp_____aggregate_def_375
 use        Array__Int__Coursework__isloaded
 use        Standard__integer___axiom
 use        Coursework__airlock___axiom
 use        Coursework__oxegen___axiom
 use        Coursework__status___axiom
 use        Coursework__reactorheat___axiom
 use        Coursework__airarray___axiom
 use        Coursework__diving___axiom
 use        Coursework__isloaded___axiom
 use        Coursework__torarray___axiom
 use        Coursework__diverecord___axiom
 use        Coursework__torepedorecord___axiom
 use        Coursework__submarine___axiom
 use        Coursework__diver___axiom
 use        Coursework__torr___axiom
 use        Coursework__sub___axiom
 use        Temp_____aggregate_def_375___axiom
 use        Temp_____aggregate_def_370___axiom

 let def #"coursework.ads" 1 0 0#"GP_Subp:coursework.ads:1" "W:diverges:N" 
   (__void_param : unit)
  requires { #"coursework.ads" 1 0 0# true }
  ensures { #"coursework.ads" 1 0 0# true }
   =
  ( (#"coursework.ads" 1 0 0# ());
  (#"coursework.ads" 3 0 0# ());
  (#"coursework.ads" 4 0 0# ());
  (#"coursework.ads" 5 0 0# ());
  (#"coursework.ads" 6 0 0# ());
  (#"coursework.ads" 7 0 0# ());
  (#"coursework.ads" 8 0 0# ());
  (#"coursework.ads" 9 0 0# ());
  (#"coursework.ads" 10 0 0# ());
  (#"coursework.ads" 11 0 0# ());
  (#"coursework.ads" 13 0 0# ());
  (#"coursework.ads" 15 0 0# ());
  (#"coursework.ads" 22 0 0# ());
  (#"coursework.ads" 27 0 0# ());
  (#"coursework.ads" 36 0 0# ());
  (#"coursework.ads" 36 0 0# ());
  (#"coursework.ads" 36 0 0# ( (let coursework__diver__assume = { Coursework__diverecord.__split_fields = { Coursework__diverecord.rec__coursework__diverecord__isdiving = (Coursework__diving__rep.of_rep(1)); Coursework__diverecord.rec__coursework__diverecord__maxdepth = ( 1000 : Standard__integer.integer ); Coursework__diverecord.rec__coursework__diverecord__currentdepth = ( 0 : Standard__integer.integer ); Coursework__diverecord.rec__coursework__diverecord__safedivedepth = ( 900 : Standard__integer.integer ) } } in (
   #"coursework.ads" 36 0 0# Coursework__diver.diver__split_fields.Coursework__diverecord.__split_fields__content <- ( (Coursework__diverecord.__split_fields(coursework__diver__assume)) )))
  ;
  #"coursework.ads" 36 0 0# assume { #"coursework.ads" 36 0 0# (Coursework__diverecord___axiom.dynamic_invariant { Coursework__diverecord.__split_fields = Coursework__diver.diver__split_fields.Coursework__diverecord.__split_fields__content } True False True True) } ));
  (#"coursework.ads" 38 0 0# ());
  (#"coursework.ads" 38 0 0# ());
  (#"coursework.ads" 38 0 0# ());
  (#"coursework.ads" 38 0 0# ());
  (#"coursework.ads" 38 0 0# ( (let coursework__torr__assume = { Coursework__torepedorecord.__split_fields = { Coursework__torepedorecord.rec__coursework__torepedorecord__numberoftorepedos = ( 15 : Standard__integer.integer ); Coursework__torepedorecord.rec__coursework__torepedorecord__slots = (Temp_____aggregate_def_375.temp_____aggregate_def_375(0) (1) (1) (0)) } } in (
   #"coursework.ads" 38 0 0# Coursework__torr.torr__split_fields.Coursework__torepedorecord.__split_fields__content <- ( (Coursework__torepedorecord.__split_fields(coursework__torr__assume)) )))
  ;
  #"coursework.ads" 38 0 0# assume { #"coursework.ads" 38 0 0# (Coursework__torepedorecord___axiom.dynamic_invariant { Coursework__torepedorecord.__split_fields = Coursework__torr.torr__split_fields.Coursework__torepedorecord.__split_fields__content } True False True True) } ));
  (#"coursework.ads" 40 0 0# ());
  (#"coursework.ads" 40 0 0# ());
  (#"coursework.ads" 40 0 0# ());
  (#"coursework.ads" 40 0 0# ());
  (#"coursework.ads" 40 0 0# ());
  (#"coursework.ads" 40 0 0# ());
  (#"coursework.ads" 40 0 0# ());
  (#"coursework.ads" 41 0 0# ());
  (#"coursework.ads" 41 0 0# ());
  (#"coursework.ads" 40 0 0# ( (let coursework__sub__assume = { Coursework__submarine.__split_fields = { Coursework__submarine.rec__coursework__submarine__air = (Temp_____aggregate_def_370.temp_____aggregate_def_370(2) (2)); Coursework__submarine.rec__coursework__submarine__oxn = (Coursework__oxegen__rep.of_rep(0)); Coursework__submarine.rec__coursework__submarine__stat = (Coursework__status__rep.of_rep(1)); Coursework__submarine.rec__coursework__submarine__reac = (Coursework__reactorheat__rep.of_rep(0)); Coursework__submarine.rec__coursework__submarine__dive = { Coursework__diverecord.__split_fields = Coursework__diver.diver__split_fields.Coursework__diverecord.__split_fields__content }; Coursework__submarine.rec__coursework__submarine__tor = { Coursework__torepedorecord.__split_fields = Coursework__torr.torr__split_fields.Coursework__torepedorecord.__split_fields__content } } } in (
   #"coursework.ads" 40 0 0# Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content <- ( (Coursework__submarine.__split_fields(coursework__sub__assume)) )))
  ;
  #"coursework.ads" 40 0 0# assume { #"coursework.ads" 40 0 0# (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True False True True) } ));
  (#"coursework.ads" 43 0 0# ());
  (#"coursework.ads" 47 0 0# ());
  (#"coursework.ads" 47 0 0# ());
  (#"coursework.ads" 47 0 0# ());
  (#"coursework.ads" 45 0 0# ());
  (#"coursework.ads" 45 0 0# ());
  (#"coursework.ads" 45 0 0# ());
  (#"coursework.ads" 46 0 0# ());
  (#"coursework.ads" 45 0 0# ());
  (#"coursework.ads" 44 0 0# ());
  (#"coursework.ads" 49 0 0# ());
  (#"coursework.ads" 52 0 0# ());
  (#"coursework.ads" 52 0 0# ());
  (#"coursework.ads" 52 0 0# ());
  (#"coursework.ads" 51 0 0# ());
  (#"coursework.ads" 51 0 0# ());
  (#"coursework.ads" 51 0 0# ());
  (#"coursework.ads" 50 0 0# ());
  (#"coursework.ads" 54 0 0# ());
  (#"coursework.ads" 56 0 0# ());
  (#"coursework.ads" 56 0 0# ());
  (#"coursework.ads" 55 0 0# ());
  (#"coursework.ads" 58 0 0# ());
  (#"coursework.ads" 60 0 0# ());
  (#"coursework.ads" 60 0 0# ());
  (#"coursework.ads" 60 0 0# ());
  (#"coursework.ads" 59 0 0# ());
  (#"coursework.ads" 63 0 0# ());
  (#"coursework.ads" 69 0 0# ());
  (#"coursework.ads" 69 0 0# ());
  (#"coursework.ads" 65 0 0# ());
  (#"coursework.ads" 65 0 0# ());
  (#"coursework.ads" 65 0 0# ());
  (#"coursework.ads" 66 0 0# ());
  (#"coursework.ads" 66 0 0# ());
  (#"coursework.ads" 67 0 0# ());
  (#"coursework.ads" 67 0 0# ());
  (#"coursework.ads" 65 0 0# ());
  (#"coursework.ads" 64 0 0# ());
  (#"coursework.ads" 71 0 0# ());
  (#"coursework.ads" 74 0 0# ());
  (#"coursework.ads" 74 0 0# ());
  (#"coursework.ads" 73 0 0# ());
  (#"coursework.ads" 73 0 0# ());
  (#"coursework.ads" 72 0 0# ());
  (#"coursework.ads" 76 0 0# ());
  (#"coursework.ads" 80 0 0# ());
  (#"coursework.ads" 80 0 0# ());
  (#"coursework.ads" 78 0 0# ());
  (#"coursework.ads" 78 0 0# ());
  (#"coursework.ads" 78 0 0# ());
  (#"coursework.ads" 77 0 0# ());
  (#"coursework.ads" 82 0 0# ());
  (#"coursework.ads" 85 0 0# ());
  (#"coursework.ads" 85 0 0# ());
  (#"coursework.ads" 84 0 0# ());
  (#"coursework.ads" 84 0 0# ());
  (#"coursework.ads" 83 0 0# ());
  (#"coursework.ads" 88 0 0# ());
  (#"coursework.ads" 92 0 0# ());
  (#"coursework.ads" 93 0 0# ());
  (#"coursework.ads" 94 0 0# ());
  (#"coursework.ads" 92 0 0# ());
  (#"coursework.ads" 90 0 0# ());
  (#"coursework.ads" 90 0 0# ());
  (#"coursework.ads" 90 0 0# ());
  (#"coursework.ads" 90 0 0# ());
  (#"coursework.ads" 91 0 0# ());
  (#"coursework.ads" 90 0 0# ());
  (#"coursework.ads" 89 0 0# ());
  (#"coursework.ads" 97 0 0# ());
  (#"coursework.ads" 101 0 0# ());
  (#"coursework.ads" 101 0 0# ());
  (#"coursework.ads" 99 0 0# ());
  (#"coursework.ads" 99 0 0# ());
  (#"coursework.ads" 99 0 0# ());
  (#"coursework.ads" 99 0 0# ());
  (#"coursework.ads" 100 0 0# ());
  (#"coursework.ads" 99 0 0# ());
  (#"coursework.ads" 98 0 0# ());
  (#"coursework.ads" 98 0 0# ());
  (#"coursework.adb" 1 0 0# ());
  (#"coursework.adb" 4 0 0# ());
  (#"coursework.adb" 13 0 0# ());
  (#"coursework.adb" 22 0 0# ());
  (#"coursework.adb" 31 0 0# ());
  (#"coursework.adb" 49 0 0# ());
  (#"coursework.adb" 59 0 0# ());
  (#"coursework.adb" 67 0 0# ());
  (#"coursework.adb" 74 0 0# ());
  (#"coursework.adb" 81 0 0# ());
  (#"coursework.adb" 90 0 0# ());
  ( "GP_Sloc:coursework.adb:101:1" (#"coursework.adb" 101 0 0# ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "submergesub" defined at coursework.ads:43, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Coursework__submergesub__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Coursework__oxegen
 use        Coursework__oxegen__rep
 use        Coursework__status
 use        Coursework__status__rep
 use        Coursework__reactorheat
 use        Coursework__reactorheat__rep
 use        Array__Int__Coursework__airlock
 use        Coursework__diverecord
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__sub
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Standard__integer___axiom
 use        Coursework__airlock___axiom
 use        Coursework__oxegen___axiom
 use        Coursework__status___axiom
 use        Coursework__reactorheat___axiom
 use        Coursework__airarray___axiom
 use        Coursework__diving___axiom
 use        Coursework__isloaded___axiom
 use        Coursework__torarray___axiom
 use        Coursework__diverecord___axiom
 use        Coursework__torepedorecord___axiom
 use        Coursework__submarine___axiom
 use        Coursework__sub___axiom

 let def #"coursework.ads" 43 0 0#"W:diverges:N" "GP_Subp:coursework.ads:43" 
   (__void_param : unit)
  requires { #"coursework.ads" 43 0 0# true }
  ensures { #"coursework.ads" 43 0 0# (#"coursework.ads" 47 0 0# ( "model_vc_post" "keep_on_simp" "GP_Sloc:coursework.ads:47:15" "GP_Reason:VC_POSTCONDITION" "GP_Id:0" "comment:     Post =>  sub.stat = Submerged and then sub.air(1) = Locked and then sub.air(2) = Locked;
              ^ coursework.ads:47:15:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" ( ( "GP_Pretty_Ada:4670" "GP_Sloc:coursework.ads:47:15" ((Coursework__status__rep.to_rep (Coursework__submarine.rec__coursework__submarine__stat (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) ) /\ ( ( "GP_Pretty_Ada:3435" "GP_Sloc:coursework.ads:47:56" ((Coursework__airlock__rep.to_rep (let temp___400 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___400 1)))
  ) = 2) ) /\ ( "GP_Pretty_Ada:3443" "GP_Sloc:coursework.ads:47:85" ((Coursework__airlock__rep.to_rep (let temp___399 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___399 2)))
  ) = 2) ) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram coursework.ads:43 *)
  ;
   assume {  (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram coursework.ads:43 *)
  ;
  () (* Check for RTE in the Pre of the subprogram coursework.ads:43 *)
  ;
   abstract ensures {true}(let _ = ( ((Coursework__status__rep.to_rep((Coursework__submarine.rec__coursework__submarine__stat((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 1) && ( ((Coursework__airlock__rep.to_rep((let temp___396 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___396) (1))))
  )) = 2) && ( ((Coursework__airlock__rep.to_rep((let temp___395 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___395) (2))))
  )) = 2) && ( ((Coursework__oxegen__rep.to_rep((Coursework__submarine.rec__coursework__submarine__oxn((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) <> 1) && ((Coursework__reactorheat__rep.to_rep((Coursework__submarine.rec__coursework__submarine__reac((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) ) ) ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram coursework.ads:43 *)
  ;
   assume {  ( ((Coursework__status__rep.to_rep (Coursework__submarine.rec__coursework__submarine__stat (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 1) /\ ( ((Coursework__airlock__rep.to_rep (let temp___398 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___398 1)))
  ) = 2) /\ ( ((Coursework__airlock__rep.to_rep (let temp___397 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___397 2)))
  ) = 2) /\ ( ((Coursework__oxegen__rep.to_rep (Coursework__submarine.rec__coursework__submarine__oxn (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) <> 1) /\ ((Coursework__reactorheat__rep.to_rep (Coursework__submarine.rec__coursework__submarine__reac (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) ) ) ) ) };
   try
   ( ( "GP_Sloc:coursework.adb:6:10" (#"coursework.adb" 6 0 0# ()) );
   ( "GP_Sloc:coursework.adb:6:7" (#"coursework.adb" 6 0 0# (if (( ( ( ((Coursework__airlock__rep.to_rep((let temp___387 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
    (Array__Int__Coursework__airlock.get(temp___387) (1))))
   )) = 2) && ((Coursework__airlock__rep.to_rep((let temp___388 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
    (Array__Int__Coursework__airlock.get(temp___388) (2))))
   )) = 2) ) && ((Coursework__oxegen__rep.to_rep((Coursework__submarine.rec__coursework__submarine__oxn((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) <> 1) ) && ((Coursework__reactorheat__rep.to_rep((Coursework__submarine.rec__coursework__submarine__reac((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) )) then (
    ( ( "GP_Sloc:coursework.adb:7:10" (#"coursework.adb" 7 0 0# ()) );
    ( "GP_Sloc:coursework.adb:7:19" (#"coursework.adb" 7 0 0# (let temp___383 = (let temp___382 = { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } in (
     ( #"coursework.adb" 7 0 0# abstract ensures {true}(let _ = (Coursework__submarine.rec__coursework__submarine__stat((Coursework__submarine.__split_fields(temp___382)))) in (
      ()))
      end ;
     { ( temp___382 ) with Coursework__submarine.__split_fields = { ( (Coursework__submarine.__split_fields(temp___382)) ) with Coursework__submarine.rec__coursework__submarine__stat = (Coursework__status__rep.of_rep(0)) } } )))
     in (
     #"coursework.adb" 7 0 0# Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content <- ( (Coursework__submarine.__split_fields(temp___383)) )))
    ) );
    ( "GP_Sloc:coursework.adb:8:10" (#"coursework.adb" 8 0 0# ()) );
    ( "GP_Sloc:coursework.adb:8:32" (#"coursework.adb" 8 0 0# (let temp___386 = (let temp___385 = { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } in (
     ( #"coursework.adb" 8 0 0# abstract ensures {true}(let _ = (Coursework__submarine.rec__coursework__submarine__dive((Coursework__submarine.__split_fields(temp___385)))) in (
      ()))
      end ;
     { ( temp___385 ) with Coursework__submarine.__split_fields = { ( (Coursework__submarine.__split_fields(temp___385)) ) with Coursework__submarine.rec__coursework__submarine__dive = (let temp___384 = (Coursework__submarine.rec__coursework__submarine__dive (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
      ( #"coursework.adb" 8 0 0# abstract ensures {true}(let _ = (Coursework__diverecord.rec__coursework__diverecord__currentdepth((Coursework__diverecord.__split_fields(temp___384)))) in (
       ()))
       end ;
      { ( temp___384 ) with Coursework__diverecord.__split_fields = { ( (Coursework__diverecord.__split_fields(temp___384)) ) with Coursework__diverecord.rec__coursework__diverecord__currentdepth = ( 10 : Standard__integer.integer ) } } )))
      } } )))
     in (
     #"coursework.adb" 8 0 0# Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content <- ( (Coursework__submarine.__split_fields(temp___386)) )))
    ) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( ((Coursework__status__rep.to_rep((Coursework__submarine.rec__coursework__submarine__stat((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) && ( ((Coursework__airlock__rep.to_rep((let temp___392 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___392) (1))))
  )) = 2) && ((Coursework__airlock__rep.to_rep((let temp___391 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___391) (2))))
  )) = 2) ) ) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "surfacesub" defined at coursework.ads:49, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Coursework__surfacesub__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Coursework__status
 use        Coursework__status__rep
 use        Array__Int__Coursework__airlock
 use        Coursework__diverecord
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__sub
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Standard__integer___axiom
 use        Coursework__airlock___axiom
 use        Coursework__oxegen___axiom
 use        Coursework__status___axiom
 use        Coursework__reactorheat___axiom
 use        Coursework__airarray___axiom
 use        Coursework__diving___axiom
 use        Coursework__isloaded___axiom
 use        Coursework__torarray___axiom
 use        Coursework__diverecord___axiom
 use        Coursework__torepedorecord___axiom
 use        Coursework__submarine___axiom
 use        Coursework__sub___axiom

 let def #"coursework.ads" 49 0 0#"W:diverges:N" "GP_Subp:coursework.ads:49" 
   (__void_param : unit)
  requires { #"coursework.ads" 49 0 0# true }
  ensures { #"coursework.ads" 49 0 0# (#"coursework.ads" 52 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:coursework.ads:52:14" "GP_Id:1" "comment:     Post => sub.stat = Surfaced and then sub.air(1) = Locked and then sub.air(2) = Locked;
             ^ coursework.ads:52:14:VC_POSTCONDITION" ( ( "GP_Pretty_Ada:4872" "GP_Sloc:coursework.ads:52:14" ((Coursework__status__rep.to_rep (Coursework__submarine.rec__coursework__submarine__stat (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 1) ) /\ ( ( "GP_Pretty_Ada:3499" "GP_Sloc:coursework.ads:52:54" ((Coursework__airlock__rep.to_rep (let temp___419 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___419 1)))
  ) = 2) ) /\ ( "GP_Pretty_Ada:3507" "GP_Sloc:coursework.ads:52:83" ((Coursework__airlock__rep.to_rep (let temp___418 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___418 2)))
  ) = 2) ) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram coursework.ads:49 *)
  ;
   assume {  (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram coursework.ads:49 *)
  ;
  () (* Check for RTE in the Pre of the subprogram coursework.ads:49 *)
  ;
   abstract ensures {true}(let _ = ( ((Coursework__status__rep.to_rep((Coursework__submarine.rec__coursework__submarine__stat((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) && ( ((Coursework__airlock__rep.to_rep((let temp___415 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___415) (1))))
  )) = 2) && ((Coursework__airlock__rep.to_rep((let temp___414 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___414) (2))))
  )) = 2) ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram coursework.ads:49 *)
  ;
   assume {  ( ((Coursework__status__rep.to_rep (Coursework__submarine.rec__coursework__submarine__stat (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) /\ ( ((Coursework__airlock__rep.to_rep (let temp___417 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___417 1)))
  ) = 2) /\ ((Coursework__airlock__rep.to_rep (let temp___416 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___416 2)))
  ) = 2) ) ) };
   try
   ( ( "GP_Sloc:coursework.adb:25:10" (#"coursework.adb" 25 0 0# ()) );
   ( "GP_Sloc:coursework.adb:25:7" (#"coursework.adb" 25 0 0# (if (( ( ((Coursework__status__rep.to_rep((Coursework__submarine.rec__coursework__submarine__stat((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) && ((Coursework__airlock__rep.to_rep((let temp___406 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
    (Array__Int__Coursework__airlock.get(temp___406) (1))))
   )) = 2) ) && ((Coursework__airlock__rep.to_rep((let temp___407 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
    (Array__Int__Coursework__airlock.get(temp___407) (2))))
   )) = 2) )) then (
    ( ( "GP_Sloc:coursework.adb:26:10" (#"coursework.adb" 26 0 0# ()) );
    ( "GP_Sloc:coursework.adb:26:19" (#"coursework.adb" 26 0 0# (let temp___402 = (let temp___401 = { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } in (
     ( #"coursework.adb" 26 0 0# abstract ensures {true}(let _ = (Coursework__submarine.rec__coursework__submarine__stat((Coursework__submarine.__split_fields(temp___401)))) in (
      ()))
      end ;
     { ( temp___401 ) with Coursework__submarine.__split_fields = { ( (Coursework__submarine.__split_fields(temp___401)) ) with Coursework__submarine.rec__coursework__submarine__stat = (Coursework__status__rep.of_rep(1)) } } )))
     in (
     #"coursework.adb" 26 0 0# Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content <- ( (Coursework__submarine.__split_fields(temp___402)) )))
    ) );
    ( "GP_Sloc:coursework.adb:27:10" (#"coursework.adb" 27 0 0# ()) );
    ( "GP_Sloc:coursework.adb:27:32" (#"coursework.adb" 27 0 0# (let temp___405 = (let temp___404 = { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } in (
     ( #"coursework.adb" 27 0 0# abstract ensures {true}(let _ = (Coursework__submarine.rec__coursework__submarine__dive((Coursework__submarine.__split_fields(temp___404)))) in (
      ()))
      end ;
     { ( temp___404 ) with Coursework__submarine.__split_fields = { ( (Coursework__submarine.__split_fields(temp___404)) ) with Coursework__submarine.rec__coursework__submarine__dive = (let temp___403 = (Coursework__submarine.rec__coursework__submarine__dive (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
      ( #"coursework.adb" 27 0 0# abstract ensures {true}(let _ = (Coursework__diverecord.rec__coursework__diverecord__currentdepth((Coursework__diverecord.__split_fields(temp___403)))) in (
       ()))
       end ;
      { ( temp___403 ) with Coursework__diverecord.__split_fields = { ( (Coursework__diverecord.__split_fields(temp___403)) ) with Coursework__diverecord.rec__coursework__diverecord__currentdepth = ( 0 : Standard__integer.integer ) } } )))
      } } )))
     in (
     #"coursework.adb" 27 0 0# Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content <- ( (Coursework__submarine.__split_fields(temp___405)) )))
    ) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( ((Coursework__status__rep.to_rep((Coursework__submarine.rec__coursework__submarine__stat((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 1) && ( ((Coursework__airlock__rep.to_rep((let temp___411 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___411) (1))))
  )) = 2) && ((Coursework__airlock__rep.to_rep((let temp___410 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___410) (2))))
  )) = 2) ) ) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "overideoxegen" defined at coursework.ads:54, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Coursework__overideoxegen__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Array__Int__Standard__character
 use        Standard__string___axiom
 use        Coursework__surfacesub___axiom
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Coursework__oxegen
 use        Coursework__oxegen__rep
 use        Coursework__status
 use        Coursework__status__rep
 use        Array__Int__Coursework__airlock
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__sub
 use        Coursework__overideoxegen__d
 use        Temp___String_Literal_422
 use        Array__Int__Standard__character
 use        Temp___String_Literal_426
 use        Array__Int__Standard__character
 use        Temp___String_Literal_430
 use        Array__Int__Standard__character
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Standard__integer___axiom
 use        Standard__positive___axiom
 use        Standard__character___axiom
 use        Standard__string___axiom
 use        Standard__integer___axiom
 use        Coursework__airlock___axiom
 use        Coursework__oxegen___axiom
 use        Coursework__status___axiom
 use        Coursework__reactorheat___axiom
 use        Coursework__airarray___axiom
 use        Coursework__diving___axiom
 use        Coursework__isloaded___axiom
 use        Coursework__torarray___axiom
 use        Coursework__diverecord___axiom
 use        Coursework__torepedorecord___axiom
 use        Coursework__submarine___axiom
 use        Coursework__sub___axiom
 use        Coursework__surfacesub___axiom
 use        Coursework__overideoxegen__d___axiom

 let def #"coursework.ads" 54 0 0#"W:diverges:N" "GP_Subp:coursework.ads:54" 
   (__void_param : unit)
  requires { #"coursework.ads" 54 0 0# true }
  ensures { #"coursework.ads" 54 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram coursework.ads:54 *)
  ;
  #"coursework.ads" 54 0 0# assume { #"coursework.ads" 54 0 0# (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True False True True) };
  #"coursework.ads" 54 0 0# assume { #"coursework.ads" 54 0 0# (Standard__string___axiom.dynamic_invariant Coursework__overideoxegen__d.d True False True True) };
  #"coursework.ads" 54 0 0# assume { #"coursework.ads" 54 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram coursework.ads:54 *)
  ;
  () (* Check for RTE in the Pre of the subprogram coursework.ads:54 *)
  ;
  #"coursework.ads" 54 0 0# abstract ensures {true}(let _ = ( ((Coursework__airlock__rep.to_rep((let temp___440 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___440) (1))))
  )) = 2) && ((Coursework__airlock__rep.to_rep((let temp___439 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___439) (2))))
  )) = 2) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram coursework.ads:54 *)
  ;
  #"coursework.ads" 54 0 0# assume { #"coursework.ads" 54 0 0# ( ((Coursework__airlock__rep.to_rep (let temp___442 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___442 1)))
  ) = 2) /\ ((Coursework__airlock__rep.to_rep (let temp___441 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___441 2)))
  ) = 2) ) };
  #"coursework.ads" 54 0 0# try
   ( (#"coursework.adb" 31 0 0# ());
   ( "GP_Sloc:coursework.adb:34:10" (#"coursework.adb" 34 0 0# ()) );
   ( "GP_Sloc:coursework.adb:34:7" (#"coursework.adb" 34 0 0# (if (( ( ((Coursework__status__rep.to_rep((Coursework__submarine.rec__coursework__submarine__stat((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) && ((Coursework__airlock__rep.to_rep((let temp___432 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
    (Array__Int__Coursework__airlock.get(temp___432) (1))))
   )) = 2) ) && ((Coursework__airlock__rep.to_rep((let temp___433 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
    (Array__Int__Coursework__airlock.get(temp___433) (2))))
   )) = 2) )) then (
    ( ( "GP_Sloc:coursework.adb:35:10" (#"coursework.adb" 35 0 0# (if ((let temp___423 = (Temp___String_Literal_422.temp___String_Literal_422(())) in (
     (Array__Int__Standard__character.bool_eq((Standard__string.to_array(Coursework__overideoxegen__d.d))) ((Standard__string.first(Coursework__overideoxegen__d.d))) ((Standard__string.last(Coursework__overideoxegen__d.d))) (temp___423) (1) (3))))
    ) then (
     ( ( "GP_Sloc:coursework.adb:36:13" (#"coursework.adb" 36 0 0# ()) );
     ( "GP_Sloc:coursework.adb:36:21" (#"coursework.adb" 36 0 0# (let temp___421 = (let temp___420 = { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } in (
      ( #"coursework.adb" 36 0 0# abstract ensures {true}(let _ = (Coursework__submarine.rec__coursework__submarine__oxn((Coursework__submarine.__split_fields(temp___420)))) in (
       ()))
       end ;
      { ( temp___420 ) with Coursework__submarine.__split_fields = { ( (Coursework__submarine.__split_fields(temp___420)) ) with Coursework__submarine.rec__coursework__submarine__oxn = (Coursework__oxegen__rep.of_rep(2)) } } )))
      in (
      #"coursework.adb" 36 0 0# Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content <- ( (Coursework__submarine.__split_fields(temp___421)) )))
     ) ) )) else (
     ()))) );
    ( "GP_Sloc:coursework.adb:38:10" (#"coursework.adb" 38 0 0# (if ((let temp___427 = (Temp___String_Literal_426.temp___String_Literal_426(())) in (
     (Array__Int__Standard__character.bool_eq((Standard__string.to_array(Coursework__overideoxegen__d.d))) ((Standard__string.first(Coursework__overideoxegen__d.d))) ((Standard__string.last(Coursework__overideoxegen__d.d))) (temp___427) (1) (7))))
    ) then (
     ( ( "GP_Sloc:coursework.adb:39:13" (#"coursework.adb" 39 0 0# ()) );
     ( "GP_Sloc:coursework.adb:39:21" (#"coursework.adb" 39 0 0# (let temp___425 = (let temp___424 = { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } in (
      ( #"coursework.adb" 39 0 0# abstract ensures {true}(let _ = (Coursework__submarine.rec__coursework__submarine__oxn((Coursework__submarine.__split_fields(temp___424)))) in (
       ()))
       end ;
      { ( temp___424 ) with Coursework__submarine.__split_fields = { ( (Coursework__submarine.__split_fields(temp___424)) ) with Coursework__submarine.rec__coursework__submarine__oxn = (Coursework__oxegen__rep.of_rep(0)) } } )))
      in (
      #"coursework.adb" 39 0 0# Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content <- ( (Coursework__submarine.__split_fields(temp___425)) )))
     ) ) )) else (
     ()))) );
    ( "GP_Sloc:coursework.adb:41:10" (#"coursework.adb" 41 0 0# (if ((let temp___431 = (Temp___String_Literal_430.temp___String_Literal_430(())) in (
     (Array__Int__Standard__character.bool_eq((Standard__string.to_array(Coursework__overideoxegen__d.d))) ((Standard__string.first(Coursework__overideoxegen__d.d))) ((Standard__string.last(Coursework__overideoxegen__d.d))) (temp___431) (1) (6))))
    ) then (
     ( ( "GP_Sloc:coursework.adb:42:13" (#"coursework.adb" 42 0 0# ()) );
     ( "GP_Sloc:coursework.adb:42:13" (#"coursework.adb" 42 0 0# ( (#"coursework.adb" 42 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:coursework.adb:42:13" "GP_Reason:VC_PRECONDITION" "GP_Id:2" "comment:            surfaceSub;
            ^ coursework.adb:42:13:VC_PRECONDITION" "GP_Shape:if__if__call_surfacesub" (Coursework__surfacesub___axiom.surfacesub(())) )) )) );
     ( "GP_Sloc:coursework.adb:43:13" (#"coursework.adb" 43 0 0# ()) );
     ( "GP_Sloc:coursework.adb:43:21" (#"coursework.adb" 43 0 0# (let temp___429 = (let temp___428 = { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } in (
      ( #"coursework.adb" 43 0 0# abstract ensures {true}(let _ = (Coursework__submarine.rec__coursework__submarine__oxn((Coursework__submarine.__split_fields(temp___428)))) in (
       ()))
       end ;
      { ( temp___428 ) with Coursework__submarine.__split_fields = { ( (Coursework__submarine.__split_fields(temp___428)) ) with Coursework__submarine.rec__coursework__submarine__oxn = (Coursework__oxegen__rep.of_rep(1)) } } )))
      in (
      #"coursework.adb" 43 0 0# Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content <- ( (Coursework__submarine.__split_fields(temp___429)) )))
     ) ) )) else (
     ()))) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "overidereactor" defined at coursework.ads:58, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Coursework__overidereactor__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Coursework__surfacesub___axiom
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Coursework__status
 use        Coursework__status__rep
 use        Coursework__reactorheat
 use        Coursework__reactorheat__rep
 use        Array__Int__Coursework__airlock
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__sub
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Standard__integer___axiom
 use        Coursework__airlock___axiom
 use        Coursework__oxegen___axiom
 use        Coursework__status___axiom
 use        Coursework__reactorheat___axiom
 use        Coursework__airarray___axiom
 use        Coursework__diving___axiom
 use        Coursework__isloaded___axiom
 use        Coursework__torarray___axiom
 use        Coursework__diverecord___axiom
 use        Coursework__torepedorecord___axiom
 use        Coursework__submarine___axiom
 use        Coursework__sub___axiom
 use        Coursework__surfacesub___axiom

 let def #"coursework.ads" 58 0 0#"W:diverges:N" "GP_Subp:coursework.ads:58" 
   (__void_param : unit)
  requires { #"coursework.ads" 58 0 0# true }
  ensures { #"coursework.ads" 58 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram coursework.ads:58 *)
  ;
  #"coursework.ads" 58 0 0# assume { #"coursework.ads" 58 0 0# (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True False True True) };
  #"coursework.ads" 58 0 0# assume { #"coursework.ads" 58 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram coursework.ads:58 *)
  ;
  () (* Check for RTE in the Pre of the subprogram coursework.ads:58 *)
  ;
  #"coursework.ads" 58 0 0# abstract ensures {true}(let _ = ( ((Coursework__status__rep.to_rep((Coursework__submarine.rec__coursework__submarine__stat((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) && ( ((Coursework__airlock__rep.to_rep((let temp___450 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___450) (1))))
  )) = 2) && ((Coursework__airlock__rep.to_rep((let temp___449 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___449) (2))))
  )) = 2) ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram coursework.ads:58 *)
  ;
  #"coursework.ads" 58 0 0# assume { #"coursework.ads" 58 0 0# ( ((Coursework__status__rep.to_rep (Coursework__submarine.rec__coursework__submarine__stat (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) /\ ( ((Coursework__airlock__rep.to_rep (let temp___452 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___452 1)))
  ) = 2) /\ ((Coursework__airlock__rep.to_rep (let temp___451 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___451 2)))
  ) = 2) ) ) };
  #"coursework.ads" 58 0 0# try
   ( ( "GP_Sloc:coursework.adb:52:10" (#"coursework.adb" 52 0 0# ()) );
   ( "GP_Sloc:coursework.adb:52:7" (#"coursework.adb" 52 0 0# (if (( ( ( ((Coursework__reactorheat__rep.to_rep((Coursework__submarine.rec__coursework__submarine__reac((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 1) && ((Coursework__status__rep.to_rep((Coursework__submarine.rec__coursework__submarine__stat((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) ) && ((Coursework__airlock__rep.to_rep((let temp___443 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
    (Array__Int__Coursework__airlock.get(temp___443) (1))))
   )) = 2) ) && ((Coursework__airlock__rep.to_rep((let temp___444 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
    (Array__Int__Coursework__airlock.get(temp___444) (2))))
   )) = 2) )) then (
    ( ( "GP_Sloc:coursework.adb:54:10" (#"coursework.adb" 54 0 0# ()) );
    ( "GP_Sloc:coursework.adb:54:10" (#"coursework.adb" 54 0 0# ( (#"coursework.adb" 54 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:coursework.adb:54:10" "GP_Id:3" "comment:         surfaceSub;
         ^ coursework.adb:54:10:VC_PRECONDITION" "GP_Shape:if__call_surfacesub" (Coursework__surfacesub___axiom.surfacesub(())) )) )) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "divesub" defined at coursework.ads:63, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Coursework__divesub__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Coursework__oxegen
 use        Coursework__oxegen__rep
 use        Coursework__status
 use        Coursework__status__rep
 use        Coursework__reactorheat
 use        Coursework__reactorheat__rep
 use        Array__Int__Coursework__airlock
 use        Coursework__diverecord
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__sub
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Standard__integer___axiom
 use        Standard__integer___axiom
 use        Coursework__airlock___axiom
 use        Coursework__oxegen___axiom
 use        Coursework__status___axiom
 use        Coursework__reactorheat___axiom
 use        Coursework__airarray___axiom
 use        Coursework__diving___axiom
 use        Coursework__isloaded___axiom
 use        Coursework__torarray___axiom
 use        Coursework__diverecord___axiom
 use        Coursework__torepedorecord___axiom
 use        Coursework__submarine___axiom
 use        Coursework__sub___axiom

 let def #"coursework.ads" 63 0 0#"W:diverges:N" "GP_Subp:coursework.ads:63" 
   (__void_param : unit)
  requires { #"coursework.ads" 63 0 0# true }
  ensures { #"coursework.ads" 63 0 0# (#"coursework.ads" 69 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:coursework.ads:69:14" "GP_Id:6" "comment:     Post => sub.dive.currentDepth > sub.dive.currentDepth'Old and then sub.dive.currentDepth <= sub.dive.maxDepth;
             ^ coursework.ads:69:14:VC_POSTCONDITION" ( ( "GP_Pretty_Ada:5497" "GP_Sloc:coursework.ads:69:14" ((Standard__integer__rep.to_rep (Coursework__diverecord.rec__coursework__diverecord__currentdepth (Coursework__diverecord.__split_fields (Coursework__submarine.rec__coursework__submarine__dive (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))))) > (Standard__integer__rep.to_rep (old (Coursework__diverecord.rec__coursework__diverecord__currentdepth (Coursework__diverecord.__split_fields (Coursework__submarine.rec__coursework__submarine__dive (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) ))) ) /\ ( "GP_Pretty_Ada:3704" "GP_Sloc:coursework.ads:69:95" ((Standard__integer__rep.to_rep (Coursework__diverecord.rec__coursework__diverecord__currentdepth (Coursework__diverecord.__split_fields (Coursework__submarine.rec__coursework__submarine__dive (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))))) <= (Standard__integer__rep.to_rep (Coursework__diverecord.rec__coursework__diverecord__maxdepth (Coursework__diverecord.__split_fields (Coursework__submarine.rec__coursework__submarine__dive (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram coursework.ads:63 *)
  ;
   assume {  (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram coursework.ads:63 *)
  ;
  () (* Check for RTE in the Pre of the subprogram coursework.ads:63 *)
  ;
   abstract ensures {true}(let _ = ( ((Coursework__status__rep.to_rep((Coursework__submarine.rec__coursework__submarine__stat((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) && ( ((Coursework__oxegen__rep.to_rep((Coursework__submarine.rec__coursework__submarine__oxn((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) && ( ((Coursework__airlock__rep.to_rep((let temp___464 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___464) (1))))
  )) = 2) && ( ((Coursework__airlock__rep.to_rep((let temp___463 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___463) (2))))
  )) = 2) && ( ((Standard__integer__rep.to_rep((Coursework__diverecord.rec__coursework__diverecord__currentdepth((Coursework__diverecord.__split_fields((Coursework__submarine.rec__coursework__submarine__dive((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))))))) < (Standard__integer__rep.to_rep((Coursework__diverecord.rec__coursework__diverecord__safedivedepth((Coursework__diverecord.__split_fields((Coursework__submarine.rec__coursework__submarine__dive((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))))))))))) && ( ((Coursework__reactorheat__rep.to_rep((Coursework__submarine.rec__coursework__submarine__reac((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) && ( ((Standard__integer__rep.to_rep((Coursework__diverecord.rec__coursework__diverecord__currentdepth((Coursework__diverecord.__split_fields((Coursework__submarine.rec__coursework__submarine__dive((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))))))) < 2147483547) && ((#"coursework.ads" 68 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:coursework.ads:68:36" "GP_Id:5" "comment:     and then sub.dive.currentDepth+100 <= sub.dive.maxDepth,
                                   ^ coursework.ads:68:36:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__cmp__add" (Standard__integer.range_check_(((Standard__integer__rep.to_rep((Coursework__diverecord.rec__coursework__diverecord__currentdepth((Coursework__diverecord.__split_fields((Coursework__submarine.rec__coursework__submarine__dive((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))))))) + 100))) )) <= (Standard__integer__rep.to_rep((Coursework__diverecord.rec__coursework__diverecord__maxdepth((Coursework__diverecord.__split_fields((Coursework__submarine.rec__coursework__submarine__dive((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))))))))))) ) ) ) ) ) ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram coursework.ads:63 *)
  ;
   assume {  ( ((Coursework__status__rep.to_rep (Coursework__submarine.rec__coursework__submarine__stat (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) /\ ( ((Coursework__oxegen__rep.to_rep (Coursework__submarine.rec__coursework__submarine__oxn (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) /\ ( ((Coursework__airlock__rep.to_rep (let temp___466 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___466 1)))
  ) = 2) /\ ( ((Coursework__airlock__rep.to_rep (let temp___465 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___465 2)))
  ) = 2) /\ ( ((Standard__integer__rep.to_rep (Coursework__diverecord.rec__coursework__diverecord__currentdepth (Coursework__diverecord.__split_fields (Coursework__submarine.rec__coursework__submarine__dive (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))))) < (Standard__integer__rep.to_rep (Coursework__diverecord.rec__coursework__diverecord__safedivedepth (Coursework__diverecord.__split_fields (Coursework__submarine.rec__coursework__submarine__dive (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) /\ ( ((Coursework__reactorheat__rep.to_rep (Coursework__submarine.rec__coursework__submarine__reac (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) /\ ( ((Standard__integer__rep.to_rep (Coursework__diverecord.rec__coursework__diverecord__currentdepth (Coursework__diverecord.__split_fields (Coursework__submarine.rec__coursework__submarine__dive (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))))) < 2147483547) /\ (((Standard__integer__rep.to_rep (Coursework__diverecord.rec__coursework__diverecord__currentdepth (Coursework__diverecord.__split_fields (Coursework__submarine.rec__coursework__submarine__dive (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))))) + 100) <= (Standard__integer__rep.to_rep (Coursework__diverecord.rec__coursework__diverecord__maxdepth (Coursework__diverecord.__split_fields (Coursework__submarine.rec__coursework__submarine__dive (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) ) ) ) ) ) ) ) };
   abstract ensures {true}(let _ = (Coursework__diverecord.rec__coursework__diverecord__currentdepth((Coursework__diverecord.__split_fields((Coursework__submarine.rec__coursework__submarine__dive((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))))) in (
   ()))
   end ;
  (let temp___old_460 =  (any int
  ensures { (result = (Standard__integer__rep.to_rep (Coursework__diverecord.rec__coursework__diverecord__currentdepth (Coursework__diverecord.__split_fields (Coursework__submarine.rec__coursework__submarine__dive (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))))))} 
  ) in (
   (  try
    ( ( "GP_Sloc:coursework.adb:61:10" (#"coursework.adb" 61 0 0# ()) );
    ( "GP_Sloc:coursework.adb:61:7" (#"coursework.adb" 61 0 0# (if (( ( ( ( ( ((Coursework__status__rep.to_rep((Coursework__submarine.rec__coursework__submarine__stat((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) && ((Coursework__oxegen__rep.to_rep((Coursework__submarine.rec__coursework__submarine__oxn((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) ) && ((Coursework__airlock__rep.to_rep((let temp___456 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
     (Array__Int__Coursework__airlock.get(temp___456) (1))))
    )) = 2) ) && ((Coursework__airlock__rep.to_rep((let temp___457 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
     (Array__Int__Coursework__airlock.get(temp___457) (2))))
    )) = 2) ) && ((Standard__integer__rep.to_rep((Coursework__diverecord.rec__coursework__diverecord__currentdepth((Coursework__diverecord.__split_fields((Coursework__submarine.rec__coursework__submarine__dive((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))))))) < (Standard__integer__rep.to_rep((Coursework__diverecord.rec__coursework__diverecord__safedivedepth((Coursework__diverecord.__split_fields((Coursework__submarine.rec__coursework__submarine__dive((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))))))))))) ) && ((Coursework__reactorheat__rep.to_rep((Coursework__submarine.rec__coursework__submarine__reac((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) )) then (
     ( ( "GP_Sloc:coursework.adb:63:10" (#"coursework.adb" 63 0 0# ()) );
     ( "GP_Sloc:coursework.adb:63:35" (#"coursework.adb" 63 0 0# ()) );
     ( "GP_Sloc:coursework.adb:63:32" (#"coursework.adb" 63 0 0# (let temp___455 = (let temp___454 = { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } in (
      ( #"coursework.adb" 63 0 0# abstract ensures {true}(let _ = (Coursework__submarine.rec__coursework__submarine__dive((Coursework__submarine.__split_fields(temp___454)))) in (
       ()))
       end ;
      { ( temp___454 ) with Coursework__submarine.__split_fields = { ( (Coursework__submarine.__split_fields(temp___454)) ) with Coursework__submarine.rec__coursework__submarine__dive = (let temp___453 = (Coursework__submarine.rec__coursework__submarine__dive (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
       ( #"coursework.adb" 63 0 0# abstract ensures {true}(let _ = (Coursework__diverecord.rec__coursework__diverecord__currentdepth((Coursework__diverecord.__split_fields(temp___453)))) in (
        ()))
        end ;
       { ( temp___453 ) with Coursework__diverecord.__split_fields = { ( (Coursework__diverecord.__split_fields(temp___453)) ) with Coursework__diverecord.rec__coursework__diverecord__currentdepth = (Standard__integer__rep.of_rep((#"coursework.adb" 63 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:coursework.adb:63:57" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:4" "comment:         sub.dive.currentDepth := sub.dive.currentDepth + 100;
                                                        ^ coursework.adb:63:57:VC_OVERFLOW_CHECK" "GP_Shape:if__sub_assign__add" (Standard__integer.range_check_(((Standard__integer__rep.to_rep((Coursework__diverecord.rec__coursework__diverecord__currentdepth((Coursework__diverecord.__split_fields((Coursework__submarine.rec__coursework__submarine__dive((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))))))) + 100))) )))) } } )))
       } } )))
      in (
       Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content <- ( (Coursework__submarine.__split_fields(temp___455)) )))
     ) ) )) else (
     ()))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    abstract ensures {true}(let _ = ( ((Standard__integer__rep.to_rep((Coursework__diverecord.rec__coursework__diverecord__currentdepth((Coursework__diverecord.__split_fields((Coursework__submarine.rec__coursework__submarine__dive((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))))))) > temp___old_460) && ((Standard__integer__rep.to_rep((Coursework__diverecord.rec__coursework__diverecord__currentdepth((Coursework__diverecord.__split_fields((Coursework__submarine.rec__coursework__submarine__dive((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))))))) <= (Standard__integer__rep.to_rep((Coursework__diverecord.rec__coursework__diverecord__maxdepth((Coursework__diverecord.__split_fields((Coursework__submarine.rec__coursework__submarine__dive((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))))))))))) ) in (
    ()))
    end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "closeairlock" defined at coursework.ads:71, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Coursework__closeairlock__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer___axiom
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Coursework__TairarrayD1
 use        Array__Int__Coursework__airlock
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__sub
 use        Coursework__closeairlock__n
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Standard__integer___axiom
 use        Coursework__airlock___axiom
 use        Coursework__oxegen___axiom
 use        Coursework__status___axiom
 use        Coursework__reactorheat___axiom
 use        Coursework__airarray___axiom
 use        Coursework__diving___axiom
 use        Coursework__isloaded___axiom
 use        Coursework__torarray___axiom
 use        Coursework__diverecord___axiom
 use        Coursework__torepedorecord___axiom
 use        Coursework__submarine___axiom
 use        Coursework__sub___axiom
 use        Coursework__closeairlock__n___axiom
 use        Coursework__TairarrayD1___axiom

 let def #"coursework.ads" 71 0 0#"W:diverges:N" "GP_Subp:coursework.ads:71" 
   (__void_param : unit)
  requires { #"coursework.ads" 71 0 0# true }
  ensures { #"coursework.ads" 71 0 0# (#"coursework.ads" 74 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:coursework.ads:74:14" "GP_Id:11" "comment:     Post => sub.air(n) = Closed and then (for all I in sub.air'Range => (if I /= n then sub.air(I) = sub.air'Old(I)));
             ^ coursework.ads:74:14:VC_POSTCONDITION" ( ( "GP_Pretty_Ada:5672" "GP_Sloc:coursework.ads:74:14" ((Coursework__airlock__rep.to_rep (let temp___483 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___483 Coursework__closeairlock__n.n)))
  ) = 1) ) /\ (forall i #"coursework.ads" 74 0 0#  "model" "model_trace:3764" "name:I"  : int.
   ( ( (1 <= i) /\ (i <= 2) ) -> (if ((i <> Coursework__closeairlock__n.n)) then (
    ( "GP_Pretty_Ada:3785" "GP_Sloc:coursework.ads:74:90" ((Coursework__airlock__rep.to_rep (let temp___481 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
     (Array__Int__Coursework__airlock.get temp___481 i)))
    ) = (Coursework__airlock__rep.to_rep (let temp___482 = (old (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) ) in (
     (Array__Int__Coursework__airlock.get temp___482 i)))
    )) )) else (
    ( "GP_Pretty_Ada:6851" "GP_Sloc:coursework.ads:74:75" true ))) )) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram coursework.ads:71 *)
  ;
   assume {  (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True False True True) };
   assume {  (Standard__integer___axiom.dynamic_invariant Coursework__closeairlock__n.n True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram coursework.ads:71 *)
  ;
  () (* Check for RTE in the Pre of the subprogram coursework.ads:71 *)
  ;
   abstract ensures {true}(let _ = ( (Boolean.orb((Coursework__closeairlock__n.n = 1)) ((Coursework__closeairlock__n.n = 2))) && ((Coursework__airlock__rep.to_rep((let temp___479 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___479) ((  assert {  (#"coursework.ads" 73 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__cmp__ixdcomp" "GP_Sloc:coursework.ads:73:47" "GP_Id:10" "comment:     Pre => (n = 1 or n = 2) and then sub.air(n) = Open,
                                              ^ coursework.ads:73:47:VC_INDEX_CHECK" ( (Coursework__TairarrayD1.first <= Coursework__closeairlock__n.n) /\ (Coursework__closeairlock__n.n <= Coursework__TairarrayD1.last) ) )) };
   Coursework__closeairlock__n.n )))))
  )) = 0) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram coursework.ads:71 *)
  ;
   assume {  ( ( (Coursework__closeairlock__n.n = 1) \/ (Coursework__closeairlock__n.n = 2) ) /\ ((Coursework__airlock__rep.to_rep (let temp___480 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___480 Coursework__closeairlock__n.n)))
  ) = 0) ) };
   abstract ensures {true}(let _ = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   ()))
   end ;
  (let temp___old_474 =  (any Array__Int__Coursework__airlock.map
  ensures { (result = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))} 
  ) in (
   (  try
    ( ( "GP_Sloc:coursework.adb:69:7" (#"coursework.adb" 69 0 0# (if (( (Boolean.orb((Coursework__closeairlock__n.n = 1)) ((Coursework__closeairlock__n.n = 2))) && ((Coursework__airlock__rep.to_rep((let temp___470 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
     (Array__Int__Coursework__airlock.get(temp___470) (( #"coursework.adb" 69 0 0# assert { #"coursework.adb" 69 0 0# (#"coursework.adb" 69 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:coursework.adb:69:44" "GP_Id:8" "comment:      if((n = 1 or n = 2) and then sub.air(n) = Open) then
                                           ^ coursework.adb:69:44:VC_INDEX_CHECK" "GP_Shape:if__andthen__cmp__ixdcomp" ( (Coursework__TairarrayD1.first <= Coursework__closeairlock__n.n) /\ (Coursework__closeairlock__n.n <= Coursework__TairarrayD1.last) ) )) };
     Coursework__closeairlock__n.n )))))
    )) = 0) )) then (
     ( ( "GP_Sloc:coursework.adb:70:10" (#"coursework.adb" 70 0 0# ()) );
     ( "GP_Sloc:coursework.adb:70:21" (#"coursework.adb" 70 0 0# (let temp___469 = (let temp___468 = { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } in (
      ( #"coursework.adb" 70 0 0# abstract ensures {true}(let _ = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields(temp___468)))) in (
       ()))
       end ;
      { ( temp___468 ) with Coursework__submarine.__split_fields = { ( (Coursework__submarine.__split_fields(temp___468)) ) with Coursework__submarine.rec__coursework__submarine__air = (let temp___467 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
       (Array__Int__Coursework__airlock.set((Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) (( #"coursework.adb" 70 0 0# assert { #"coursework.adb" 70 0 0# (#"coursework.adb" 70 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:coursework.adb:70:18" "GP_Reason:VC_INDEX_CHECK" "GP_Id:7" "comment:         sub.air(n) := Closed;
                 ^ coursework.adb:70:18:VC_INDEX_CHECK" "GP_Shape:if__sub_assign__ixdcomp" ( (Coursework__TairarrayD1.first <= Coursework__closeairlock__n.n) /\ (Coursework__closeairlock__n.n <= Coursework__TairarrayD1.last) ) )) };
       Coursework__closeairlock__n.n )) ((Coursework__airlock__rep.of_rep(1))))))
       } } )))
      in (
       Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content <- ( (Coursework__submarine.__split_fields(temp___469)) )))
     ) ) )) else (
     ()))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    abstract ensures {true}(let _ = ( ((Coursework__airlock__rep.to_rep((let temp___476 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
    (Array__Int__Coursework__airlock.get(temp___476) ((  assert {  (#"coursework.ads" 74 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:coursework.ads:74:22" "GP_Id:9" "comment:     Post => sub.air(n) = Closed and then (for all I in sub.air'Range => (if I /= n then sub.air(I) = sub.air'Old(I)));
                     ^ coursework.ads:74:22:VC_INDEX_CHECK" "GP_Shape:pragargs__cmp__ixdcomp" ( (Coursework__TairarrayD1.first <= Coursework__closeairlock__n.n) /\ (Coursework__closeairlock__n.n <= Coursework__TairarrayD1.last) ) )) };
    Coursework__closeairlock__n.n )))))
   )) = 1) && ( (let i =  (any int
   ) in (
    (if ((Boolean.andb((1 <= i)) ((i <= 2)))) then (
      abstract ensures {true}(let _ = (if ((i <> Coursework__closeairlock__n.n)) then (
      ((Coursework__airlock__rep.to_rep((let temp___473 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
       (Array__Int__Coursework__airlock.get(temp___473) (i))))
      )) = (Coursework__airlock__rep.to_rep((Array__Int__Coursework__airlock.get(temp___old_474) (i)))))) else (
      (Boolean.of_int(1)))) in (
      ()))
      end ))))
   ;
    (any bool
   requires { true} 
   ensures { ( (result = True) <-> (forall i   "model" "model_trace:3764" "name:I"  : int.
    ( ( (1 <= i) /\ (i <= 2) ) -> (if ((i <> Coursework__closeairlock__n.n)) then (
     ((Coursework__airlock__rep.to_rep (let temp___475 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
      (Array__Int__Coursework__airlock.get temp___475 i)))
     ) = (Coursework__airlock__rep.to_rep (Array__Int__Coursework__airlock.get temp___old_474 i)))) else (
     true)) )) )} 
   ) ) ) in (
    ()))
    end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "openairlock" defined at coursework.ads:76, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Coursework__openairlock__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer___axiom
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Coursework__TairarrayD1
 use        Array__Int__Coursework__airlock
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__sub
 use        Coursework__openairlock__n
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Standard__integer___axiom
 use        Coursework__airlock___axiom
 use        Coursework__oxegen___axiom
 use        Coursework__status___axiom
 use        Coursework__reactorheat___axiom
 use        Coursework__airarray___axiom
 use        Coursework__diving___axiom
 use        Coursework__isloaded___axiom
 use        Coursework__torarray___axiom
 use        Coursework__diverecord___axiom
 use        Coursework__torepedorecord___axiom
 use        Coursework__submarine___axiom
 use        Coursework__sub___axiom
 use        Coursework__openairlock__n___axiom
 use        Coursework__TairarrayD1___axiom

 let def #"coursework.ads" 76 0 0#"W:diverges:N" "GP_Subp:coursework.ads:76" 
   (__void_param : unit)
  requires { #"coursework.ads" 76 0 0# true }
  ensures { #"coursework.ads" 76 0 0# (#"coursework.ads" 80 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:coursework.ads:80:15" "GP_Id:14" "comment:     Post =>  sub.air(n) = Open and then (for all I in sub.air'Range => (if I /= n then sub.air(I) = sub.air'Old(I)));
              ^ coursework.ads:80:15:VC_POSTCONDITION" ( ( "GP_Pretty_Ada:5863" "GP_Sloc:coursework.ads:80:15" ((Coursework__airlock__rep.to_rep (let temp___509 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___509 Coursework__openairlock__n.n)))
  ) = 0) ) /\ (forall i #"coursework.ads" 80 0 0#  "model" "name:I" "model_trace:3872"  : int.
   ( ( (1 <= i) /\ (i <= 2) ) -> (if ((i <> Coursework__openairlock__n.n)) then (
    ( "GP_Pretty_Ada:3893" "GP_Sloc:coursework.ads:80:89" ((Coursework__airlock__rep.to_rep (let temp___507 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
     (Array__Int__Coursework__airlock.get temp___507 i)))
    ) = (Coursework__airlock__rep.to_rep (let temp___508 = (old (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) ) in (
     (Array__Int__Coursework__airlock.get temp___508 i)))
    )) )) else (
    ( "GP_Pretty_Ada:6893" "GP_Sloc:coursework.ads:80:74" true ))) )) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram coursework.ads:76 *)
  ;
   assume {  (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True False True True) };
   assume {  (Standard__integer___axiom.dynamic_invariant Coursework__openairlock__n.n True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram coursework.ads:76 *)
  ;
  () (* Check for RTE in the Pre of the subprogram coursework.ads:76 *)
  ;
   abstract ensures {true}(let _ = ( (Boolean.orb((Coursework__openairlock__n.n = 1)) ((Coursework__openairlock__n.n = 2))) && ( (Boolean.orb(((Coursework__airlock__rep.to_rep((let temp___501 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___501) (1))))
  )) = 1)) (((Coursework__airlock__rep.to_rep((let temp___502 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___502) (1))))
  )) = 2))) && (Boolean.orb(((Coursework__airlock__rep.to_rep((let temp___499 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___499) (2))))
  )) = 1)) (((Coursework__airlock__rep.to_rep((let temp___500 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___500) (2))))
  )) = 2))) ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram coursework.ads:76 *)
  ;
   assume {  ( ( (Coursework__openairlock__n.n = 1) \/ (Coursework__openairlock__n.n = 2) ) /\ ( ( ((Coursework__airlock__rep.to_rep (let temp___505 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___505 1)))
  ) = 1) \/ ((Coursework__airlock__rep.to_rep (let temp___506 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___506 1)))
  ) = 2) ) /\ ( ((Coursework__airlock__rep.to_rep (let temp___503 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___503 2)))
  ) = 1) \/ ((Coursework__airlock__rep.to_rep (let temp___504 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___504 2)))
  ) = 2) ) ) ) };
   abstract ensures {true}(let _ = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   ()))
   end ;
  (let temp___old_494 =  (any Array__Int__Coursework__airlock.map
  ensures { (result = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))} 
  ) in (
   (  try
    ( ( "GP_Sloc:coursework.adb:16:7" (#"coursework.adb" 16 0 0# (if (( ( (Boolean.orb((Coursework__openairlock__n.n = 1)) ((Coursework__openairlock__n.n = 2))) && (Boolean.orb(((Coursework__airlock__rep.to_rep((let temp___487 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
     (Array__Int__Coursework__airlock.get(temp___487) (1))))
    )) = 1)) (((Coursework__airlock__rep.to_rep((let temp___488 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
     (Array__Int__Coursework__airlock.get(temp___488) (1))))
    )) = 2))) ) && (Boolean.orb(((Coursework__airlock__rep.to_rep((let temp___489 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
     (Array__Int__Coursework__airlock.get(temp___489) (2))))
    )) = 1)) (((Coursework__airlock__rep.to_rep((let temp___490 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
     (Array__Int__Coursework__airlock.get(temp___490) (2))))
    )) = 2))) )) then (
     ( ( "GP_Sloc:coursework.adb:18:10" (#"coursework.adb" 18 0 0# ()) );
     ( "GP_Sloc:coursework.adb:18:21" (#"coursework.adb" 18 0 0# (let temp___486 = (let temp___485 = { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } in (
      ( #"coursework.adb" 18 0 0# abstract ensures {true}(let _ = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields(temp___485)))) in (
       ()))
       end ;
      { ( temp___485 ) with Coursework__submarine.__split_fields = { ( (Coursework__submarine.__split_fields(temp___485)) ) with Coursework__submarine.rec__coursework__submarine__air = (let temp___484 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
       (Array__Int__Coursework__airlock.set((Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) (( #"coursework.adb" 18 0 0# assert { #"coursework.adb" 18 0 0# (#"coursework.adb" 18 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:if__sub_assign__ixdcomp" "GP_Sloc:coursework.adb:18:18" "GP_Id:12" "comment:         sub.air(n) := Open;
                 ^ coursework.adb:18:18:VC_INDEX_CHECK" ( (Coursework__TairarrayD1.first <= Coursework__openairlock__n.n) /\ (Coursework__openairlock__n.n <= Coursework__TairarrayD1.last) ) )) };
       Coursework__openairlock__n.n )) ((Coursework__airlock__rep.of_rep(0))))))
       } } )))
      in (
       Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content <- ( (Coursework__submarine.__split_fields(temp___486)) )))
     ) ) )) else (
     ()))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    abstract ensures {true}(let _ = ( ((Coursework__airlock__rep.to_rep((let temp___496 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
    (Array__Int__Coursework__airlock.get(temp___496) ((  assert {  (#"coursework.ads" 80 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__cmp__ixdcomp" "GP_Sloc:coursework.ads:80:23" "GP_Id:13" "comment:     Post =>  sub.air(n) = Open and then (for all I in sub.air'Range => (if I /= n then sub.air(I) = sub.air'Old(I)));
                      ^ coursework.ads:80:23:VC_INDEX_CHECK" ( (Coursework__TairarrayD1.first <= Coursework__openairlock__n.n) /\ (Coursework__openairlock__n.n <= Coursework__TairarrayD1.last) ) )) };
    Coursework__openairlock__n.n )))))
   )) = 0) && ( (let i =  (any int
   ) in (
    (if ((Boolean.andb((1 <= i)) ((i <= 2)))) then (
      abstract ensures {true}(let _ = (if ((i <> Coursework__openairlock__n.n)) then (
      ((Coursework__airlock__rep.to_rep((let temp___493 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
       (Array__Int__Coursework__airlock.get(temp___493) (i))))
      )) = (Coursework__airlock__rep.to_rep((Array__Int__Coursework__airlock.get(temp___old_494) (i)))))) else (
      (Boolean.of_int(1)))) in (
      ()))
      end ))))
   ;
    (any bool
   requires { true} 
   ensures { ( (result = True) <-> (forall i   "model" "name:I" "model_trace:3872"  : int.
    ( ( (1 <= i) /\ (i <= 2) ) -> (if ((i <> Coursework__openairlock__n.n)) then (
     ((Coursework__airlock__rep.to_rep (let temp___495 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
      (Array__Int__Coursework__airlock.get temp___495 i)))
     ) = (Coursework__airlock__rep.to_rep (Array__Int__Coursework__airlock.get temp___old_494 i)))) else (
     true)) )) )} 
   ) ) ) in (
    ()))
    end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "lockdoor" defined at coursework.ads:82, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Coursework__lockdoor__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer___axiom
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Coursework__TairarrayD1
 use        Array__Int__Coursework__airlock
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__sub
 use        Coursework__lockdoor__n
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Standard__integer___axiom
 use        Coursework__airlock___axiom
 use        Coursework__oxegen___axiom
 use        Coursework__status___axiom
 use        Coursework__reactorheat___axiom
 use        Coursework__airarray___axiom
 use        Coursework__diving___axiom
 use        Coursework__isloaded___axiom
 use        Coursework__torarray___axiom
 use        Coursework__diverecord___axiom
 use        Coursework__torepedorecord___axiom
 use        Coursework__submarine___axiom
 use        Coursework__sub___axiom
 use        Coursework__lockdoor__n___axiom
 use        Coursework__TairarrayD1___axiom

 let def #"coursework.ads" 82 0 0#"W:diverges:N" "GP_Subp:coursework.ads:82" 
   (__void_param : unit)
  requires { #"coursework.ads" 82 0 0# true }
  ensures { #"coursework.ads" 82 0 0# (#"coursework.ads" 85 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:coursework.ads:85:14" "GP_Id:19" "comment:     Post => sub.air(n) = Locked and then
             ^ coursework.ads:85:14:VC_POSTCONDITION" ( ( "GP_Pretty_Ada:6003" "GP_Sloc:coursework.ads:85:14" ((Coursework__airlock__rep.to_rep (let temp___526 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___526 Coursework__lockdoor__n.n)))
  ) = 2) ) /\ (forall i #"coursework.ads" 85 0 0#  "model" "name:I" "model_trace:3956"  : int.
   ( ( (1 <= i) /\ (i <= 2) ) -> (if ((i <> Coursework__lockdoor__n.n)) then (
    ( "GP_Pretty_Ada:3977" "GP_Sloc:coursework.ads:86:57" ((Coursework__airlock__rep.to_rep (let temp___524 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
     (Array__Int__Coursework__airlock.get temp___524 i)))
    ) = (Coursework__airlock__rep.to_rep (let temp___525 = (old (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) ) in (
     (Array__Int__Coursework__airlock.get temp___525 i)))
    )) )) else (
    ( "GP_Pretty_Ada:6935" "GP_Sloc:coursework.ads:86:42" true ))) )) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram coursework.ads:82 *)
  ;
   assume {  (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True False True True) };
   assume {  (Standard__integer___axiom.dynamic_invariant Coursework__lockdoor__n.n True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram coursework.ads:82 *)
  ;
  () (* Check for RTE in the Pre of the subprogram coursework.ads:82 *)
  ;
   abstract ensures {true}(let _ = ( (Boolean.orb((Coursework__lockdoor__n.n = 1)) ((Coursework__lockdoor__n.n = 2))) && ((Coursework__airlock__rep.to_rep((let temp___522 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___522) ((  assert {  (#"coursework.ads" 84 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__cmp__ixdcomp" "GP_Sloc:coursework.ads:84:47" "GP_Id:18" "comment:     Pre => (n = 1 or n = 2) and then sub.air(n) = Closed,
                                              ^ coursework.ads:84:47:VC_INDEX_CHECK" ( (Coursework__TairarrayD1.first <= Coursework__lockdoor__n.n) /\ (Coursework__lockdoor__n.n <= Coursework__TairarrayD1.last) ) )) };
   Coursework__lockdoor__n.n )))))
  )) = 1) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram coursework.ads:82 *)
  ;
   assume {  ( ( (Coursework__lockdoor__n.n = 1) \/ (Coursework__lockdoor__n.n = 2) ) /\ ((Coursework__airlock__rep.to_rep (let temp___523 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___523 Coursework__lockdoor__n.n)))
  ) = 1) ) };
   abstract ensures {true}(let _ = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   ()))
   end ;
  (let temp___old_517 =  (any Array__Int__Coursework__airlock.map
  ensures { (result = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))} 
  ) in (
   (  try
    ( ( "GP_Sloc:coursework.adb:76:7" (#"coursework.adb" 76 0 0# (if (( (Boolean.orb((Coursework__lockdoor__n.n = 1)) ((Coursework__lockdoor__n.n = 2))) && ((Coursework__airlock__rep.to_rep((let temp___513 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
     (Array__Int__Coursework__airlock.get(temp___513) (( #"coursework.adb" 76 0 0# assert { #"coursework.adb" 76 0 0# (#"coursework.adb" 76 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:if__andthen__cmp__ixdcomp" "GP_Sloc:coursework.adb:76:44" "GP_Id:16" "comment:      if((n = 1 or n = 2) and then sub.air(n) = Closed) then
                                           ^ coursework.adb:76:44:VC_INDEX_CHECK" ( (Coursework__TairarrayD1.first <= Coursework__lockdoor__n.n) /\ (Coursework__lockdoor__n.n <= Coursework__TairarrayD1.last) ) )) };
     Coursework__lockdoor__n.n )))))
    )) = 1) )) then (
     ( ( "GP_Sloc:coursework.adb:77:10" (#"coursework.adb" 77 0 0# ()) );
     ( "GP_Sloc:coursework.adb:77:21" (#"coursework.adb" 77 0 0# (let temp___512 = (let temp___511 = { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } in (
      ( #"coursework.adb" 77 0 0# abstract ensures {true}(let _ = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields(temp___511)))) in (
       ()))
       end ;
      { ( temp___511 ) with Coursework__submarine.__split_fields = { ( (Coursework__submarine.__split_fields(temp___511)) ) with Coursework__submarine.rec__coursework__submarine__air = (let temp___510 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
       (Array__Int__Coursework__airlock.set((Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) (( #"coursework.adb" 77 0 0# assert { #"coursework.adb" 77 0 0# (#"coursework.adb" 77 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:if__sub_assign__ixdcomp" "GP_Sloc:coursework.adb:77:18" "GP_Id:15" "comment:         sub.air(n) := Locked;
                 ^ coursework.adb:77:18:VC_INDEX_CHECK" ( (Coursework__TairarrayD1.first <= Coursework__lockdoor__n.n) /\ (Coursework__lockdoor__n.n <= Coursework__TairarrayD1.last) ) )) };
       Coursework__lockdoor__n.n )) ((Coursework__airlock__rep.of_rep(2))))))
       } } )))
      in (
       Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content <- ( (Coursework__submarine.__split_fields(temp___512)) )))
     ) ) )) else (
     ()))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    abstract ensures {true}(let _ = ( ((Coursework__airlock__rep.to_rep((let temp___519 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
    (Array__Int__Coursework__airlock.get(temp___519) ((  assert {  (#"coursework.ads" 85 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__cmp__ixdcomp" "GP_Sloc:coursework.ads:85:22" "GP_Id:17" "comment:     Post => sub.air(n) = Locked and then
                     ^ coursework.ads:85:22:VC_INDEX_CHECK" ( (Coursework__TairarrayD1.first <= Coursework__lockdoor__n.n) /\ (Coursework__lockdoor__n.n <= Coursework__TairarrayD1.last) ) )) };
    Coursework__lockdoor__n.n )))))
   )) = 2) && ( (let i =  (any int
   ) in (
    (if ((Boolean.andb((1 <= i)) ((i <= 2)))) then (
      abstract ensures {true}(let _ = (if ((i <> Coursework__lockdoor__n.n)) then (
      ((Coursework__airlock__rep.to_rep((let temp___516 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
       (Array__Int__Coursework__airlock.get(temp___516) (i))))
      )) = (Coursework__airlock__rep.to_rep((Array__Int__Coursework__airlock.get(temp___old_517) (i)))))) else (
      (Boolean.of_int(1)))) in (
      ()))
      end ))))
   ;
    (any bool
   requires { true} 
   ensures { ( (result = True) <-> (forall i   "model" "name:I" "model_trace:3956"  : int.
    ( ( (1 <= i) /\ (i <= 2) ) -> (if ((i <> Coursework__lockdoor__n.n)) then (
     ((Coursework__airlock__rep.to_rep (let temp___518 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
      (Array__Int__Coursework__airlock.get temp___518 i)))
     ) = (Coursework__airlock__rep.to_rep (Array__Int__Coursework__airlock.get temp___old_517 i)))) else (
     true)) )) )} 
   ) ) ) in (
    ()))
    end  )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "loadtorpedeo" defined at coursework.ads:88, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Coursework__loadtorpedeo__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer___axiom
 use        Standard__integer__rep
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Array__Int__Coursework__airlock
 use        Coursework__isloaded
 use        Coursework__isloaded__rep
 use        Coursework__TtorarrayD1
 use        Array__Int__Coursework__isloaded
 use        Coursework__torepedorecord
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__sub
 use        Coursework__loadtorpedeo__n
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Standard__integer___axiom
 use        Standard__integer___axiom
 use        Coursework__airlock___axiom
 use        Coursework__oxegen___axiom
 use        Coursework__status___axiom
 use        Coursework__reactorheat___axiom
 use        Coursework__airarray___axiom
 use        Coursework__diving___axiom
 use        Coursework__isloaded___axiom
 use        Coursework__torarray___axiom
 use        Coursework__diverecord___axiom
 use        Coursework__torepedorecord___axiom
 use        Coursework__submarine___axiom
 use        Coursework__sub___axiom
 use        Coursework__loadtorpedeo__n___axiom
 use        Coursework__TtorarrayD1___axiom

 let def #"coursework.ads" 88 0 0#"W:diverges:N" "GP_Subp:coursework.ads:88" 
   (__void_param : unit)
  requires { #"coursework.ads" 88 0 0# true }
  ensures { #"coursework.ads" 88 0 0# (#"coursework.ads" 92 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:coursework.ads:92:14" "GP_Id:27" "comment:     Post => sub.tor.slots(n) = Loaded
             ^ coursework.ads:92:14:VC_POSTCONDITION" ( ( "GP_Pretty_Ada:6415" "GP_Sloc:coursework.ads:92:14" ((Coursework__isloaded__rep.to_rep (let temp___558 = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__isloaded.get temp___558 Coursework__loadtorpedeo__n.n)))
  ) = 1) ) /\ ( ( "GP_Pretty_Ada:4073" "GP_Sloc:coursework.ads:93:45" ((Standard__integer__rep.to_rep (Coursework__torepedorecord.rec__coursework__torepedorecord__numberoftorepedos (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))))) < (Standard__integer__rep.to_rep (old (Coursework__torepedorecord.rec__coursework__torepedorecord__numberoftorepedos (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) ))) ) /\ ( (forall i #"coursework.ads" 92 0 0#  "model" "name:I" "model_trace:4082"  : int.
   ( ( (1 <= i) /\ (i <= 4) ) -> (if ((i <> Coursework__loadtorpedeo__n.n)) then (
    ( "GP_Pretty_Ada:4107" "GP_Sloc:coursework.ads:94:72" ((Coursework__isloaded__rep.to_rep (let temp___556 = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
     (Array__Int__Coursework__isloaded.get temp___556 i)))
    ) = (Coursework__isloaded__rep.to_rep (let temp___557 = (old (Coursework__torepedorecord.rec__coursework__torepedorecord__slots (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) ) in (
     (Array__Int__Coursework__isloaded.get temp___557 i)))
    )) )) else (
    ( "GP_Pretty_Ada:6983" "GP_Sloc:coursework.ads:94:57" true ))) )) /\ ( "GP_Pretty_Ada:4126" "GP_Sloc:coursework.ads:95:36" ((Coursework__isloaded__rep.to_rep (let temp___554 = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__isloaded.get temp___554 Coursework__loadtorpedeo__n.n)))
  ) <> (Coursework__isloaded__rep.to_rep (let temp___555 = (old (Coursework__torepedorecord.rec__coursework__torepedorecord__slots (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) ) in (
   (Array__Int__Coursework__isloaded.get temp___555 Coursework__loadtorpedeo__n.n)))
  )) ) ) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram coursework.ads:88 *)
  ;
   assume {  (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True False True True) };
   assume {  (Standard__integer___axiom.dynamic_invariant Coursework__loadtorpedeo__n.n True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram coursework.ads:88 *)
  ;
  () (* Check for RTE in the Pre of the subprogram coursework.ads:88 *)
  ;
   abstract ensures {true}(let _ = ( (Coursework__loadtorpedeo__n.n >= 1) && ( (Coursework__loadtorpedeo__n.n <= 4) && ( ((Coursework__airlock__rep.to_rep((let temp___550 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___550) (1))))
  )) = 2) && ( ((Coursework__airlock__rep.to_rep((let temp___549 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___549) (2))))
  )) = 2) && ( ((Coursework__isloaded__rep.to_rep((let temp___548 = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots((Coursework__torepedorecord.__split_fields((Coursework__submarine.rec__coursework__submarine__tor((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))))) in (
   (Array__Int__Coursework__isloaded.get(temp___548) ((  assert {  (#"coursework.ads" 91 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__cmp__ixdcomp" "GP_Sloc:coursework.ads:91:33" "GP_Id:26" "comment:         and then sub.tor.slots(n) = Empty and then sub.tor.numberOfTorepedos > 0,
                                ^ coursework.ads:91:33:VC_INDEX_CHECK" ( (Coursework__TtorarrayD1.first <= Coursework__loadtorpedeo__n.n) /\ (Coursework__loadtorpedeo__n.n <= Coursework__TtorarrayD1.last) ) )) };
   Coursework__loadtorpedeo__n.n )))))
  )) = 0) && ((Standard__integer__rep.to_rep((Coursework__torepedorecord.rec__coursework__torepedorecord__numberoftorepedos((Coursework__torepedorecord.__split_fields((Coursework__submarine.rec__coursework__submarine__tor((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))))))) > 0) ) ) ) ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram coursework.ads:88 *)
  ;
   assume {  ( (Coursework__loadtorpedeo__n.n >= 1) /\ ( (Coursework__loadtorpedeo__n.n <= 4) /\ ( ((Coursework__airlock__rep.to_rep (let temp___553 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___553 1)))
  ) = 2) /\ ( ((Coursework__airlock__rep.to_rep (let temp___552 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___552 2)))
  ) = 2) /\ ( ((Coursework__isloaded__rep.to_rep (let temp___551 = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__isloaded.get temp___551 Coursework__loadtorpedeo__n.n)))
  ) = 0) /\ ((Standard__integer__rep.to_rep (Coursework__torepedorecord.rec__coursework__torepedorecord__numberoftorepedos (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))))) > 0) ) ) ) ) ) };
   abstract ensures {true}(let _ = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots((Coursework__torepedorecord.__split_fields((Coursework__submarine.rec__coursework__submarine__tor((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))))) in (
   ()))
   end ;
  (let temp___old_540 =  (any Array__Int__Coursework__isloaded.map
  ensures { (result = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))} 
  ) in (
   (  abstract ensures {true}(let _ = (Coursework__torepedorecord.rec__coursework__torepedorecord__numberoftorepedos((Coursework__torepedorecord.__split_fields((Coursework__submarine.rec__coursework__submarine__tor((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))))) in (
    ()))
    end ;
   (let temp___old_544 =  (any int
   ensures { (result = (Standard__integer__rep.to_rep (Coursework__torepedorecord.rec__coursework__torepedorecord__numberoftorepedos (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))))))} 
   ) in (
    (  abstract ensures {true}(let _ = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots((Coursework__torepedorecord.__split_fields((Coursework__submarine.rec__coursework__submarine__tor((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))))) in (
     ()))
     end ;
    (let temp___old_542 =  (any Array__Int__Coursework__isloaded.map
    ensures { (result = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))} 
    ) in (
     (  try
      ( ( "GP_Sloc:coursework.adb:83:7" (#"coursework.adb" 83 0 0# (if (( ( ( ( ( (Coursework__loadtorpedeo__n.n >= 1) && (Coursework__loadtorpedeo__n.n <= 4) ) && ((Coursework__airlock__rep.to_rep((let temp___534 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
       (Array__Int__Coursework__airlock.get(temp___534) (1))))
      )) = 2) ) && ((Coursework__airlock__rep.to_rep((let temp___535 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
       (Array__Int__Coursework__airlock.get(temp___535) (2))))
      )) = 2) ) && ((Coursework__isloaded__rep.to_rep((let temp___536 = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots((Coursework__torepedorecord.__split_fields((Coursework__submarine.rec__coursework__submarine__tor((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))))) in (
       (Array__Int__Coursework__isloaded.get(temp___536) (( #"coursework.adb" 83 0 0# assert { #"coursework.adb" 83 0 0# (#"coursework.adb" 84 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:coursework.adb:84:33" "GP_Id:22" "comment:         and then sub.tor.slots(n) = Empty and then sub.tor.numberOfTorepedos > 0) then
                                ^ coursework.adb:84:33:VC_INDEX_CHECK" "GP_Shape:if__andthen__andthen__cmp__ixdcomp" ( (Coursework__TtorarrayD1.first <= Coursework__loadtorpedeo__n.n) /\ (Coursework__loadtorpedeo__n.n <= Coursework__TtorarrayD1.last) ) )) };
       Coursework__loadtorpedeo__n.n )))))
      )) = 0) ) && ((Standard__integer__rep.to_rep((Coursework__torepedorecord.rec__coursework__torepedorecord__numberoftorepedos((Coursework__torepedorecord.__split_fields((Coursework__submarine.rec__coursework__submarine__tor((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))))))) > 0) )) then (
       ( ( "GP_Sloc:coursework.adb:85:10" (#"coursework.adb" 85 0 0# ()) );
       ( "GP_Sloc:coursework.adb:85:27" (#"coursework.adb" 85 0 0# (let temp___530 = (let temp___529 = { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } in (
        ( #"coursework.adb" 85 0 0# abstract ensures {true}(let _ = (Coursework__submarine.rec__coursework__submarine__tor((Coursework__submarine.__split_fields(temp___529)))) in (
         ()))
         end ;
        { ( temp___529 ) with Coursework__submarine.__split_fields = { ( (Coursework__submarine.__split_fields(temp___529)) ) with Coursework__submarine.rec__coursework__submarine__tor = (let temp___528 = (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
         ( #"coursework.adb" 85 0 0# abstract ensures {true}(let _ = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots((Coursework__torepedorecord.__split_fields(temp___528)))) in (
          ()))
          end ;
         { ( temp___528 ) with Coursework__torepedorecord.__split_fields = { ( (Coursework__torepedorecord.__split_fields(temp___528)) ) with Coursework__torepedorecord.rec__coursework__torepedorecord__slots = (let temp___527 = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
          (Array__Int__Coursework__isloaded.set((Coursework__torepedorecord.rec__coursework__torepedorecord__slots (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))))) (( #"coursework.adb" 85 0 0# assert { #"coursework.adb" 85 0 0# (#"coursework.adb" 85 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:if__sub_assign__ixdcomp" "GP_Sloc:coursework.adb:85:24" "GP_Id:20" "comment:         sub.tor.slots(n) := Loaded;
                       ^ coursework.adb:85:24:VC_INDEX_CHECK" ( (Coursework__TtorarrayD1.first <= Coursework__loadtorpedeo__n.n) /\ (Coursework__loadtorpedeo__n.n <= Coursework__TtorarrayD1.last) ) )) };
          Coursework__loadtorpedeo__n.n )) ((Coursework__isloaded__rep.of_rep(1))))))
          } } )))
         } } )))
        in (
         Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content <- ( (Coursework__submarine.__split_fields(temp___530)) )))
       ) );
       ( "GP_Sloc:coursework.adb:86:10" (#"coursework.adb" 86 0 0# ()) );
       ( "GP_Sloc:coursework.adb:86:39" (#"coursework.adb" 86 0 0# ()) );
       ( "GP_Sloc:coursework.adb:86:36" (#"coursework.adb" 86 0 0# (let temp___533 = (let temp___532 = { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } in (
        ( #"coursework.adb" 86 0 0# abstract ensures {true}(let _ = (Coursework__submarine.rec__coursework__submarine__tor((Coursework__submarine.__split_fields(temp___532)))) in (
         ()))
         end ;
        { ( temp___532 ) with Coursework__submarine.__split_fields = { ( (Coursework__submarine.__split_fields(temp___532)) ) with Coursework__submarine.rec__coursework__submarine__tor = (let temp___531 = (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
         ( #"coursework.adb" 86 0 0# abstract ensures {true}(let _ = (Coursework__torepedorecord.rec__coursework__torepedorecord__numberoftorepedos((Coursework__torepedorecord.__split_fields(temp___531)))) in (
          ()))
          end ;
         { ( temp___531 ) with Coursework__torepedorecord.__split_fields = { ( (Coursework__torepedorecord.__split_fields(temp___531)) ) with Coursework__torepedorecord.rec__coursework__torepedorecord__numberoftorepedos = (Standard__integer__rep.of_rep((#"coursework.adb" 86 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:coursework.adb:86:65" "GP_Id:21" "comment:         sub.tor.numberOfTorepedos := sub.tor.numberOfTorepedos - 1;
                                                                ^ coursework.adb:86:65:VC_OVERFLOW_CHECK" "GP_Shape:if__sub_assign__sub" (Standard__integer.range_check_(((Standard__integer__rep.to_rep((Coursework__torepedorecord.rec__coursework__torepedorecord__numberoftorepedos((Coursework__torepedorecord.__split_fields((Coursework__submarine.rec__coursework__submarine__tor((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))))))) - 1))) )))) } } )))
         } } )))
        in (
         Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content <- ( (Coursework__submarine.__split_fields(temp___533)) )))
       ) ) )) else (
       ()))) );
       raise Return__exc )
     with
      Return__exc -> ()
     end;
      abstract ensures {true}(let _ = ( ((Coursework__isloaded__rep.to_rep((let temp___545 = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots((Coursework__torepedorecord.__split_fields((Coursework__submarine.rec__coursework__submarine__tor((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))))) in (
      (Array__Int__Coursework__isloaded.get(temp___545) ((  assert {  (#"coursework.ads" 92 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__cmp__ixdcomp" "GP_Sloc:coursework.ads:92:28" "GP_Id:25" "comment:     Post => sub.tor.slots(n) = Loaded
                           ^ coursework.ads:92:28:VC_INDEX_CHECK" ( (Coursework__TtorarrayD1.first <= Coursework__loadtorpedeo__n.n) /\ (Coursework__loadtorpedeo__n.n <= Coursework__TtorarrayD1.last) ) )) };
      Coursework__loadtorpedeo__n.n )))))
     )) = 1) && ( ((Standard__integer__rep.to_rep((Coursework__torepedorecord.rec__coursework__torepedorecord__numberoftorepedos((Coursework__torepedorecord.__split_fields((Coursework__submarine.rec__coursework__submarine__tor((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))))))) < temp___old_544) && ( ( (let i =  (any int
     ) in (
      (if ((Boolean.andb((1 <= i)) ((i <= 4)))) then (
        abstract ensures {true}(let _ = (if ((i <> Coursework__loadtorpedeo__n.n)) then (
        ((Coursework__isloaded__rep.to_rep((let temp___541 = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots((Coursework__torepedorecord.__split_fields((Coursework__submarine.rec__coursework__submarine__tor((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))))) in (
         (Array__Int__Coursework__isloaded.get(temp___541) (i))))
        )) = (Coursework__isloaded__rep.to_rep((Array__Int__Coursework__isloaded.get(temp___old_542) (i)))))) else (
        (Boolean.of_int(1)))) in (
        ()))
        end ))))
     ;
      (any bool
     requires { true} 
     ensures { ( (result = True) <-> (forall i   "model" "name:I" "model_trace:4082"  : int.
      ( ( (1 <= i) /\ (i <= 4) ) -> (if ((i <> Coursework__loadtorpedeo__n.n)) then (
       ((Coursework__isloaded__rep.to_rep (let temp___543 = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
        (Array__Int__Coursework__isloaded.get temp___543 i)))
       ) = (Coursework__isloaded__rep.to_rep (Array__Int__Coursework__isloaded.get temp___old_542 i)))) else (
       true)) )) )} 
     ) ) && ((Coursework__isloaded__rep.to_rep((let temp___539 = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots((Coursework__torepedorecord.__split_fields((Coursework__submarine.rec__coursework__submarine__tor((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))))) in (
      (Array__Int__Coursework__isloaded.get(temp___539) ((  assert {  (#"coursework.ads" 95 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__cmp__ixdcomp" "GP_Sloc:coursework.ads:95:33" "GP_Id:23" "comment:         and then sub.tor.slots(n) /= sub.tor.slots'Old(n);
                                ^ coursework.ads:95:33:VC_INDEX_CHECK" ( (Coursework__TtorarrayD1.first <= Coursework__loadtorpedeo__n.n) /\ (Coursework__loadtorpedeo__n.n <= Coursework__TtorarrayD1.last) ) )) };
      Coursework__loadtorpedeo__n.n )))))
     )) <> (Coursework__isloaded__rep.to_rep((Array__Int__Coursework__isloaded.get(temp___old_540) ((  assert {  (#"coursework.ads" 95 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__cmp__ixdcomp" "GP_Sloc:coursework.ads:95:57" "GP_Id:24" "comment:         and then sub.tor.slots(n) /= sub.tor.slots'Old(n);
                                                        ^ coursework.ads:95:57:VC_INDEX_CHECK" ( (Coursework__TtorarrayD1.first <= Coursework__loadtorpedeo__n.n) /\ (Coursework__loadtorpedeo__n.n <= Coursework__TtorarrayD1.last) ) )) };
     Coursework__loadtorpedeo__n.n )))))) ) ) ) in (
      ()))
      end  )))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "firetorpedeo" defined at coursework.ads:97, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Coursework__firetorpedeo__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer___axiom
 use        Coursework__airlock
 use        Coursework__airlock__rep
 use        Coursework__status
 use        Coursework__status__rep
 use        Array__Int__Coursework__airlock
 use        Coursework__isloaded
 use        Coursework__isloaded__rep
 use        Coursework__TtorarrayD1
 use        Array__Int__Coursework__isloaded
 use        Coursework__torepedorecord
 use        Coursework__submarine
 use        Coursework__submarine___axiom
 use        Coursework__sub
 use        Coursework__firetorpedeo__n
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__airlock
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Array__Int__Coursework__isloaded
 use        Standard__integer___axiom
 use        Coursework__airlock___axiom
 use        Coursework__oxegen___axiom
 use        Coursework__status___axiom
 use        Coursework__reactorheat___axiom
 use        Coursework__airarray___axiom
 use        Coursework__diving___axiom
 use        Coursework__isloaded___axiom
 use        Coursework__torarray___axiom
 use        Coursework__diverecord___axiom
 use        Coursework__torepedorecord___axiom
 use        Coursework__submarine___axiom
 use        Coursework__sub___axiom
 use        Coursework__firetorpedeo__n___axiom
 use        Coursework__TtorarrayD1___axiom

 let def #"coursework.ads" 97 0 0#"W:diverges:N" "GP_Subp:coursework.ads:97" 
   (__void_param : unit)
  requires { #"coursework.ads" 97 0 0# true }
  ensures { #"coursework.ads" 97 0 0# (#"coursework.ads" 101 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:coursework.ads:101:14" "GP_Id:32" "comment:     Post => sub.tor.slots(n) = Empty and then (for all I in sub.tor.slots'Range => (if I /= n then sub.tor.slots(I) = sub.tor.slots'Old(I)));
             ^ coursework.ads:101:14:VC_POSTCONDITION" ( ( "GP_Pretty_Ada:6742" "GP_Sloc:coursework.ads:101:14" ((Coursework__isloaded__rep.to_rep (let temp___582 = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__isloaded.get temp___582 Coursework__firetorpedeo__n.n)))
  ) = 0) ) /\ (forall i #"coursework.ads" 101 0 0#  "model" "name:I" "model_trace:4216"  : int.
   ( ( (1 <= i) /\ (i <= 4) ) -> (if ((i <> Coursework__firetorpedeo__n.n)) then (
    ( "GP_Pretty_Ada:4241" "GP_Sloc:coursework.ads:101:101" ((Coursework__isloaded__rep.to_rep (let temp___580 = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
     (Array__Int__Coursework__isloaded.get temp___580 i)))
    ) = (Coursework__isloaded__rep.to_rep (let temp___581 = (old (Coursework__torepedorecord.rec__coursework__torepedorecord__slots (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) ) in (
     (Array__Int__Coursework__isloaded.get temp___581 i)))
    )) )) else (
    ( "GP_Pretty_Ada:7031" "GP_Sloc:coursework.ads:101:86" true ))) )) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram coursework.ads:97 *)
  ;
   assume {  (Coursework__submarine___axiom.dynamic_invariant { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } True False True True) };
   assume {  (Standard__integer___axiom.dynamic_invariant Coursework__firetorpedeo__n.n True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram coursework.ads:97 *)
  ;
  () (* Check for RTE in the Pre of the subprogram coursework.ads:97 *)
  ;
   abstract ensures {true}(let _ = ( (Coursework__firetorpedeo__n.n >= 1) && ( (Coursework__firetorpedeo__n.n <= 4) && ( ((Coursework__airlock__rep.to_rep((let temp___576 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___576) (1))))
  )) = 2) && ( ((Coursework__airlock__rep.to_rep((let temp___575 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__airlock.get(temp___575) (2))))
  )) = 2) && ( ((Coursework__isloaded__rep.to_rep((let temp___574 = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots((Coursework__torepedorecord.__split_fields((Coursework__submarine.rec__coursework__submarine__tor((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))))) in (
   (Array__Int__Coursework__isloaded.get(temp___574) ((  assert {  (#"coursework.ads" 100 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__cmp__ixdcomp" "GP_Sloc:coursework.ads:100:32" "GP_Id:31" "comment:        and then sub.tor.slots(n) = Loaded and then sub.stat = Submerged,
                               ^ coursework.ads:100:32:VC_INDEX_CHECK" ( (Coursework__TtorarrayD1.first <= Coursework__firetorpedeo__n.n) /\ (Coursework__firetorpedeo__n.n <= Coursework__TtorarrayD1.last) ) )) };
   Coursework__firetorpedeo__n.n )))))
  )) = 1) && ((Coursework__status__rep.to_rep((Coursework__submarine.rec__coursework__submarine__stat((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) ) ) ) ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram coursework.ads:97 *)
  ;
   assume {  ( (Coursework__firetorpedeo__n.n >= 1) /\ ( (Coursework__firetorpedeo__n.n <= 4) /\ ( ((Coursework__airlock__rep.to_rep (let temp___579 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___579 1)))
  ) = 2) /\ ( ((Coursework__airlock__rep.to_rep (let temp___578 = (Coursework__submarine.rec__coursework__submarine__air (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
   (Array__Int__Coursework__airlock.get temp___578 2)))
  ) = 2) /\ ( ((Coursework__isloaded__rep.to_rep (let temp___577 = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
   (Array__Int__Coursework__isloaded.get temp___577 Coursework__firetorpedeo__n.n)))
  ) = 1) /\ ((Coursework__status__rep.to_rep (Coursework__submarine.rec__coursework__submarine__stat (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))) = 0) ) ) ) ) ) };
   abstract ensures {true}(let _ = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots((Coursework__torepedorecord.__split_fields((Coursework__submarine.rec__coursework__submarine__tor((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))))) in (
   ()))
   end ;
  (let temp___old_569 =  (any Array__Int__Coursework__isloaded.map
  ensures { (result = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))} 
  ) in (
   (  try
    ( ( "GP_Sloc:coursework.adb:92:7" (#"coursework.adb" 92 0 0# (if (( ( ( ( ( (Coursework__firetorpedeo__n.n >= 1) && (Coursework__firetorpedeo__n.n <= 4) ) && ((Coursework__airlock__rep.to_rep((let temp___563 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
     (Array__Int__Coursework__airlock.get(temp___563) (1))))
    )) = 2) ) && ((Coursework__airlock__rep.to_rep((let temp___564 = (Coursework__submarine.rec__coursework__submarine__air((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
     (Array__Int__Coursework__airlock.get(temp___564) (2))))
    )) = 2) ) && ((Coursework__isloaded__rep.to_rep((let temp___565 = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots((Coursework__torepedorecord.__split_fields((Coursework__submarine.rec__coursework__submarine__tor((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))))) in (
     (Array__Int__Coursework__isloaded.get(temp___565) (( #"coursework.adb" 92 0 0# assert { #"coursework.adb" 92 0 0# (#"coursework.adb" 93 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:if__andthen__andthen__cmp__ixdcomp" "GP_Sloc:coursework.adb:93:33" "GP_Id:29" "comment:         and then sub.tor.slots(n) = Loaded and then sub.stat = Submerged) then
                                ^ coursework.adb:93:33:VC_INDEX_CHECK" ( (Coursework__TtorarrayD1.first <= Coursework__firetorpedeo__n.n) /\ (Coursework__firetorpedeo__n.n <= Coursework__TtorarrayD1.last) ) )) };
     Coursework__firetorpedeo__n.n )))))
    )) = 1) ) && ((Coursework__status__rep.to_rep((Coursework__submarine.rec__coursework__submarine__stat((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))) = 0) )) then (
     ( ( "GP_Sloc:coursework.adb:95:10" (#"coursework.adb" 95 0 0# ()) );
     ( "GP_Sloc:coursework.adb:95:27" (#"coursework.adb" 95 0 0# (let temp___562 = (let temp___561 = { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content } in (
      ( #"coursework.adb" 95 0 0# abstract ensures {true}(let _ = (Coursework__submarine.rec__coursework__submarine__tor((Coursework__submarine.__split_fields(temp___561)))) in (
       ()))
       end ;
      { ( temp___561 ) with Coursework__submarine.__split_fields = { ( (Coursework__submarine.__split_fields(temp___561)) ) with Coursework__submarine.rec__coursework__submarine__tor = (let temp___560 = (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })) in (
       ( #"coursework.adb" 95 0 0# abstract ensures {true}(let _ = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots((Coursework__torepedorecord.__split_fields(temp___560)))) in (
        ()))
        end ;
       { ( temp___560 ) with Coursework__torepedorecord.__split_fields = { ( (Coursework__torepedorecord.__split_fields(temp___560)) ) with Coursework__torepedorecord.rec__coursework__torepedorecord__slots = (let temp___559 = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
        (Array__Int__Coursework__isloaded.set((Coursework__torepedorecord.rec__coursework__torepedorecord__slots (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content }))))) (( #"coursework.adb" 95 0 0# assert { #"coursework.adb" 95 0 0# (#"coursework.adb" 95 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:if__sub_assign__ixdcomp" "GP_Sloc:coursework.adb:95:24" "GP_Id:28" "comment:         sub.tor.slots(n) := Empty;
                       ^ coursework.adb:95:24:VC_INDEX_CHECK" ( (Coursework__TtorarrayD1.first <= Coursework__firetorpedeo__n.n) /\ (Coursework__firetorpedeo__n.n <= Coursework__TtorarrayD1.last) ) )) };
        Coursework__firetorpedeo__n.n )) ((Coursework__isloaded__rep.of_rep(0))))))
        } } )))
       } } )))
      in (
       Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content <- ( (Coursework__submarine.__split_fields(temp___562)) )))
     ) ) )) else (
     ()))) );
     raise Return__exc )
   with
    Return__exc -> ()
   end;
    abstract ensures {true}(let _ = ( ((Coursework__isloaded__rep.to_rep((let temp___571 = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots((Coursework__torepedorecord.__split_fields((Coursework__submarine.rec__coursework__submarine__tor((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))))) in (
    (Array__Int__Coursework__isloaded.get(temp___571) ((  assert {  (#"coursework.ads" 101 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__cmp__ixdcomp" "GP_Sloc:coursework.ads:101:28" "GP_Id:30" "comment:     Post => sub.tor.slots(n) = Empty and then (for all I in sub.tor.slots'Range => (if I /= n then sub.tor.slots(I) = sub.tor.slots'Old(I)));
                           ^ coursework.ads:101:28:VC_INDEX_CHECK" ( (Coursework__TtorarrayD1.first <= Coursework__firetorpedeo__n.n) /\ (Coursework__firetorpedeo__n.n <= Coursework__TtorarrayD1.last) ) )) };
    Coursework__firetorpedeo__n.n )))))
   )) = 0) && ( (let i =  (any int
   ) in (
    (if ((Boolean.andb((1 <= i)) ((i <= 4)))) then (
      abstract ensures {true}(let _ = (if ((i <> Coursework__firetorpedeo__n.n)) then (
      ((Coursework__isloaded__rep.to_rep((let temp___568 = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots((Coursework__torepedorecord.__split_fields((Coursework__submarine.rec__coursework__submarine__tor((Coursework__submarine.__split_fields({ Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))))))) in (
       (Array__Int__Coursework__isloaded.get(temp___568) (i))))
      )) = (Coursework__isloaded__rep.to_rep((Array__Int__Coursework__isloaded.get(temp___old_569) (i)))))) else (
      (Boolean.of_int(1)))) in (
      ()))
      end ))))
   ;
    (any bool
   requires { true} 
   ensures { ( (result = True) <-> (forall i   "model" "name:I" "model_trace:4216"  : int.
    ( ( (1 <= i) /\ (i <= 4) ) -> (if ((i <> Coursework__firetorpedeo__n.n)) then (
     ((Coursework__isloaded__rep.to_rep (let temp___570 = (Coursework__torepedorecord.rec__coursework__torepedorecord__slots (Coursework__torepedorecord.__split_fields (Coursework__submarine.rec__coursework__submarine__tor (Coursework__submarine.__split_fields { Coursework__submarine.__split_fields = Coursework__sub.sub__split_fields.Coursework__submarine.__split_fields__content })))) in (
      (Array__Int__Coursework__isloaded.get temp___570 i)))
     ) = (Coursework__isloaded__rep.to_rep (Array__Int__Coursework__isloaded.get temp___old_569 i)))) else (
     true)) )) )} 
   ) ) ) in (
    ()))
    end  )))
   )
end
